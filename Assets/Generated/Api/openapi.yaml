openapi: 3.0.1
info:
  contact:
    email: info@namazustudios.com
    name: Namazu Studios / Elemental Computing Inc.
    url: https://namazustudios.com
  description: ECI Elements Core APIs
  title: ECI Elements
  version: 3.4.12 - 269e2454fdf4ae1e7fe7e3b5889ab8dc3e23d53f - 2025-10-27 02:10:17
externalDocs:
  description: Please see the ECI Elements Manual for more information.
  url: https://manual.getelements.dev
servers:
- description: Elements Core API
  url: http://localhost:8080/api/rest
security:
- auth_bearer: []
- session_secret: []
paths:
  /ios/receipt:
    post:
      description: "Upload Apple IAP Receipt. Returns a list of RewardIssuances, which\
        \ may contain already-redeemed issuances."
      operationId: uploadAppleIapReceipt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAppleIapReceipt"
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RewardIssuance"
                type: array
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /application/{applicationNameOrId}/configuration:
    get:
      description: Searches all instances of ApplicationProfiles associated with  the
        application.  The search query may be a full text search.
      operationId: getApplicationProfiles
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Searches application profiles
  /application:
    get:
      description: Performs a full-text search of all applications known to the server.  As
        with other full-text endpoints this allows for pagination and offset.
      operationId: getApplications
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationApplication"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Applications
    post:
      description: Gets the metadata for a single application.  This may include more
        specific details not available in the bulk-get or fetch operation.
      operationId: createApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApplicationRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a New Application
  /application/{nameOrId}:
    delete:
      description: Deletes a specific application known to the server.
      operationId: deleteApplication
      parameters:
      - explode: false
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes an Application
    get:
      description: Gets the metadata for a single application.  This may include more
        specific details not available in the bulk-get or fetch operation.
      operationId: getApplication
      parameters:
      - explode: false
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get an Application
    put:
      description: Performs an update to an existing application known to the server.
      operationId: updateApplication
      parameters:
      - explode: false
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApplicationRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an Application
  /application/{applicationNameOrId}/configuration/facebook:
    post:
      description: Creates a new Facebook ApplicationConfiguration with the specific
        ID or application.
      operationId: createFacebookApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FacebookApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FacebookApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Facebook ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/facebook/{applicationConfigurationNameOrId}:
    delete:
      description: Deletes an existing Facebook Application profile if it is known
        to the server.
      operationId: deleteFacebookApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Facebook ApplicationConfiguration
    get:
      description: Gets a single Facebook application based on unique name or ID.
      operationId: getFacebookApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FacebookApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Facebook Application Configuration
    put:
      description: Updates an existing Facebook Application profile if it is known
        to the server.
      operationId: updateFacebookApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FacebookApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FacebookApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a Facebook ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/firebase:
    post:
      description: Creates a new Firebase ApplicationConfiguration with the specific
        ID or application.
      operationId: createFirebaseApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FirebaseApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FirebaseApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Firebase ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/firebase/{applicationConfigurationNameOrId}:
    delete:
      description: Deletes an existing Firebase Application profile if it is known
        to the server.
      operationId: deleteFirebaseApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Firebase ApplicationConfiguration
    get:
      description: Gets a single Firebase application based on unique name or ID.
      operationId: getFirebaseApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FirebaseApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Firebase Application Configuration
    put:
      description: Updates an existing Firebase Application profile if it is known
        to the server.
      operationId: updateFirebaseApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FirebaseApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FirebaseApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a Firebase ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/google_play:
    post:
      description: Creates a new GooglePlay ApplicationConfiguration with the specific
        ID or application.
      operationId: createGooglePlayApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GooglePlayApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GooglePlayApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Google Play ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/google_play/{applicationConfigurationNameOrId}:
    delete:
      description: Deletes an existing Google Play Application profile if it is known
        to the server.
      operationId: deleteGooglePlayApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Google Play ApplicationConfiguration
    get:
      description: Gets a single Google Play application based on unique name or ID.
      operationId: getGooglePlayApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GooglePlayApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Google Play Application Configuration
    put:
      description: Updates an existing Google Play Application profile if it is known
        to the server.
      operationId: updateGooglePlayApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GooglePlayApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GooglePlayApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a Google Play ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/google_play/{applicationConfigurationNameOrId}/product_bundles:
    put:
      description: Updates the ProductBundle for the given ApplicationConfiguration
      operationId: updateProductBundleForApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: "#/components/schemas/ProductBundle"
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates the ProductBundle
  /application/{applicationNameOrId}/configuration/ios:
    post:
      description: Creates a new iOS ApplicationConfiguration with the specific ID
        or application.
      operationId: createIosApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IosApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IosApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new iOS ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/ios/{applicationConfigurationNameOrId}:
    delete:
      description: Deletes an existing iOS Application profile if it is known to the
        server.
      operationId: deleteIosApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a iOS ApplicationConfiguration
    get:
      description: Gets a single iOS application based on unique name or ID.
      operationId: getIosApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IosApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a iOS Application Configuration
    put:
      description: Updates an existing iOS Application profile if it is known to the
        server.
      operationId: updateIosApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IosApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IosApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a iOS ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/ios/{applicationConfigurationNameOrId}/product_bundles:
    put:
      description: Updates the ProductBundle for the given ApplicationConfiguration
      operationId: updateProductBundleForApplicationConfiguration_1
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/ProductBundle"
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates the ProductBundle
  /application/{applicationNameOrId}/configuration/matchmaking:
    post:
      description: Creates a new iOS ApplicationConfiguration with the specific ID
        or application.
      operationId: createMatchmakingApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchmakingApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchmakingApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new iOS ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/matchmaking/{applicationConfigurationNameOrId}:
    delete:
      description: Deletes an existing iOS Application profile if it is known to the
        server.
      operationId: deleteMatchmakingApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a iOS ApplicationConfiguration
    get:
      description: Gets a single iOS application based on unique name or ID.
      operationId: getMatchmakingApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchmakingApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a iOS Application Configuration
    put:
      description: Updates an existing iOS Application profile if it is known to the
        server.
      operationId: updateMatchmakingApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchmakingApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchmakingApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a iOS ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/psn:
    post:
      description: Creates a new PSN ApplicationConfiguration with the specific ID
        or application.
      operationId: createPSNApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PSNApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PSNApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new PSN ApplicationConfiguration
  /application/{applicationNameOrId}/configuration/psn/{applicationConfigurationNameOrId}:
    delete:
      description: Deletes an existing PSN Application profile if it is known to the
        server.
      operationId: deletePSNApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a PSN ApplicationConfiguration
    get:
      description: Gets a single PSN application based on unique name or ID.
      operationId: getPSNApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PSNApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a PSN Application Configuration
    put:
      description: Updates an existing PSN Application profile if it is known to the
        server.
      operationId: updatePSNApplicationConfiguration
      parameters:
      - explode: false
        in: path
        name: applicationNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: applicationConfigurationNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PSNApplicationConfiguration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PSNApplicationConfiguration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a PSN ApplicationConfiguration
  /auth_scheme/custom:
    get:
      description: Requires SUPERUSER access. Gets a pagination of Auth Schemes for
        the given query.
      operationId: getAuthSchemes
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationAuthScheme"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Lists all auth schemes in the system
    post:
      description: "Creates a new Auth Scheme, from the data in the given auth scheme\
        \ request"
      operationId: createAuthScheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuthSchemeRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAuthSchemeResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Auth Scheme
  /auth_scheme/custom/{authSchemeId}:
    delete:
      description: Deletes an Auth Scheme with the specified id.
      operationId: deleteAuthScheme
      parameters:
      - explode: false
        in: path
        name: authSchemeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes an Auth Scheme
    get:
      description: Gets a specific Auth Scheme by the authSchemeId.
      operationId: getAuthScheme
      parameters:
      - explode: false
        in: path
        name: authSchemeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthScheme"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific Auth Scheme
    put:
      description: Updates an Auth Scheme with the specified data in the auth scheme
        request.
      operationId: updateAuthScheme
      parameters:
      - explode: false
        in: path
        name: authSchemeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAuthSchemeRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAuthSchemeResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an Auth Scheme
  /auth/oauth2:
    post:
      description: "Begins a session by accepting a session request with parameters\
        \ matching the specified OAuth2 Scheme. Upon successful validation against\
        \ the scheme provided in the path, this will return a Session which can be\
        \ used for authentication. If there is no User associated with the supplied\
        \ credentials, this will implicitly create a new account and will include\
        \ that account information in the response. If there is an account, or this\
        \ method receives an existing session key, this will link to the existing\
        \ scheme if the account was not previously linked."
      operationId: createOAuth2Session
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuth2SessionRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCreation"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Session using OAuth2
  /auth_scheme/oauth2:
    get:
      description: Requires SUPERUSER access. Gets a pagination of Auth Schemes for
        the given query.
      operationId: getAuthSchemes_1
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationOAuth2AuthScheme"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Lists all auth schemes in the system
    post:
      description: "Creates a new Auth Scheme, from the data in the given auth scheme\
        \ request"
      operationId: createAuthScheme_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateOAuth2AuthSchemeRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrUpdateOAuth2AuthSchemeResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Auth Scheme
  /auth_scheme/oauth2/{oAuth2AuthSchemeId}:
    delete:
      description: Deletes an Auth Scheme with the specified id.
      operationId: deleteAuthScheme_1
      parameters:
      - explode: false
        in: path
        name: oAuth2AuthSchemeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes an Auth Scheme
    get:
      description: Gets a specific Auth Scheme by the oAuth2AuthSchemeId.
      operationId: getAuthScheme_1
      parameters:
      - explode: false
        in: path
        name: oAuth2AuthSchemeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2AuthScheme"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific Auth Scheme
    put:
      description: Updates an Auth Scheme with the specified data in the auth scheme
        request.
      operationId: updateAuthScheme_1
      parameters:
      - explode: false
        in: path
        name: oAuth2AuthSchemeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateOAuth2AuthSchemeRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrUpdateOAuth2AuthSchemeResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an Auth Scheme
  /auth/oidc:
    post:
      description: "Begins a session by accepting a JWT. Upon successful validation\
        \ against the scheme provided in the path, this will return a Session which\
        \ can be used for authentication. If there is no User associated with the\
        \ supplied credentials, this will implicitly create a new account and will\
        \ include that account information in the response. If there is an account,\
        \ or this method receives an existing session key, this will link to the existing\
        \ scheme if the account was not previously linked."
      operationId: createOidcSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OidcSessionRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCreation"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Session using OIDC
  /auth_scheme/oidc:
    get:
      description: Requires SUPERUSER access. Gets a pagination of Auth Schemes for
        the given query.
      operationId: getAuthSchemes_2
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationOidcAuthScheme"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Lists all auth schemes in the system
    post:
      description: "Creates a new Auth Scheme, from the data in the given auth scheme\
        \ request"
      operationId: createAuthScheme_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateOidcAuthSchemeRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrUpdateOidcAuthSchemeResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Auth Scheme
  /auth_scheme/oidc/{oidcAuthSchemeId}:
    delete:
      description: Deletes an Auth Scheme with the specified id.
      operationId: deleteAuthScheme_2
      parameters:
      - explode: false
        in: path
        name: oidcAuthSchemeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes an Auth Scheme
    get:
      description: Gets a specific Auth Scheme by the oidcAuthSchemeId.
      operationId: getAuthScheme_2
      parameters:
      - explode: false
        in: path
        name: oidcAuthSchemeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcAuthScheme"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific Auth Scheme
    put:
      description: Updates an Auth Scheme with the specified data in the auth scheme
        request.
      operationId: updateAuthScheme_2
      parameters:
      - explode: false
        in: path
        name: oidcAuthSchemeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateOidcAuthSchemeRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrUpdateOidcAuthSchemeResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an Auth Scheme
  /blockchain/omni/smart_contract:
    get:
      description: Gets a pagination of  SmartContracts.
      operationId: getSmartContracts
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: api
        required: false
        schema:
          enum:
          - NEO
          - ETHEREUM
          - SOLANA
          - FLOW
          - NEAR
          type: string
        style: form
      - explode: true
        in: query
        name: network
        required: false
        schema:
          items:
            enum:
            - NEO
            - NEO_TEST
            - ETHEREUM
            - ETHEREUM_TEST
            - BSC
            - BSC_TEST
            - POLYGON
            - POLYGON_TEST
            - SOLANA
            - SOLANA_TEST
            - FLOW
            - FLOW_TEST
            - NEAR
            - NEAR_TEST
            type: string
          type: array
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationSmartContract"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets  contracts.
    post:
      description: "Patches a  Smart Contract entry, associated with the specified\
        \ deployed script hash."
      operationId: createSmartContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSmartContractRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmartContract"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Patches a  Smart Contract
  /blockchain/omni/smart_contract/{contractId}:
    delete:
      description: Deletes a  Smart Contract with the specified contractId.
      operationId: deleteContract
      parameters:
      - explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a  Smart Contract
    get:
      description: Gets a specific  Smart Contract by contractId.
      operationId: getSmartContract
      parameters:
      - explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmartContract"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific  Smart Contract
    put:
      description: "Patches a  Smart Contract entry, associated with the specified\
        \ deployed script hash."
      operationId: updateSmartContract
      parameters:
      - explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSmartContractRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmartContract"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Patches a  Smart Contract
  /blockchain/omni/vault:
    get:
      description: Gets a pagination of  Wallets. Optionally a user Id can be specified
        to filter for a given user.
      operationId: getVaults
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationVault"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets  vaults. Optionally filtered for a specific user
    post:
      description: "Creates a new  Vault, associated with the given user."
      operationId: createVault
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVaultRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vault"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new  Vault
  /blockchain/omni/vault/{vaultId}:
    delete:
      description: Deletes a  Vault with the specified id.
      operationId: deleteVault
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a  Vault
    get:
      description: Gets a specific  Vault by Id.
      operationId: getVault
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vault"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific  Vault
    put:
      description: Updates a  Vault with the specified name or id.
      operationId: updateVault
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateVaultRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vault"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a  Vault
  /blockchain/omni/vault/{vaultId}/wallet:
    get:
      description: Gets a pagination of  Wallets. Optionally a user Id can be specified
        to filter for a given user.
      operationId: getWallets
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: api
        required: false
        schema:
          enum:
          - NEO
          - ETHEREUM
          - SOLANA
          - FLOW
          - NEAR
          type: string
        style: form
      - explode: true
        in: query
        name: network
        required: false
        schema:
          items:
            enum:
            - NEO
            - NEO_TEST
            - ETHEREUM
            - ETHEREUM_TEST
            - BSC
            - BSC_TEST
            - POLYGON
            - POLYGON_TEST
            - SOLANA
            - SOLANA_TEST
            - FLOW
            - FLOW_TEST
            - NEAR
            - NEAR_TEST
            type: string
          type: array
        style: form
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationWallet"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets  wallets. Optionally filtered for a specific user
    post:
      description: "Creates a new  Wallet, associated with the given user."
      operationId: createWallet
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWalletRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new  Wallet
  /blockchain/omni/vault/{vaultId}/wallet/{walletId}:
    delete:
      description: Deletes a  Wallet with the specified id.
      operationId: deleteWallet
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a  Wallet
    get:
      description: Gets a specific  Wallet by Id.
      operationId: getWallet
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific  Wallet
    put:
      description: Updates a  Wallet with the specified name or id.
      operationId: updateWallet
      parameters:
      - explode: false
        in: path
        name: vaultId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWalletRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a  Wallet
  /blockchain/omni/wallet/{walletId}:
    get:
      description: Gets a specific  Wallet by Id.
      operationId: getWallet_1
      parameters:
      - explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific  Wallet
  /deployment/{applicationId}:
    get:
      operationId: getDeployments
      parameters:
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationDeployment"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      operationId: createNewDeployment
      parameters:
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeploymentRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /deployment/{applicationId}/{deploymentId}:
    delete:
      operationId: deleteDeployment
      parameters:
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      operationId: getDeployment
      parameters:
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /deployment/{applicationId}/current:
    get:
      operationId: getCurrentDeployment
      parameters:
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /deployment/{applicationId}/{version}:
    put:
      operationId: updateDeployment
      parameters:
      - explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeploymentRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deployment"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /codegen:
    post:
      description: Generates API code for use on the client. Will generate Elements
        core if no application is specified in the request body.
      operationId: generateCode
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CodegenRequest"
      responses:
        default:
          content:
            application/octet-stream: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Generate Client API Code
  /followee/{profileId}:
    get:
      description: Searches all followers in the system and returning the metadata
        for all matches against the given profile id.
      operationId: getFollowers
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationProfile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Followers
  /follower/{profileId}:
    get:
      description: Searches all followers in the system and returning the metadata
        for all matches against the given profile id.
      operationId: getFollowers_1
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationProfile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Followers
    post:
      description: "Supplying the follower object, this will store the information\
        \ supplied in the body of the request."
      operationId: createFollower
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFollowerRequest"
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Follower relationship between two profiles.
  /follower/{profileId}/{profileToUnfollowId}:
    delete:
      operationId: deleteFollower
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: profileToUnfollowId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Follower relationship
  /follower/{profileId}/{followedId}:
    get:
      operationId: getFollower
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: followedId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific profile using the ID of the profile and followed id.
  /friend/{friendId}:
    delete:
      description: "Once a friend is deleted, re-creating a friend will set the friendship\
        \ status to outgoing."
      operationId: deleteFriendRegistration
      parameters:
      - explode: false
        in: path
        name: friendId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Friend
    get:
      description: Gets a specific friend using the ID of the friend.
      operationId: getFriend
      parameters:
      - explode: false
        in: path
        name: friendId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Specific Friend
  /friend:
    get:
      description: Searches all friends in the system and returning the metadata for
        all matches against the given search filter.
      operationId: getFriends
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationFriend"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Friends
  /item:
    get:
      description: "Searches all items and returns all matching items, filtered by\
        \ the passed in search parameters.  If multiple tags are specified, then all\
        \ items that contain at least one of the passed in tags is returned."
      operationId: getItems
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: category
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves all Items
    post:
      description: "Supplying an item object, this will create a new item with a newly\
        \ assigned unique id.  The Item representation returned in the response body\
        \ is a representation of the Item as persisted with a unique identifier signed\
        \ and with its fields properly normalized.  The supplied item object submitted\
        \ with the request must have a name property that is unique across all items."
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new digital Item
  /item/{identifier}:
    delete:
      description: Delete the item as identified by the given item name/id
      operationId: deleteSimpleInventoryItem
      parameters:
      - explode: false
        in: path
        name: identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete the item as identified by the given item name/id
    get:
      description: Looks up an item by the passed in identifier
      operationId: getItemByIdentifier
      parameters:
      - explode: false
        in: path
        name: identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves a single Item by id or by name
    put:
      description: "Supplying an item, this will update the Item identified by the\
        \ identifier in the path with contents from the passed in request body. "
      operationId: updateItem
      parameters:
      - explode: false
        in: path
        name: identifier
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a single Item
  /google/purchase:
    post:
      operationId: uploadGooglePlayIapPurchase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGooglePlayIapReceipt"
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RewardIssuance"
                type: array
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: "Upload Google Play IAP Receipt data (package name, product id and\
        \ Google Play-issued purchase token). Returns a list of RewardIssuances, some\
        \ or all of which may be already redeemed."
  /index/build:
    post:
      operationId: buildIndexes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildIndexRequest"
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Builds all indexes.
  /index/plan:
    get:
      operationId: getPlans
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationIndexPlanObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets all index plans.
  /inventory/advanced/{inventoryItemId}:
    delete:
      description: Delete the inventory item as identified by the given item name/id
      operationId: deleteAdvancedInventoryItem
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete the inventory item as identified by the given item name/id
    get:
      description: Gets the first (primary) inventory item for the specified item
      operationId: getAdvancedInventoryItem
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets inventory item for the specified item
    patch:
      description: Adjust the quantity of the first (primary) inventory item for the
        specified item.  This implicitly will create the InventoryItem if it does
        not exist.  The inventory item value
      operationId: adjustAdvancedInventoryItemQuantity
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdvancedInventoryItemQuantityAdjustment"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Adjust the quantity of the inventory item for the specified item.
    put:
      description: Updates an inventory item for the specified item
      operationId: updateSimpleInventoryItem
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInventoryItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an inventory item for the specified item
  /inventory/advanced:
    get:
      description: Searches all inventory items in the system and returns the metadata
        for all matches against the given search filter.
      operationId: getAdvancedInventoryItems
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationInventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search inventory items
    post:
      description: Create an inventory item for the specified item
      operationId: createAdvancedInventoryItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdvancedInventoryItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create an inventory item for the specified item
  /inventory/distinct:
    get:
      description: Searches all inventory items in the system and returns the metadata
        for all matches against the given search filter.
      operationId: getDistinctInventoryItems
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: profileId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationDistinctInventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search inventory items
    post:
      description: Create an inventory item for the specified item
      operationId: createDistinctInventoryItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDistinctInventoryItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DistinctInventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create an inventory item for the specified item
  /inventory/distinct/{distinctInventoryItemId}:
    delete:
      description: Delete the inventory item as identified by the given item name/id
      operationId: deleteDistinctInventoryItem
      parameters:
      - explode: false
        in: path
        name: distinctInventoryItemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete the inventory item as identified by the given item name/id
    put:
      description: Updates an inventory item for the specified item
      operationId: updateDistinctInventoryItem
      parameters:
      - explode: false
        in: path
        name: distinctInventoryItemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDistinctInventoryItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DistinctInventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an inventory item for the specified item
  /inventory/distinct/{inventoryItemId}:
    get:
      description: Gets the first (primary) inventory item for the specified item
      operationId: getDistinctInventoryItem
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DistinctInventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets inventory item for the specified item
  /inventory/simple/{inventoryItemId}:
    delete:
      description: Delete the inventory item as identified by the given item name/id
      operationId: deleteSimpleInventoryItem_1
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Delete the inventory item as identified by the given item name/id
    get:
      description: Gets the first (primary) inventory item for the specified item
      operationId: getSimpleInventoryItem
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets inventory item for the specified item
    patch:
      description: Adjust the quantity of the first (primary) inventory item for the
        specified item.  This implicitly will create the InventoryItem if it does
        not exist.  The inventory item value
      operationId: adjustSimpleInventoryItemQuantity
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleInventoryItemQuantityAdjustment"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Adjust the quantity of the inventory item for the specified item.
    put:
      description: Updates an inventory item for the specified item
      operationId: updateSimpleInventoryItem_1
      parameters:
      - explode: false
        in: path
        name: inventoryItemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInventoryItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an inventory item for the specified item
  /inventory/simple:
    get:
      description: Searches all inventory items in the system and returns the metadata
        for all matches against the given search filter.
      operationId: getSimpleInventoryItems
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationInventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search inventory items
    post:
      description: Create an inventory item for the specified item
      operationId: createSimpleInventoryItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSimpleInventoryItemRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Create an inventory item for the specified item
  /invite:
    post:
      description: Both phones from request and from DB are normalized and compared.
      operationId: getMatchedUserProfilesWithPhoneNumbers
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteViaPhonesRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteViaPhonesResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Match normalized phone numbers with requested list
  /large_object_mp:
    post:
      operationId: createLargeObject
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/createLargeObject_request"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a LargeObject with content
  /large_object:
    get:
      operationId: getLargeObjects
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationLargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get a LargeObject
    post:
      operationId: createLargeObject_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLargeObjectRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a LargeObject
  /large_object/from_url:
    post:
      operationId: createLargeObjectFromUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLargeObjectFromUrlRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a LargeObject from provided URL
  /large_object/{largeObjectId}:
    delete:
      operationId: deleteLargeObject
      parameters:
      - explode: false
        in: path
        name: largeObjectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a LargeObject
    get:
      operationId: getLargeObject
      parameters:
      - explode: false
        in: path
        name: largeObjectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get a LargeObject
    put:
      operationId: updateLargeObject
      parameters:
      - explode: false
        in: path
        name: largeObjectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLargeObjectRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a LargeObject
  /large_object/{largeObjectId}/content:
    put:
      operationId: updateLargeObjectContents
      parameters:
      - explode: false
        in: path
        name: largeObjectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateLargeObjectContents_request"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LargeObject"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a LargeObject content
  /leaderboard:
    get:
      description: Performs a full-text search of all leaderboards known to the server.  As
        with other full-text endpoints this allows for pagination and offset.
      operationId: getLeaderboards
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationLeaderboard"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Leaderboards
    post:
      description: Gets the metadata for a single leaderboard.  This may include more
        specific details not available in the bulk-get or fetch operation.
      operationId: createLeaderboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Leaderboard"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a New Leaderboard
  /leaderboard/{nameOrId}:
    delete:
      description: Deletes a specific leaderboard known to the server.
      operationId: deleteLeaderboard
      parameters:
      - explode: false
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes an Leaderboard
    get:
      description: Gets the metadata for a single leaderboard.  This may include more
        specific details not availble in the bulk-get or fetch operation.
      operationId: getLeaderboard
      parameters:
      - explode: false
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get an Leaderboard
    put:
      description: Performs an update to an existing leaderboard known to the server.
      operationId: updateLeaderboard
      parameters:
      - explode: false
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Leaderboard"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an Leaderboard
  /rank/global/{leaderboardNameOrId}:
    get:
      description: Gets the current Profile's rank among all players for the particular
        leaderboard.
      operationId: getGlobalRankTabular
      parameters:
      - description: Specifies the leaderboard name or ID.
        explode: false
        in: path
        name: leaderboardNameOrId
        required: true
        schema:
          type: string
        style: simple
      - description: "Specifies the epoch for the leaderboard. If not provided, the\
          \ current epoch will be used by default for epochal leaderboards. This value\
          \ will be ignored for all-time leaderboards. Set this value to 0 to explicitly\
          \ reference the current epoch (when applicable)."
        explode: true
        in: query
        name: leaderboardEpoch
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        default:
          content:
            text/csv:
              schema:
                $ref: "#/components/schemas/TabulationRankRow"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets Rank Among all Players
  /rank/friends/{leaderboardNameOrId}:
    get:
      description: Gets the current Profile's rank among friends for the particular
        leaderboard.
      operationId: getRankAmongFriends
      parameters:
      - description: May be negative to place the requested player in the middle of
          the page.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The number of results to return in the page.
        explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Indicates whether or not to fetch results in a relative fashion.
        explode: true
        in: query
        name: relative
        required: false
        schema:
          type: boolean
        style: form
      - description: "Specifies the epoch for the leaderboard. If no value is provided,\
          \ the current epoch will befetched."
        explode: true
        in: query
        name: leaderboardEpoch
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Specifies the leaderboard name or ID.
        explode: false
        in: path
        name: leaderboardNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationRank"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets Rank among Friends
  /rank/mutual_followers/{leaderboardNameOrId}:
    get:
      description: Gets the current Profile's rank among mutual followers for the
        particular leaderboard.
      operationId: getRankAmongMutualFollowers
      parameters:
      - description: May be negative to place the requested player in the middle of
          the page.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The number of results to return in the page.
        explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Indicates whether or not to fetch results in a relative fashion.
        explode: true
        in: query
        name: relative
        required: false
        schema:
          type: boolean
        style: form
      - description: "Specifies the epoch for the leaderboard. If no value is provided,\
          \ the current epoch will befetched."
        explode: true
        in: query
        name: leaderboardEpoch
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Specifies the leaderboard name or ID.
        explode: false
        in: path
        name: leaderboardNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationRank"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets Rank among Mutual Followers
  /score/{leaderboardNameOrId}:
    post:
      description: "Posts a single score for the currently logged-in profile. Conceptually,\
        \ this is creationg a new resource, however the server may opt to overwrite\
        \ the existing identifier if it sees fit."
      operationId: createScore
      parameters:
      - description: The name or id of the leaderboard.
        explode: false
        in: path
        name: leaderboardNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Score"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a New Score
  /match:
    get:
      description: "Lists all matches available.  Under most circumstances, this will\
        \ requires that a profile be made available to the request.  The server may\
        \ choose to return an error if no suitable profile can be determined."
      operationId: getMatches
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationMatch"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: List Matches
    post:
      description: "This method accepts an instance of Match, effectively requesting\
        \ that the server find a suitable opponent for a game.  As other suitable\
        \ players create matches the created match object may be updated as a suitable\
        \ opponent is found.  The client must poll matches for updates and react accordingly."
      operationId: createMatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Match"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Match
  /match/{matchId}:
    delete:
      description: "Deletes and permanently removes the Match fromt he server.  This\
        \ effectively will cancel any pending request for a match.  If a game is currently\
        \ being played agaist the match, the server may reject the request to delete\
        \ the match until the game concludes."
      operationId: deleteMatch
      parameters:
      - explode: false
        in: path
        name: matchId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Match
    get:
      description: "Gets a specific match given the match's unique ID.  Additionally,\
        \ it is possible to instruct the API to wait for a period of time before sending\
        \ the response.  The request will intentionally hang until the requested Match\
        \ with ID has been updated in the database."
      operationId: getMatch
      parameters:
      - explode: false
        in: path
        name: matchId
        required: true
        schema:
          type: string
        style: simple
      - description: "The maximum amount time the server will wait until a request\
          \ returns a default set of data for long polling.  Specifying a zero will\
          \ request that the server wait indefinitely until responding.  Though, the\
          \ server may enforce a practical upper limit on the amount of time it takes\
          \ to return.  Omitting this header will prompt the server to treat the request\
          \ as a normal request."
        explode: false
        in: header
        name: SocialEngine-LongPoll-Timeout
        required: false
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Specific Match
  /multi_match:
    delete:
      description: "Deletes and permanently removes all MultiMatches from he server.\
        \  This effectively will cancel any pending request for a match.  If a game\
        \ is currently being played against the match, the server may reject the request\
        \ to delete the match until the game concludes."
      operationId: deleteAllMatches
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a MultiMatch
    get:
      description: "Lists all matches available.  Under most circumstances, this will\
        \ requires that a profile be made available to the request.  The server may\
        \ choose to return an error if no suitable profile can be determined."
      operationId: getMatches_1
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationMultiMatch"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: List MultiMatches
    post:
      description: "This method accepts an instance of MultiMatch and creates a new\
        \ DB entry for it. Though it is generally recommended to create a new MultiMatch\
        \ via matchmaking code in an Element, it can be created via REST for the purposes\
        \ of testing or custom workflows."
      operationId: createMatch_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiMatch"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiMatch"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a MultiMatch
  /multi_match/{matchId}:
    delete:
      description: "Deletes and permanently removes the MultiMatch from he server.\
        \  This effectively will cancel any pending request for a match.  If a game\
        \ is currently being played against the match, the server may reject the request\
        \ to delete the match until the game concludes."
      operationId: deleteMatch_1
      parameters:
      - explode: false
        in: path
        name: matchId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a MultiMatch
    get:
      description: "Gets a specific match given the match's unique ID.  Additionally,\
        \ it is possible to instruct the API to wait for a period of time before sending\
        \ the response.  The request will intentionally hang until the requested MultiMatch\
        \ with ID has been updated in the database."
      operationId: getMatch_1
      parameters:
      - explode: false
        in: path
        name: matchId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiMatch"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Specific MultiMatch
    put:
      description: "This method accepts an instance of MultiMatch and updates the\
        \ DB entry for it that matches the matchId. Though it is generally recommended\
        \ to update a MultiMatch via matchmaking code in an Element, it can be updated\
        \ via REST for the purposes of testing or custom workflows."
      operationId: updateMatch
      parameters:
      - explode: false
        in: path
        name: matchId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiMatch"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiMatch"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a MultiMatch
  /metadata:
    get:
      description: Searches all metadata in the system and returning all matches against
        the given search filter.
      operationId: getMetadataObjects
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationMetadata"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Metadata
    post:
      description: Creates a new Metadata object with the provided details.
      operationId: createMetadata
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CreateMetadataRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Metadata object
  /metadata/{id}:
    delete:
      description: Deletes a specific metadata object by name or id.
      operationId: deleteMetadata
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a specific Metadata object
    get:
      description: Gets a specific metadata object by name or id.
      operationId: getMetadataObject
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific Metadata object
    put:
      description: Updates a specific metadata object by name or id.
      operationId: updateMetadata
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/UpdateMetadataRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a specific Metadata object
  /mission:
    get:
      description: "Searches all missions in the system and returning a number of\
        \ matches against the given search filter, delimited by the offset and count."
      operationId: getMissions
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationMission"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Missions
    post:
      description: "Supplying a mission object, this will create a new mission with\
        \ a newly assigned unique id.  The Mission representation returned in the\
        \ response body is a representation of the Mission as persisted with a unique\
        \ identifier assigned and with its fields properly normalized.  The supplied\
        \ mission object submitted with the request must have a name property that\
        \ is unique across all items."
      operationId: createMission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mission"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mission"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new mission
  /mission/{missionNameOrId}:
    delete:
      description: Deletes a mission by the passed in identifier
      operationId: deleteMission
      parameters:
      - explode: false
        in: path
        name: missionNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes the Mission identified by id or by name
    get:
      description: Looks up a mission by the passed in identifier
      operationId: getMissionByNameOrId
      parameters:
      - explode: false
        in: path
        name: missionNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mission"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves a single Mission by id or by name
    put:
      description: "Supplying a mission, this will update the Mission identified by\
        \ the name or ID in the path with contents from the passed in request body. "
      operationId: updateMission
      parameters:
      - explode: false
        in: path
        name: missionNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mission"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mission"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an entire single Mission
  /progress:
    get:
      description: Gets the current Profile's rank among all players for the particular
        leaderboard.
      operationId: getProgressTabular
      responses:
        default:
          content:
            text/csv:
              schema:
                $ref: "#/components/schemas/TabulationProgressRow"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets Rank Among all Players
    post:
      description: "Supplying a progress object, this will create a new progress with\
        \ a newly assigned unique id.  The Progress representation returned in the\
        \ response body is a representation of the Progress as persisted with a unique\
        \ identifier assigned and with its fields properly normalized."
      operationId: createProgress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Progress"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Progress"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new progress
  /progress/progress/{progressId}:
    delete:
      description: Deletes a progress by the passed in identifier
      operationId: deleteProgress
      parameters:
      - explode: false
        in: path
        name: progressId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes the Progress identified by id
  /progress/{progressId}:
    get:
      description: Looks up a progress by the passed in identifier
      operationId: getProgressByNameOrId
      parameters:
      - explode: false
        in: path
        name: progressId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Progress"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves a single Progress by id
    put:
      description: "Supplying a progress, this will update the Progress identified\
        \ by the ID in the path with contents from the passed in request body. "
      operationId: updateProgress
      parameters:
      - explode: false
        in: path
        name: progressId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Progress"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Progress"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a single Progress
  /reward_issuance/{rewardIssuanceId}:
    get:
      operationId: getRewardIssuance
      parameters:
      - explode: false
        in: path
        name: rewardIssuanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardIssuance"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves a single RewardIssuance by id.
  /reward_issuance:
    get:
      operationId: getRewardIssuances
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: states
        required: false
        schema:
          items:
            enum:
            - ISSUED
            - REDEEMED
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationRewardIssuance"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: "Retrieves the current user's reward issuances, optionally filtered\
        \ by the given state."
  /reward_issuance/{rewardIssuanceId}/redeem:
    put:
      operationId: redeemRewardIssuance
      parameters:
      - explode: false
        in: path
        name: rewardIssuanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardIssuanceRedemptionResult"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Redeems the RewardIssuance.
  /reward_issuance/redeem:
    put:
      operationId: redeemRewardIssuances
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RewardIssuanceRedemptionResult"
                type: array
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Redeems the given list of RewardIssuances.
  /schedule/{scheduleNameOrId}/event:
    get:
      description: "Searches all schedules in the system and returning a number of\
        \ matches against the given search filter, delimited by the offset and count."
      operationId: getScheduleEvents
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationScheduleEvent"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search ScheduleEvents
    post:
      description: "Supplying a schedule object, this will create a new schedule with\
        \ a newly assigned unique id.  The ScheduleEvent representation returned in\
        \ the response body is a representation of the ScheduleEvent as persisted\
        \ with a unique identifier assigned and with its fields properly normalized.\
        \  The supplied schedule object submitted with the request must have a name\
        \ property that is unique across all items."
      operationId: createScheduleEvent
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScheduleEventRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleEvent"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new schedule
  /schedule/{scheduleNameOrId}/event/{scheduleEventId}:
    delete:
      description: Deletes a schedule by the passed in identifier
      operationId: deleteScheduleEvent
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scheduleEventId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes the ScheduleEvent identified by id or by name
    get:
      description: Looks up a schedule by the passed in identifier
      operationId: getScheduleEventByNameOrId
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scheduleEventId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleEvent"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves a single ScheduleEvent by id or by name
    put:
      description: "Supplying a schedule, this will update the ScheduleEvent identified\
        \ by the name or ID in the path with contents from the passed in request body. "
      operationId: updateScheduleEvent
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scheduleEventId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScheduleEventRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleEvent"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an entire single ScheduleEvent
  /schedule/{scheduleNameOrId}/progress:
    get:
      description: Fetches all current assignments to the currently logged-in profile.
      operationId: getScheduleProgresses
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationProgress"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets all Progresses assigned via this schedule
  /schedule:
    get:
      description: "Searches all schedules in the system and returning a number of\
        \ matches against the given search filter, delimited by the offset and count."
      operationId: getSchedules
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationSchedule"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Schedules
    post:
      description: "Supplying a schedule object, this will create a new schedule with\
        \ a newly assigned unique id.  The Schedule representation returned in the\
        \ response body is a representation of the Schedule as persisted with a unique\
        \ identifier assigned and with its fields properly normalized.  The supplied\
        \ schedule object submitted with the request must have a name property that\
        \ is unique across all items."
      operationId: createSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScheduleRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new schedule
  /schedule/{scheduleNameOrId}:
    delete:
      description: Deletes a schedule by the passed in identifier
      operationId: deleteSchedule
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes the Schedule identified by id or by name
    get:
      description: Looks up a schedule by the passed in identifier
      operationId: getScheduleByNameOrId
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Retrieves a single Schedule by id or by name
    put:
      description: "Supplying a schedule, this will update the Schedule identified\
        \ by the name or ID in the path with contents from the passed in request body. "
      operationId: updateSchedule
      parameters:
      - explode: false
        in: path
        name: scheduleNameOrId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScheduleRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates an entire single Schedule
  /notification/fcm:
    post:
      description: "Supplying FCM registration token, this will create a new token\
        \ based on the information supplied to the endpoint.  The response will contain\
        \ the token as it was written to the database.  Clients may subsequently update\
        \ the token string with new values as they are issued by Firebase."
      operationId: createFCMRegistration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FCMRegistration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FCMRegistration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates an FCM Registration Token
  /notification/fcm/{fcmRegistrationId}:
    delete:
      operationId: deleteFCMRegistration
      parameters:
      - explode: false
        in: path
        name: fcmRegistrationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      description: "Supplying FCM registration token, this will update the token string\
        \ with the supplied values.  Clients may update the same registration with\
        \ a different token issued with Firebase if they wish to simply retain the\
        \ association with the "
      operationId: updateRegistration
      parameters:
      - explode: false
        in: path
        name: fcmRegistrationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FCMRegistration"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FCMRegistration"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Update an FCM Registration Token
  /profile:
    get:
      description: "Searches all users in the system and returning the metadata for\
        \ all matches against the given search filter. Optionally provide `before`\
        \ and `after` params to specify a time range [`after`, `before`] for last-logged-in\
        \ profiles matching in that range (inclusive). If `before` is not specified\
        \ (or a negative number is provided) but `after` is valid, the query will\
        \ return all records successive to the given `after` timestamp. Similarly,\
        \ if `after` is not specified (or a negative number is provided) but `before`\
        \ is valid, the query will return all records preceding the given `before`\
        \ timestamp. Note that search and time range parameters currently cannot be\
        \ combined in the same query."
      operationId: getProfiles
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: before
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationProfile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Profiles
    post:
      description: "Supplying the create profile request, this will update the profile\
        \ with the new information supplied in the body of the request. This will\
        \ fire an event, dev.getelements.elements.service.profile.created, from the\
        \ event manifest."
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProfileRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Profile
  /profile/{profileId}:
    delete:
      description: "Deletes and permanently removes the Profile from the server. \
        \ The server maykeep some record around to preserve relationships and references,\
        \ but this profile will not be accessible again until it is recreated."
      operationId: deactivateProfile
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a Profile
    put:
      description: Supplying an update request will attempt to update the profile.  The
        call will return the profile as it was written to the database.
      operationId: updateProfile
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a Profile
  /profile/current:
    get:
      description: "This is a special endpoing which fetches the current Profile based\
        \ on current auth credentials.  This considers the currently loggged-in Dser\
        \ as well as the Application or Application Configuration against which the\
        \ User is operating.  This may not be availble, in which case the appopraite\
        \ error is rasied."
      operationId: getCurrentProfile
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets the current Profile
  /profile/{name}:
    get:
      description: Gets a specific profile by profile ID.
      operationId: getProfile
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Specific Profile
  /profile/{profileId}/image:
    put:
      operationId: updateProfileImage
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileImageRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a Profile image object
  /save_data:
    get:
      description: Gets all save data documents available to the user.
      operationId: getSaveDataDocuments
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: profileId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationSaveDataDocument"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Save Data Documents
    post:
      description: Gets a single save data document.
      operationId: createSaveDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSaveDataDocumentRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveDataDocument"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a save data document.
  /save_data/{saveDataDocumentId}:
    delete:
      operationId: deleteSaveDocument
      parameters:
      - explode: false
        in: path
        name: saveDataDocumentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a save data document
    put:
      description: Gets a single save data document.
      operationId: updateSaveDocument
      parameters:
      - explode: false
        in: path
        name: saveDataDocumentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSaveDataDocumentRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveDataDocument"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a save data document.
  /save_data/profile/{profileId}/{slot}:
    get:
      description: Gets a single save data document based on Profile ID and slot.
        This is a convenience method whichallows the client to fetch a save data based
        on slot an profile id.
      operationId: getProfileSaveDataDocumentBySlot
      parameters:
      - explode: false
        in: path
        name: profileId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: slot
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveDataDocument"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get save data document.
  /save_data/{id}:
    get:
      description: Gets a single save data document
      operationId: getSaveDataDocument
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveDataDocument"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get save data document.
  /save_data/user/{userId}/{slot}:
    get:
      description: Gets a single save data document based on UserID and slot. This
        is a convenience method whichallows the client to fetch a save data based
        on slot an user id.
      operationId: getUserSaveDataDocumentBySlot
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: slot
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveDataDocument"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get save data document.
  /metadata_spec:
    get:
      description: Gets a pagination of Metadata Specs for the given query.
      operationId: getMetadataSpecs
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationMetadataSpec"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Get Metadata Specs
    post:
      description: Creates a new Metadata Spec definition.
      operationId: createMetadataSpec
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMetadataSpecRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataSpec"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a new Metadata Spec definition
  /metadata_spec/{metadataSpecId}:
    delete:
      description: Deletes a MetadataSpec with the specified id.
      operationId: deleteMetadataSpec
      parameters:
      - explode: false
        in: path
        name: metadataSpecId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json: {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a MetadataSpec
    put:
      description: Updates a MetadataSpec with the specified id.
      operationId: updateMetadataSpec
      parameters:
      - explode: false
        in: path
        name: metadataSpecId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMetadataSpecRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataSpec"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a Metadata Spec
  /metadata_spec/{metadataSpecName}/editor.json:
    get:
      description: Gets a specific Metadata Editor Schema backed by the supplied MetadataSpec
        by name.
      operationId: getEditorSchema
      parameters:
      - explode: false
        in: path
        name: metadataSpecName
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditorSchema"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific Metadata Editor Schema
  /metadata_spec/{metadataSpecName}/schema.json:
    get:
      description: Gets a specific JSON Schema backed by the supplied MetadataSpec
        by name.
      operationId: getJsonSchema
      parameters:
      - explode: false
        in: path
        name: metadataSpecName
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific JSON Schema
  /metadata_spec/{metadataSpecNameOrId}:
    get:
      description: Gets a specific MetadataSpec by name or Id.
      operationId: getMetadataSpec
      parameters:
      - explode: false
        in: path
        name: metadataSpecNameOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataSpec"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a specific Metadata Spec
  /mock_session:
    post:
      description: Begins a session by accepting a mock session request.  The request
        must be made with an authenticated super-user.
      operationId: createMockSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MockSessionRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MockSessionCreation"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Mock Session
  /session/{sessionSecret}:
    delete:
      operationId: blacklistSession
      parameters:
      - explode: false
        in: path
        name: sessionSecret
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Destroys the Session
  /session:
    post:
      description: "Begins a session by accepting both the UserID and the Passoword.\
        \  Upon successful completion of this call, the user will be added to the\
        \ current HTTP session.  If the session expires, the user will have to reestablish\
        \ the session by supplying credentials again.  This is most useful for applications\
        \ delivered in a web page."
      operationId: createUsernamePasswordSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernamePasswordSessionRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCreation"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a Session
  /elements/application:
    get:
      operationId: getAllApplicationStatuses
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ApplicationStatus"
                type: array
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets the status of all applications.
  /health:
    get:
      description: "Performs the health check for the server. What this actually does\
        \ is deployment and implementation specific. However, any successful response\
        \ code should indicate that the service is capable of servicing requests.\
        \ Any unsuccessful error codes should indicate that the instance has internal\
        \ issues and should be taken offline."
      operationId: getServerHealth
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Performs the health check.
  /elements/system:
    get:
      operationId: getAllInstalledElements
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ElementMetadata"
                type: array
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets the status of all applications.
  /version:
    get:
      description: Returns information about the current server version.  This should
        always return theversion metadata.  This information is only known in packaged
        releases.
      operationId: getVersion
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Show Server Version Information
  /signup:
    post:
      description: "Supplying the user create request object, this will create a new\
        \ user."
      operationId: signUpUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Sign Up a User
  /user:
    get:
      description: Searches all users in the system and returning the metadata for
        all matches against the given search filter.
      operationId: getUsers
      parameters:
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationUser"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Search Users
    post:
      description: "Supplying the user object, this will update the user with the\
        \ new information supplied in the body of the request.  Optionally, the user's\
        \ password may be provided in the User object."
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResponse"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Creates a User
  /user/{name}:
    delete:
      description: "Deletes and permanently removes the user from the server.  The\
        \ server may keep some metadata as necessary to avoid data inconsistency.\
        \  However, the user has been deleted from the client standpoint and will\
        \ not be accessible through any of the existing APIs."
      operationId: deactivateUser
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            '*/*': {}
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Deletes a User
    get:
      description: "Gets a specific user by name, email, or unique user ID."
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets a Specific User
  /user/me:
    get:
      description: A special endpoint used to get the current user for the request.  The
        current user is typically associated with the session but may be derived any
        other way.  This is essentially an alias for using GET /user/myUserId
      operationId: getCurrentUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Gets the current User
  /user/{userId}:
    put:
      description: "Supplying the user object, this will update the user with the\
        \ new information supplied in the body of the request.  Optionally, the user's\
        \ password may be provided in the User object."
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a User
  /user/{userId}/password:
    put:
      description: "Supplying the UserUpdatePasswordRequest, this will attempt to\
        \ update the user's password only if they supply the correct existing password."
      operationId: updateUserPassword
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePasswordRequest"
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCreation"
          description: default response
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      summary: Updates a User's Password
components:
  schemas:
    Item:
      description: The Item to be issued upon redemption.
      example:
        metadata:
          key: "{}"
        publicVisible: true
        displayName: displayName
        name: name
        description: description
        id: id
        category: FUNGIBLE
        tags:
        - tags
        - tags
        metadataSpec:
          name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        id:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        displayName:
          type: string
        description:
          type: string
        category:
          enum:
          - FUNGIBLE
          - DISTINCT
          type: string
        metadataSpec:
          $ref: "#/components/schemas/MetadataSpec"
        metadata:
          additionalProperties:
            type: object
          type: object
        publicVisible:
          type: boolean
      required:
      - category
      - description
      - displayName
      - name
      type: object
    MetadataSpec:
      description: Represents a spec for metadata.
      example:
        name: name
        id: id
        type: STRING
        properties:
        - displayName: displayName
          defaultValue: "{}"
          name: name
          placeholder: placeholder
          type: STRING
          required: true
          properties:
          - null
          - null
        - displayName: displayName
          defaultValue: "{}"
          name: name
          placeholder: placeholder
          type: STRING
          required: true
          properties:
          - null
          - null
      properties:
        id:
          description: The unique ID of the schema itself.
          type: string
        name:
          description: The Name of the schema.
          type: string
        type:
          description: The type of the tab itself.
          enum:
          - STRING
          - NUMBER
          - BOOLEAN
          - ARRAY
          - ENUM
          - OBJECT
          - TAGS
          type: string
        properties:
          description: The tabs of the metadata spec.
          items:
            $ref: "#/components/schemas/MetadataSpecProperty"
          type: array
      required:
      - id
      - name
      - properties
      - type
      type: object
    MetadataSpecProperty:
      description: The updated list of properties.
      example:
        displayName: displayName
        defaultValue: "{}"
        name: name
        placeholder: placeholder
        type: STRING
        required: true
        properties:
        - null
        - null
      properties:
        name:
          description: The unique name of the field
          type: string
        displayName:
          description: The display name of the field
          type: string
        type:
          description: The field type
          enum:
          - STRING
          - NUMBER
          - BOOLEAN
          - ARRAY
          - ENUM
          - OBJECT
          - TAGS
          type: string
        required:
          description: True if the field is required.
          type: boolean
        placeholder:
          description: The placeholder description when displaying in the editor.
          type: string
        defaultValue:
          description: "The default description, null if left unspecified."
          type: object
        properties:
          items:
            $ref: "#/components/schemas/MetadataSpecProperty"
          type: array
      required:
      - displayName
      - name
      - type
      type: object
    RewardIssuance:
      description: Represents a Reward that has been issued but has not yet been claimed
        by the user.  The reward is assigned a unique ID to ensure that it may not
        have been applied more than once.
      example:
        item:
          metadata:
            key: "{}"
          publicVisible: true
          displayName: displayName
          name: name
          description: description
          id: id
          category: FUNGIBLE
          tags:
          - tags
          - tags
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        metadata:
          key: "{}"
        itemQuantity: 0
        context: context
        expirationTimestamp: 6
        id: id
        state: ISSUED
        source: source
        type: PERSISTENT
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        uuid: uuid
        tags:
        - tags
        - tags
      properties:
        id:
          description: The unique ID of the issuance.
          type: string
        user:
          $ref: "#/components/schemas/User"
        state:
          description: "The state of the reward. On creation, this is automatically\
            \ assigned to be ISSUED. If the current value of the state is REDEEMED,\
            \ then the state is no longer allowed to be updated. This valuemay not\
            \ be directly modified--the redeem DAO method should be used instead to\
            \ perform the redemption process."
          enum:
          - ISSUED
          - REDEEMED
          type: string
        item:
          $ref: "#/components/schemas/Item"
        itemQuantity:
          description: The amount of Items to be set/added to the InventoryItem upon
            redemption.
          format: int32
          type: integer
        context:
          description: "A generic String used to uniquely identify the RewardIssuance\
            \ issuance. If the RewardIssuance is created by the client, this value\
            \ must be specified to prevent erroneous duplicate issuances. E.g. if\
            \ the client successfully submits an issuance but fails to receive the\
            \ response, the client is expected to submit a new issuance with the same\
            \ context string. Similarly, the client application should have safeguards\
            \ in place in the event of a crash to prevent duplicate submissions: e.g.\
            \ ensuring that the context string is unchanged when performing multiple\
            \ issuances of the same RewardIssuance. If the RewardIssuance is generated\
            \ by the server, this will be defined automatically. The context cannot\
            \ be updated after creation. Note that an context defined via the API\
            \ should not begin with 'server.' as that is a protected namespace."
          type: string
        type:
          description: "Defines whether multiple issuances for the given user+reward+context\
            \ may occur. If the type is set to NON_PERSISTENT, at most one ISSUED\
            \ RewardIssuance may exist in the server at a time for a given user and\
            \ context. If the type is set to PERSISTENT, at most one ISSUED or REDEEMED\
            \ RewardIssuance may exist in the server for a given user and context,\
            \ i.e. once a PERSISTENT RewardIssuance has been submitted, a new one\
            \ may never be submitted and will be rejected by the server. Note that\
            \ this value cannot be updated. By default, this will be set to NON_PERSISTENT."
          enum:
          - PERSISTENT
          - NON_PERSISTENT
          type: string
        source:
          description: "Identifies the source of the issuance, e.g. 'Client', 'IAP',\
            \ 'Leaderboard'. This may be specified manually by the client if desired.\
            \ Note that this value cannot be updated."
          type: string
        metadata:
          additionalProperties:
            description: "Metadata for the issuance. May be optionally defined by\
              \ the client on creation. If the source is a server-side value, then\
              \ a predefined structure will always be followed that provides additional\
              \ information as to the source of the issuance (e.g. mission progress/step\
              \ information)."
            type: object
          description: "Metadata for the issuance. May be optionally defined by the\
            \ client on creation. If the source is a server-side value, then a predefined\
            \ structure will always be followed that provides additional information\
            \ as to the source of the issuance (e.g. mission progress/step information)."
          type: object
        tags:
          description: The tags used to categorize this Reward Issuance.
          items:
            description: The tags used to categorize this Reward Issuance.
            type: string
          type: array
        expirationTimestamp:
          description: "Optionally define when the issuance should expire. This value\
            \ may be updated to extend when the expiration occurs. When set, this\
            \ value must be greater than the current time on the server.Note that\
            \ the record may not actually be deleted for up to sixty seconds after\
            \ the time noted in thetimestamp."
          format: int64
          type: integer
        uuid:
          description: Internal unique identifier generated and assigned on creation.
          type: string
      required:
      - context
      - id
      - state
      - type
      - user
      type: object
    User:
      description: The User associated with this Profile.
      example:
        firstName: firstName
        lastName: lastName
        primaryPhoneNb: primaryPhoneNb
        level: UNPRIVILEGED
        name: name
        linkedAccounts:
        - linkedAccounts
        - linkedAccounts
        id: id
        email: email
      properties:
        id:
          description: The user's database assigned unique ID.
          type: string
        name:
          description: A unique name for the user.
          type: string
        firstName:
          description: The user's first name
          type: string
        lastName:
          description: The user's last name
          type: string
        email:
          description: The user's email.
          type: string
        primaryPhoneNb:
          description: The user's phone number.
          type: string
        level:
          description: The user's access level.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
        linkedAccounts:
          description: List of linked account or auth scheme names.
          items:
            description: List of linked account or auth scheme names.
            type: string
          type: array
          uniqueItems: true
      required:
      - id
      - level
      type: object
    CreateAppleIapReceipt:
      example:
        createAppleIapReceiptEnvironment: SANDBOX
        receiptData: receiptData
      properties:
        receiptData:
          description: The base64-encoded string of the raw IAP receipt.
          type: string
        createAppleIapReceiptEnvironment:
          enum:
          - SANDBOX
          - PRODUCTION
          type: string
      required:
      - receiptData
      type: object
    Application:
      example:
        httpDocumentationUiUrl: httpDocumentationUiUrl
        scriptRepoUrl: scriptRepoUrl
        name: name
        description: description
        httpDocumentationUrl: httpDocumentationUrl
        attributes:
          key: "{}"
        id: id
        applicationConfiguration: null
        gitBranch: gitBranch
        httpTunnelEndpointUrl: httpTunnelEndpointUrl
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        gitBranch:
          type: string
        scriptRepoUrl:
          type: string
        httpDocumentationUrl:
          type: string
        httpDocumentationUiUrl:
          type: string
        httpTunnelEndpointUrl:
          type: string
        attributes:
          additionalProperties:
            type: object
          type: object
        applicationConfiguration:
          $ref: "#/components/schemas/ApplicationConfiguration"
      required:
      - name
      type: object
    ApplicationConfiguration:
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        name: name
        description: description
        id: id
        type: type
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
      required:
      - description
      - id
      - name
      - parent
      - type
      type: object
    PaginationApplicationConfiguration:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - parent:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          name: name
          description: description
          id: id
          type: type
        - parent:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          name: name
          description: description
          id: id
          type: type
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/ApplicationConfiguration"
          type: array
      type: object
    CreateApplicationRequest:
      example:
        name: name
        description: description
        attributes:
          key: "{}"
      properties:
        name:
          type: string
        description:
          type: string
        attributes:
          additionalProperties:
            type: object
          type: object
      required:
      - name
      type: object
    PaginationApplication:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        - httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Application"
          type: array
      type: object
    UpdateApplicationRequest:
      example:
        name: name
        description: description
        attributes:
          key: "{}"
      properties:
        name:
          type: string
        description:
          type: string
        attributes:
          additionalProperties:
            type: object
          type: object
      required:
      - name
      type: object
    FacebookApplicationConfiguration:
      description: 'Houses the various parameters required which allow communication
        with the Faceook API.  The Facebook API will '
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        builtinApplicationPermissions:
        - builtinApplicationPermissions
        - builtinApplicationPermissions
        name: name
        description: description
        id: id
        type: type
        applicationId: applicationId
        applicationSecret: applicationSecret
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
        applicationId:
          description: The AppID as it appears in the Facebook Developer Console
          type: string
        applicationSecret:
          description: The App Secret as it appears in the Facebook Developer Console
          type: string
        builtinApplicationPermissions:
          description: The set of built-in permissions connected clients will need
            to request.
          items:
            description: The set of built-in permissions connected clients will need
              to request.
            type: string
          type: array
      required:
      - applicationId
      - applicationSecret
      - description
      - id
      - name
      - parent
      - type
      type: object
    FirebaseApplicationConfiguration:
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        name: name
        description: description
        id: id
        type: type
        serviceAccountCredentials: serviceAccountCredentials
        projectId: projectId
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
        projectId:
          description: The contents of the serviceAccountCredentials.json file.
          type: string
        serviceAccountCredentials:
          description: The contents of the serviceAccountCredentials.json file.
          type: string
      required:
      - description
      - id
      - name
      - parent
      - projectId
      - serviceAccountCredentials
      - type
      type: object
    GooglePlayApplicationConfiguration:
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        jsonKey:
          key: "{}"
        name: name
        description: description
        id: id
        type: type
        applicationId: applicationId
        productBundles:
        - productBundleRewards:
          - itemId: itemId
            quantity: 0
          - itemId: itemId
            quantity: 0
          metadata:
            key: "{}"
          productId: productId
          displayName: displayName
          display: true
          description: description
        - productBundleRewards:
          - itemId: itemId
            quantity: 0
          - itemId: itemId
            quantity: 0
          metadata:
            key: "{}"
          productId: productId
          displayName: displayName
          display: true
          description: description
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
        applicationId:
          type: string
        jsonKey:
          additionalProperties:
            type: object
          type: object
        productBundles:
          description: The list of product bundles that may be rewarded upon successful
            IAP transactions.
          items:
            $ref: "#/components/schemas/ProductBundle"
          type: array
      required:
      - description
      - id
      - name
      - parent
      - type
      type: object
    ProductBundle:
      example:
        productBundleRewards:
        - itemId: itemId
          quantity: 0
        - itemId: itemId
          quantity: 0
        metadata:
          key: "{}"
        productId: productId
        displayName: displayName
        display: true
        description: description
      properties:
        productId:
          description: "The platform-specific unique SKU/product identifier that,\
            \ when purchased, will result in the items in this product bundle to be\
            \ issued to the user."
          type: string
        displayName:
          description: The title of the product bundle to display to end users.
          type: string
        description:
          description: The description of the product bundle to display to end users.
          type: string
        productBundleRewards:
          description: The list of product bundle rewards that will be issued to the
            user upon purchase.
          items:
            $ref: "#/components/schemas/ProductBundleReward"
          type: array
        metadata:
          additionalProperties:
            description: Application-specific metadata.
            type: object
          description: Application-specific metadata.
          type: object
        display:
          description: Whether or not the frontend should display this product bundle
            to end users.
          type: boolean
      required:
      - display
      - productBundleRewards
      - productId
      type: object
    ProductBundleReward:
      description: The list of product bundle rewards that will be issued to the user
        upon purchase.
      example:
        itemId: itemId
        quantity: 0
      properties:
        itemId:
          description: The id of the item to be rewarded.
          type: string
        quantity:
          description: The quantity of the item to be rewarded.
          format: int32
          type: integer
      required:
      - itemId
      - quantity
      type: object
    IosApplicationConfiguration:
      description: Configuration for the iOS Application Configuration
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        name: name
        description: description
        id: id
        type: type
        applicationId: applicationId
        productBundles:
        - productBundleRewards:
          - itemId: itemId
            quantity: 0
          - itemId: itemId
            quantity: 0
          metadata:
            key: "{}"
          productId: productId
          displayName: displayName
          display: true
          description: description
        - productBundleRewards:
          - itemId: itemId
            quantity: 0
          - itemId: itemId
            quantity: 0
          metadata:
            key: "{}"
          productId: productId
          displayName: displayName
          display: true
          description: description
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
        applicationId:
          type: string
        productBundles:
          description: The list of product bundles that may be rewarded upon successful
            IAP transactions.
          items:
            $ref: "#/components/schemas/ProductBundle"
          type: array
      required:
      - applicationId
      - description
      - id
      - name
      - parent
      - type
      type: object
    CallbackDefinition:
      description: Defines a script method and a module to invoke.
      example:
        method: method
        service:
          serviceType: serviceType
          serviceName: serviceName
          elementName: elementName
      properties:
        method:
          description: Specifies the method to invoke.
          type: string
        service:
          $ref: "#/components/schemas/ElementServiceReference"
      required:
      - method
      - service
      type: object
    ElementServiceReference:
      description: Describes the matchmaker (dev.getelements.elements.sdk.dao.Matchmaker)
        to use for this configuration.
      example:
        serviceType: serviceType
        serviceName: serviceName
        elementName: elementName
      properties:
        elementName:
          description: The name of the Element to reference.
          type: string
        serviceType:
          description: Specifies the type of the service within the Element. May be
            null.
          type: string
        serviceName:
          description: Specifies the name of the service within the Element. May be
            null.
          type: string
      required:
      - elementName
      type: object
    MatchmakingApplicationConfiguration:
      description: This configures the matchmaking system for the application. This
        defines the queue name and the Matchmacker to use when finding players to
        match. Currently FIFO is builtin and is the default.
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        metadata:
          key: "{}"
        matchmaker:
          serviceType: serviceType
          serviceName: serviceName
          elementName: elementName
        success:
          method: method
          service:
            serviceType: serviceType
            serviceName: serviceName
            elementName: elementName
        name: name
        description: description
        timeoutSeconds: 1
        id: id
        maxProfiles: 0
        type: type
        lingerSeconds: 6
        metadataSpec:
          name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
        success:
          $ref: "#/components/schemas/CallbackDefinition"
        matchmaker:
          $ref: "#/components/schemas/ElementServiceReference"
        maxProfiles:
          description: 'The maximum number of profiles that can be matched in a single
            match. '
          format: int32
          type: integer
        lingerSeconds:
          description: The amount of time a match will linger after it is marked as
            expired.
          format: int32
          type: integer
        timeoutSeconds:
          description: The absolute timeout of the match. A match will be automatically
            deleted after this amount of time.
          format: int32
          type: integer
        metadata:
          additionalProperties:
            description: The metadata for this matchmaking configuration. This will
              be copied to the match when it is created.
            type: object
          description: The metadata for this matchmaking configuration. This will
            be copied to the match when it is created.
          type: object
        metadataSpec:
          $ref: "#/components/schemas/MetadataSpec"
      required:
      - description
      - id
      - name
      - parent
      - type
      type: object
    PSNApplicationConfiguration:
      example:
        parent:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        npIdentifier: npIdentifier
        name: name
        description: description
        clientSecret: clientSecret
        id: id
        type: type
      properties:
        id:
          description: The database assigned ID for the application configuration.
          type: string
        name:
          description: The application-configuration specific unique ID. Unique per
            application per category.
          type: string
        type:
          description: The fully-qualified Java type of ApplicationConfiguration.
          type: string
        description:
          type: string
        parent:
          $ref: "#/components/schemas/Application"
        npIdentifier:
          type: string
        clientSecret:
          type: string
      required:
      - clientSecret
      - description
      - id
      - name
      - npIdentifier
      - parent
      - type
      type: object
    AuthScheme:
      description: The full JSON response as described in AuthScheme
      example:
        allowedIssuers:
        - allowedIssuers
        - allowedIssuers
        audience: audience
        userLevel: UNPRIVILEGED
        id: id
        publicKey: publicKey
        algorithm: RSA_256
        tags:
        - tags
        - tags
      properties:
        id:
          description: The unique ID of the auth scheme.
          type: string
        audience:
          description: A unique name used to identify the scheme within the instance
            of Elements.
          type: string
        publicKey:
          description: A base-64 encoded string representing an x509 encoded public
            key.
          type: string
        algorithm:
          description: The digital signature matching the public key format.
          enum:
          - RSA_256
          - RSA_384
          - RSA_512
          type: string
        userLevel:
          description: The highest permitted user level this particular scheme will
            authorize.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
        tags:
          description: The tags used to tag this auth scheme.
          items:
            description: The tags used to tag this auth scheme.
            type: string
          type: array
        allowedIssuers:
          description: A list of issuers allowed to use this scheme.
          items:
            description: A list of issuers allowed to use this scheme.
            type: string
          type: array
      required:
      - algorithm
      - allowedIssuers
      - audience
      - id
      - publicKey
      - tags
      - userLevel
      type: object
    CreateAuthSchemeResponse:
      description: Represents a response from creating an Auth Scheme for an Application.
      example:
        privateKey: privateKey
        scheme:
          allowedIssuers:
          - allowedIssuers
          - allowedIssuers
          audience: audience
          userLevel: UNPRIVILEGED
          id: id
          publicKey: publicKey
          algorithm: RSA_256
          tags:
          - tags
          - tags
        publicKey: publicKey
      properties:
        scheme:
          $ref: "#/components/schemas/AuthScheme"
        publicKey:
          description: The Base64 public key that was either given or generated during
            creation. See https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/spec/X509EncodedKeySpec.html
            for details on the specifics of the format.
          type: string
        privateKey:
          description: The Base64 public key that was either given or generated during
            creation. See https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/spec/PKCS8EncodedKeySpec.html
            for details on the specifics of the format.
          type: string
      required:
      - publicKey
      - scheme
      type: object
    CreateAuthSchemeRequest:
      description: Represents a request to create an Auth Scheme for an Application.
      example:
        allowedIssuers:
        - allowedIssuers
        - allowedIssuers
        audience: audience
        userLevel: UNPRIVILEGED
        publicKey: publicKey
        algorithm: RSA_256
        tags:
        - tags
        - tags
      properties:
        audience:
          description: The JWT audience for the scheme. Must be unique.
          type: string
        publicKey:
          description: The Base64 public key that was either given or generated during
            creation. See https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/spec/X509EncodedKeySpec.html
            for details on the specifics of the format.
          type: string
        algorithm:
          enum:
          - RSA_256
          - RSA_384
          - RSA_512
          type: string
        userLevel:
          description: The highest permitted user level this particular scheme will
            authorize.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
        tags:
          description: A list of tags used to index the auth scheme.
          items:
            description: A list of tags used to index the auth scheme.
            type: string
          type: array
        allowedIssuers:
          description: The list of issuers allowed to use this scheme.
          items:
            description: The list of issuers allowed to use this scheme.
            type: string
          type: array
      required:
      - algorithm
      - allowedIssuers
      - audience
      - tags
      - userLevel
      type: object
    PaginationAuthScheme:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - allowedIssuers:
          - allowedIssuers
          - allowedIssuers
          audience: audience
          userLevel: UNPRIVILEGED
          id: id
          publicKey: publicKey
          algorithm: RSA_256
          tags:
          - tags
          - tags
        - allowedIssuers:
          - allowedIssuers
          - allowedIssuers
          audience: audience
          userLevel: UNPRIVILEGED
          id: id
          publicKey: publicKey
          algorithm: RSA_256
          tags:
          - tags
          - tags
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/AuthScheme"
          type: array
      type: object
    UpdateAuthSchemeResponse:
      description: Represents a response from updating an Auth Scheme for an Application.
      example:
        privateKey: privateKey
        scheme:
          allowedIssuers:
          - allowedIssuers
          - allowedIssuers
          audience: audience
          userLevel: UNPRIVILEGED
          id: id
          publicKey: publicKey
          algorithm: RSA_256
          tags:
          - tags
          - tags
        publicKey: publicKey
      properties:
        scheme:
          $ref: "#/components/schemas/AuthScheme"
        publicKey:
          description: The Base64 public key that was either given or generated during
            creation. See https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/spec/X509EncodedKeySpec.html
            for details on the specifics of the format.
          type: string
        privateKey:
          description: The Base64 public key that was either given or generated during
            creation. See https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/spec/PKCS8EncodedKeySpec.html
            for details on the specifics of the format.
          type: string
      required:
      - publicKey
      type: object
    UpdateAuthSchemeRequest:
      description: Represents a request to update an Auth Scheme for an Application.
      example:
        allowedIssuers:
        - allowedIssuers
        - allowedIssuers
        audience: audience
        userLevel: UNPRIVILEGED
        regenerate: true
        publicKey: publicKey
        algorithm: RSA_256
        tags:
        - tags
        - tags
      properties:
        audience:
          description: The JWT audience for the scheme. Must be unique.
          type: string
        regenerate:
          description: "If set to true, Elements will regenerate the key and pubKey\
            \ must be null or omitted"
          type: boolean
        publicKey:
          description: The Base64 public key that was either given or generated during
            creation. See https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/spec/X509EncodedKeySpec.html
            for details on the specifics of the format.
          type: string
        algorithm:
          description: The algorithm that Elements will use with the supplied key.
          enum:
          - RSA_256
          - RSA_384
          - RSA_512
          type: string
        userLevel:
          description: The highest permitted user level this particular scheme will
            authorize.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
        tags:
          description: The list of tags for tagging the auth scheme.
          items:
            description: The list of tags for tagging the auth scheme.
            type: string
          type: array
        allowedIssuers:
          description: The list of issuers allowed to use this scheme.
          items:
            description: The list of issuers allowed to use this scheme.
            type: string
          type: array
      required:
      - algorithm
      - allowedIssuers
      - audience
      - tags
      - userLevel
      type: object
    LargeObjectReference:
      description: Image object stored in EL large objects storage.
      example:
        id: id
        mimeType: mimeType
        state: EMPTY
        lastModified: 2000-01-23T04:56:07.000+00:00
        url: url
      properties:
        id:
          description: The unique ID of the LargeObject.
          type: string
        url:
          description: The URL where the binary contents of the LargeObject may be
            read.
          type: string
        mimeType:
          description: The MIME type of the LargeObject.
          type: string
        state:
          description: Current state of the LargeObject.
          enum:
          - EMPTY
          - UPLOADED
          type: string
        lastModified:
          description: Date of last modification
          format: date-time
          type: string
      type: object
    Profile:
      example:
        lastLogin: 0
        metadata:
          key: "{}"
        application:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        displayName: displayName
        imageUrl: imageUrl
        id: id
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        imageObject:
          id: id
          mimeType: mimeType
          state: EMPTY
          lastModified: 2000-01-23T04:56:07.000+00:00
          url: url
      properties:
        id:
          description: The unique ID of the profile itself.
          type: string
        user:
          $ref: "#/components/schemas/User"
        application:
          $ref: "#/components/schemas/Application"
        imageUrl:
          description: A URL to the image of the profile.  (ie the User's Avatar).
          type: string
        imageObject:
          $ref: "#/components/schemas/LargeObjectReference"
        displayName:
          description: A non-unique display name for this profile.
          type: string
        metadata:
          additionalProperties:
            description: An object containing arbitrary player metadata as key-value
              pairs.
            type: object
          description: An object containing arbitrary player metadata as key-value
            pairs.
          type: object
        lastLogin:
          description: The last time this profile has been logged in by the user.
          format: int64
          type: integer
      required:
      - application
      - displayName
      - id
      - user
      type: object
    Session:
      description: The Session object generated by the request.
      example:
        application:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        profile:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        expiry: 6
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
      properties:
        user:
          $ref: "#/components/schemas/User"
        profile:
          $ref: "#/components/schemas/Profile"
        application:
          $ref: "#/components/schemas/Application"
        expiry:
          format: int64
          type: integer
      required:
      - user
      type: object
    SessionCreation:
      example:
        session:
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          expiry: 6
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
        sessionSecret: sessionSecret
      properties:
        sessionSecret:
          description: The Session Secret to pass to subsequent requests through headers.
          type: string
        session:
          $ref: "#/components/schemas/Session"
      type: object
    OAuth2SessionRequest:
      example:
        requestHeaders:
          key: requestHeaders
        profileId: profileId
        requestParameters:
          key: requestParameters
        schemeId: schemeId
        profileSelector: profileSelector
      properties:
        schemeId:
          description: The OAuth2 scheme ID to use.
          type: string
        requestParameters:
          additionalProperties:
            description: The request parameters to be used in the token validation
              request. This should adhere to any params marked as fromClient in the
              auth scheme.
            type: string
          description: The request parameters to be used in the token validation request.
            This should adhere to any params marked as fromClient in the auth scheme.
          type: object
        requestHeaders:
          additionalProperties:
            description: The request headers to be used in the token validation request.
              This should adhere to any headers marked as fromClient in the auth scheme.
            type: string
          description: The request headers to be used in the token validation request.
            This should adhere to any headers marked as fromClient in the auth scheme.
          type: object
        profileId:
          description: The profile ID to assign to the session.
          type: string
        profileSelector:
          description: "A query string to select the profile to use. NOTE: This will\
            \ not be run if a profileId is specified."
          type: string
      required:
      - schemeId
      type: object
    CreateOrUpdateOAuth2AuthSchemeResponse:
      description: Represents a response from updating an Auth Scheme for an Application.
      example:
        scheme:
          headers:
          - fromClient: true
            value: value
            key: key
          - fromClient: true
            value: value
            key: key
          responseIdMapping: responseIdMapping
          name: name
          validationUrl: validationUrl
          id: id
          params:
          - fromClient: true
            value: value
            key: key
          - fromClient: true
            value: value
            key: key
      properties:
        scheme:
          $ref: "#/components/schemas/OAuth2AuthScheme"
      type: object
    OAuth2AuthScheme:
      description: The full JSON response as described in AuthScheme
      example:
        headers:
        - fromClient: true
          value: value
          key: key
        - fromClient: true
          value: value
          key: key
        responseIdMapping: responseIdMapping
        name: name
        validationUrl: validationUrl
        id: id
        params:
        - fromClient: true
          value: value
          key: key
        - fromClient: true
          value: value
          key: key
      properties:
        id:
          description: The unique ID of the auth scheme.
          type: string
        name:
          description: "A unique name used to identify the scheme within the instance\
            \ of Elements. If using the same OAuth2 provider (e.g. Steam), it is recommended\
            \ to suffix the name for each application when using multitenancy, e.g.\
            \ steam_game1, steam_game2, etc."
          type: string
        validationUrl:
          description: The URL to send the user token validation request to.
          type: string
        headers:
          description: The headers required for the validation request.
          items:
            $ref: "#/components/schemas/OAuth2RequestKeyValue"
          type: array
        params:
          description: The query parameters required for the validation request.
          items:
            $ref: "#/components/schemas/OAuth2RequestKeyValue"
          type: array
        responseIdMapping:
          description: Determines how to map the user id in the response. For example
            "response.params.steamid"
          type: string
      required:
      - id
      - name
      - validationUrl
      type: object
    OAuth2RequestKeyValue:
      description: The query parameters required for the validation request.
      example:
        fromClient: true
        value: value
        key: key
      properties:
        key:
          description: The key.
          type: string
        value:
          description: The value.
          type: string
        fromClient:
          description: "If this value should be received from the client, or predefined\
            \ and stored in the DB."
          type: boolean
      type: object
    CreateOrUpdateOAuth2AuthSchemeRequest:
      description: Represents a request to update an Auth Scheme for an Application.
      example:
        headers:
        - fromClient: true
          value: value
          key: key
        - fromClient: true
          value: value
          key: key
        responseIdMapping: responseIdMapping
        name: name
        validationUrl: validationUrl
        id: id
        params:
        - fromClient: true
          value: value
          key: key
        - fromClient: true
          value: value
          key: key
      properties:
        id:
          description: The unique ID of the auth scheme.
          type: string
        name:
          description: "A unique name used to identify the scheme within the instance\
            \ of Elements. If using the same OAuth2 provider (e.g. Steam), it is recommended\
            \ to suffix the name for each application when using multitenancy, e.g.\
            \ steam_game1, steam_game2, etc."
          type: string
        validationUrl:
          description: The URL to send the user token validation request to.
          type: string
        headers:
          description: The headers required for the validation request.
          items:
            $ref: "#/components/schemas/OAuth2RequestKeyValue"
          type: array
        params:
          description: The query parameters required for the validation request.
          items:
            $ref: "#/components/schemas/OAuth2RequestKeyValue"
          type: array
        responseIdMapping:
          description: Determines how to map the user id in the response. For example
            "response.params.steamid"
          type: string
      required:
      - id
      - name
      - validationUrl
      type: object
    PaginationOAuth2AuthScheme:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - headers:
          - fromClient: true
            value: value
            key: key
          - fromClient: true
            value: value
            key: key
          responseIdMapping: responseIdMapping
          name: name
          validationUrl: validationUrl
          id: id
          params:
          - fromClient: true
            value: value
            key: key
          - fromClient: true
            value: value
            key: key
        - headers:
          - fromClient: true
            value: value
            key: key
          - fromClient: true
            value: value
            key: key
          responseIdMapping: responseIdMapping
          name: name
          validationUrl: validationUrl
          id: id
          params:
          - fromClient: true
            value: value
            key: key
          - fromClient: true
            value: value
            key: key
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/OAuth2AuthScheme"
          type: array
      type: object
    OidcSessionRequest:
      example:
        jwt: jwt
        profileId: profileId
        profileSelector: profileSelector
      properties:
        jwt:
          description: The JWT to parse
          type: string
        profileId:
          description: The profile ID to assign to the session.
          type: string
        profileSelector:
          description: "A query string to select the profile to use. NOTE: This will\
            \ not be run if a profileId is specified."
          type: string
      required:
      - jwt
      type: object
    CreateOrUpdateOidcAuthSchemeResponse:
      description: Represents a response from updating an Auth Scheme for an Application.
      example:
        scheme:
          keys:
          - kty: kty
            e: e
            use: use
            kid: kid
            alg: alg
            "n": "n"
          - kty: kty
            e: e
            use: use
            kid: kid
            alg: alg
            "n": "n"
          name: name
          keysUrl: keysUrl
          mediaType: mediaType
          id: id
          issuer: issuer
      properties:
        scheme:
          $ref: "#/components/schemas/OidcAuthScheme"
      type: object
    JWK:
      description: A set of JWKs containing the keys required to validate JWT signatures.
      example:
        kty: kty
        e: e
        use: use
        kid: kid
        alg: alg
        "n": "n"
      properties:
        alg:
          description: Algorithm (e.g. RS256)
          type: string
        kid:
          description: Key id (unique to issuer)
          type: string
        kty:
          description: Key type (e.g. RSA)
          type: string
        use:
          description: The intended use (e.g. sig)
          type: string
        e:
          description: Base64url encoded exponent
          type: string
        "n":
          description: Pub key modulus
          type: string
      type: object
    OidcAuthScheme:
      description: The full JSON response as described in AuthScheme
      example:
        keys:
        - kty: kty
          e: e
          use: use
          kid: kid
          alg: alg
          "n": "n"
        - kty: kty
          e: e
          use: use
          kid: kid
          alg: alg
          "n": "n"
        name: name
        keysUrl: keysUrl
        mediaType: mediaType
        id: id
        issuer: issuer
      properties:
        id:
          description: The unique ID of the auth scheme.
          type: string
        name:
          description: The unique name of the auth scheme.
          type: string
        issuer:
          description: "A unique name used to identify the scheme within the instance\
            \ of Elements. When validating from an external source (e.g. Google or\
            \ Apple SSO), must match the 'iss' property of the decoded JWT."
          type: string
        keys:
          description: A set of JWKs containing the keys required to validate JWT
            signatures.
          items:
            $ref: "#/components/schemas/JWK"
          type: array
        keysUrl:
          description: The URL for the JWK data. Will attempt to refresh keys if the
            kid cannot be found in the collection.
          type: string
        mediaType:
          description: The JWK format. Defaults to application/json
          type: string
      required:
      - id
      - issuer
      - keys
      type: object
    CreateOrUpdateOidcAuthSchemeRequest:
      description: Represents a request to update an Auth Scheme for an Application.
      example:
        keys:
        - kty: kty
          e: e
          use: use
          kid: kid
          alg: alg
          "n": "n"
        - kty: kty
          e: e
          use: use
          kid: kid
          alg: alg
          "n": "n"
        keysUrl: keysUrl
        mediaType: mediaType
        id: id
        issuer: issuer
      properties:
        id:
          description: The unique ID of the auth scheme.
          type: string
        issuer:
          description: "A unique name used to identify the scheme within the instance\
            \ of Elements. When validating from an external source (e.g. Google or\
            \ Apple SSO), must match the 'iss' property of the decoded JWT."
          type: string
        keys:
          description: A set of JWKs containing the keys required to validate JWT
            signatures.
          items:
            $ref: "#/components/schemas/JWK"
          type: array
        keysUrl:
          description: The URL for the JWK data. Will attempt to refresh keys if the
            kid cannot be found in the collection.
          type: string
        mediaType:
          description: The JWK format. Defaults to application/json
          type: string
      required:
      - id
      - issuer
      - keys
      type: object
    PaginationOidcAuthScheme:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - keys:
          - kty: kty
            e: e
            use: use
            kid: kid
            alg: alg
            "n": "n"
          - kty: kty
            e: e
            use: use
            kid: kid
            alg: alg
            "n": "n"
          name: name
          keysUrl: keysUrl
          mediaType: mediaType
          id: id
          issuer: issuer
        - keys:
          - kty: kty
            e: e
            use: use
            kid: kid
            alg: alg
            "n": "n"
          - kty: kty
            e: e
            use: use
            kid: kid
            alg: alg
            "n": "n"
          name: name
          keysUrl: keysUrl
          mediaType: mediaType
          id: id
          issuer: issuer
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/OidcAuthScheme"
          type: array
      type: object
    SmartContract:
      description: Represents a smart contract.
      example:
        addresses:
          key:
            address: address
        metadata:
          key: "{}"
        displayName: displayName
        name: name
        id: id
        vault:
          displayName: displayName
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          key:
            privateKey: privateKey
            encrypted: true
            encryption:
              key: "{}"
            publicKey: publicKey
            algorithm: RSA_256
      properties:
        id:
          description: The Elements database id of the contract.
          type: string
        name:
          description: The unique symbolic name of the smart contract.
          type: string
        displayName:
          description: The name given to this contract for display purposes.
          type: string
        addresses:
          additionalProperties:
            $ref: "#/components/schemas/SmartContractAddress"
          description: "The addresses of the contract from the blockchain. Depending\
            \ on the network or protocol this may have several meanings. For example,\
            \ this may be the script has for the Ethereum network."
          type: object
        vault:
          $ref: "#/components/schemas/Vault"
        metadata:
          additionalProperties:
            description: Any metadata for this contract.
            type: object
          description: Any metadata for this contract.
          type: object
      required:
      - addresses
      - displayName
      - id
      - name
      - vault
      type: object
    SmartContractAddress:
      description: The address of the contract from the blockchain. Depending on the
        network or protocol this may have several meanings and vary depending on the
        specific API or network.
      example:
        address: address
      properties:
        address:
          type: string
      type: object
    Vault:
      example:
        displayName: displayName
        id: id
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        key:
          privateKey: privateKey
          encrypted: true
          encryption:
            key: "{}"
          publicKey: publicKey
          algorithm: RSA_256
      properties:
        id:
          description: The system assigned unique id of the vault.
          type: string
        user:
          $ref: "#/components/schemas/User"
        displayName:
          description: The display name given to this vault.
          type: string
        key:
          $ref: "#/components/schemas/VaultKey"
      required:
      - displayName
      - id
      - key
      - user
      type: object
    VaultKey:
      description: The Vault's key. The vault secures each vault with this key.
      example:
        privateKey: privateKey
        encrypted: true
        encryption:
          key: "{}"
        publicKey: publicKey
        algorithm: RSA_256
      properties:
        algorithm:
          description: Specifies the private key encryption algorithm used to secure
            the vault.
          enum:
          - RSA_256
          - RSA_384
          - RSA_512
          type: string
        publicKey:
          description: The public key portion of the vault key.
          type: string
        privateKey:
          description: The private key portion of the vault key.
          type: string
        encrypted:
          description: The flag to indicate if the key is encrypted or not.
          type: boolean
        encryption:
          additionalProperties:
            description: The Vault's encryption metadata. This is specific to the
              encryption type used.
            type: object
          description: The Vault's encryption metadata. This is specific to the encryption
            type used.
          type: object
      required:
      - algorithm
      - privateKey
      - publicKey
      type: object
    CreateSmartContractRequest:
      description: Creates a smart contract.
      example:
        addresses:
          key:
            address: address
        metadata:
          key: "{}"
        vaultId: vaultId
        displayName: displayName
        name: name
      properties:
        name:
          description: The unique symbolic name of the smart contract.
          type: string
        displayName:
          description: The name given to this contract for display purposes.
          type: string
        addresses:
          additionalProperties:
            $ref: "#/components/schemas/SmartContractAddress"
          description: The address of the contract from the blockchain. Depending
            on the network or protocol this may have several meanings and vary depending
            on the specific API or network.
          type: object
        vaultId:
          description: The Elements database id of the wallet containing the default
            account to be used for contract related requests.
          type: string
        metadata:
          additionalProperties:
            description: Any metadata for this contract.
            type: object
          description: Any metadata for this contract.
          type: object
      required:
      - addresses
      - displayName
      - name
      - vaultId
      type: object
    PaginationSmartContract:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - addresses:
            key:
              address: address
          metadata:
            key: "{}"
          displayName: displayName
          name: name
          id: id
          vault:
            displayName: displayName
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            key:
              privateKey: privateKey
              encrypted: true
              encryption:
                key: "{}"
              publicKey: publicKey
              algorithm: RSA_256
        - addresses:
            key:
              address: address
          metadata:
            key: "{}"
          displayName: displayName
          name: name
          id: id
          vault:
            displayName: displayName
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            key:
              privateKey: privateKey
              encrypted: true
              encryption:
                key: "{}"
              publicKey: publicKey
              algorithm: RSA_256
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/SmartContract"
          type: array
      type: object
    UpdateSmartContractRequest:
      description: Updates a smart contract.
      example:
        addresses:
          key:
            address: address
        metadata:
          key: "{}"
        vaultId: vaultId
        displayName: displayName
        name: name
      properties:
        name:
          description: The unique symbolic name of the smart contract.
          type: string
        displayName:
          description: The name given to this contract for display purposes.
          type: string
        addresses:
          additionalProperties:
            $ref: "#/components/schemas/SmartContractAddress"
          description: The address of the contract from the blockchain. Depending
            on the network or protocol this may have several meanings and vary depending
            on the specific API or network.
          type: object
        vaultId:
          description: The Elements database id of the wallet containing the default
            account to be used for contract related requests.
          type: string
        metadata:
          additionalProperties:
            description: Any metadata for this contract.
            type: object
          description: Any metadata for this contract.
          type: object
      required:
      - addresses
      - displayName
      - name
      - vaultId
      type: object
    CreateVaultRequest:
      example:
        displayName: displayName
        passphrase: passphrase
        userId: userId
        algorithm: RSA_256
      properties:
        userId:
          description: The elements-defined user ID to own the vault.
          type: string
        displayName:
          description: A user-defined name for the vault. This is used simply for
            the user's reference and has no bearing  onthe vault's functionality.
          type: string
        passphrase:
          description: "The passphrase used to to encrypt the vault. If empty, then\
            \ the vault will not be encrypted. Some configurations may opt to disallow\
            \ encryption entirely."
          type: string
        algorithm:
          description: "The encryption algorithm used to secure the vault. Once crated,\
            \ a vault will contains a private/public key pair which will be used to\
            \ encrypt the wallets within the vault."
          enum:
          - RSA_256
          - RSA_384
          - RSA_512
          type: string
      required:
      - displayName
      - userId
      type: object
    PaginationVault:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - displayName: displayName
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          key:
            privateKey: privateKey
            encrypted: true
            encryption:
              key: "{}"
            publicKey: publicKey
            algorithm: RSA_256
        - displayName: displayName
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          key:
            privateKey: privateKey
            encrypted: true
            encryption:
              key: "{}"
            publicKey: publicKey
            algorithm: RSA_256
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Vault"
          type: array
      type: object
    UpdateVaultRequest:
      example:
        displayName: displayName
        passphrase: passphrase
        userId: userId
        newPassphrase: newPassphrase
      properties:
        displayName:
          description: A user-defined name for the vault. This is used simply for
            the user's reference and has no bearing  onthe vault's functionality.
          type: string
        userId:
          description: The elements-defined user ID to own the vault.
          type: string
        passphrase:
          description: "The current passphrase for the vault. If left null, no updates\
            \ to the passphrase will be made. If not-null, then the new password must\
            \ also not be null."
          type: string
        newPassphrase:
          description: "The updated passphrase for the vault. If left null, no updates\
            \ to the passphrase will be made. If not-null, then the password must\
            \ also not be null."
          type: string
      required:
      - displayName
      - userId
      type: object
    Wallet:
      example:
        preferredAccount: 1
        displayName: displayName
        id: id
        api: NEO
        accounts:
        - privateKey: privateKey
          address: address
          encrypted: true
        - privateKey: privateKey
          address: address
          encrypted: true
        networks:
        - NEO
        - NEO
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        vault:
          displayName: displayName
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          key:
            privateKey: privateKey
            encrypted: true
            encryption:
              key: "{}"
            publicKey: publicKey
            algorithm: RSA_256
      properties:
        id:
          description: The system assigned unique id of the wallet.
          type: string
        user:
          $ref: "#/components/schemas/User"
        vault:
          $ref: "#/components/schemas/Vault"
        displayName:
          description: The name given to this wallet.
          type: string
        api:
          description: The protocol used wiht this wallet.
          enum:
          - NEO
          - ETHEREUM
          - SOLANA
          - FLOW
          - NEAR
          type: string
        networks:
          description: The networks associated with this wallet.
          items:
            description: The networks associated with this wallet.
            enum:
            - NEO
            - NEO_TEST
            - ETHEREUM
            - ETHEREUM_TEST
            - BSC
            - BSC_TEST
            - POLYGON
            - POLYGON_TEST
            - SOLANA
            - SOLANA_TEST
            - FLOW
            - FLOW_TEST
            - NEAR
            - NEAR_TEST
            type: string
          type: array
        preferredAccount:
          description: The default account. Must not be larger than the count of identities.
          format: int32
          type: integer
        accounts:
          description: The list of account pairs included in this wallet.
          items:
            $ref: "#/components/schemas/WalletAccount"
          type: array
      required:
      - accounts
      - api
      - displayName
      - id
      - networks
      - user
      - vault
      type: object
    WalletAccount:
      description: The list of account pairs included in this wallet.
      example:
        privateKey: privateKey
        address: address
        encrypted: true
      properties:
        address:
          description: The Wallet Address - id public identity. Required.
          type: string
        privateKey:
          description: The Wallet Account - id private identity. May be null if the
            wallet is for receive only.
          type: string
        encrypted:
          description: Indicates if this identity is encrypted.
          type: boolean
      required:
      - address
      type: object
    CreateWalletRequest:
      description: Creates a new custodial wallet.
      example:
        preferredAccount: 0
        displayName: displayName
        api: NEO
        accounts:
        - privateKey: privateKey
          address: address
          generate: true
        - privateKey: privateKey
          address: address
          generate: true
        networks:
        - NEO
        - NEO
      properties:
        displayName:
          description: A user-defined name for the wallet. This is used simply for
            the user's reference and has no bearing  onthe wallet's functionality.
          type: string
        api:
          description: "The protocol of this wallet. Once set, this cannot be unset."
          enum:
          - NEO
          - ETHEREUM
          - SOLANA
          - FLOW
          - NEAR
          type: string
        networks:
          description: The networks associated with this wallet. All must support
            the Wallet's protocol.
          items:
            description: The networks associated with this wallet. All must support
              the Wallet's protocol.
            enum:
            - NEO
            - NEO_TEST
            - ETHEREUM
            - ETHEREUM_TEST
            - BSC
            - BSC_TEST
            - POLYGON
            - POLYGON_TEST
            - SOLANA
            - SOLANA_TEST
            - FLOW
            - FLOW_TEST
            - NEAR
            - NEAR_TEST
            type: string
          type: array
        preferredAccount:
          description: The default identity. Must not be larger than the count of
            identities.
          format: int32
          type: integer
        accounts:
          items:
            $ref: "#/components/schemas/CreateWalletRequestAccount"
          type: array
      required:
      - accounts
      - api
      - displayName
      - networks
      type: object
    CreateWalletRequestAccount:
      description: Specifies a Custodial Wallet Account Creating a Wallet
      example:
        privateKey: privateKey
        address: address
        generate: true
      properties:
        generate:
          description: Flag which indicates if the account should be generated or
            imported.
          type: boolean
        address:
          description: The Wallet Address - id public identity. Must be null for generated
            wallets.
          type: string
        privateKey:
          description: The Wallet Account - id private identity. May be null if the
            wallet is for receive only.
          type: string
      required:
      - address
      type: object
    PaginationWallet:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - preferredAccount: 1
          displayName: displayName
          id: id
          api: NEO
          accounts:
          - privateKey: privateKey
            address: address
            encrypted: true
          - privateKey: privateKey
            address: address
            encrypted: true
          networks:
          - NEO
          - NEO
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          vault:
            displayName: displayName
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            key:
              privateKey: privateKey
              encrypted: true
              encryption:
                key: "{}"
              publicKey: publicKey
              algorithm: RSA_256
        - preferredAccount: 1
          displayName: displayName
          id: id
          api: NEO
          accounts:
          - privateKey: privateKey
            address: address
            encrypted: true
          - privateKey: privateKey
            address: address
            encrypted: true
          networks:
          - NEO
          - NEO
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          vault:
            displayName: displayName
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            key:
              privateKey: privateKey
              encrypted: true
              encryption:
                key: "{}"
              publicKey: publicKey
              algorithm: RSA_256
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Wallet"
          type: array
      type: object
    UpdateWalletRequest:
      description: Updates a Wallet.
      example:
        preferredAccount: 0
        displayName: displayName
        networks:
        - NEO
        - NEO
      properties:
        displayName:
          description: The new display name of the wallet.
          type: string
        preferredAccount:
          description: The default identity. Must not be larger than the count of
            identities.
          format: int32
          type: integer
        networks:
          description: The networks associated with this wallet. All must support
            the Wallet's protocol.
          items:
            description: The networks associated with this wallet. All must support
              the Wallet's protocol.
            enum:
            - NEO
            - NEO_TEST
            - ETHEREUM
            - ETHEREUM_TEST
            - BSC
            - BSC_TEST
            - POLYGON
            - POLYGON_TEST
            - SOLANA
            - SOLANA_TEST
            - FLOW
            - FLOW_TEST
            - NEAR
            - NEAR_TEST
            type: string
          type: array
      required:
      - networks
      type: object
    Deployment:
      example:
        application:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        id: id
        version: version
        revision: revision
      properties:
        id:
          description: The unique ID of the deployment itself.
          type: string
        version:
          description: The deployment version. Allows for overriding versions with
            new content.
          type: string
        revision:
          description: The revision that this deployment points to.
          type: string
        application:
          $ref: "#/components/schemas/Application"
      required:
      - application
      - id
      - revision
      - version
      type: object
    CreateDeploymentRequest:
      example:
        version: version
        revision: revision
      properties:
        version:
          type: string
        revision:
          type: string
      required:
      - revision
      - version
      type: object
    PaginationDeployment:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          id: id
          version: version
          revision: revision
        - application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          id: id
          version: version
          revision: revision
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Deployment"
          type: array
      type: object
    UpdateDeploymentRequest:
      example:
        revision: revision
      properties:
        revision:
          type: string
      required:
      - revision
      type: object
    CodegenRequest:
      example:
        elementSpecUrl: elementSpecUrl
        options: options
        language: language
        packageName: packageName
      properties:
        elementSpecUrl:
          description: The URL for the Element OpenApi spec. Usually /app/rest/elementName/openapi.json
          type: string
        language:
          description: The target language that you want to generate the code to.
          type: string
        packageName:
          description: The package name to set the generated code to. E.g. com.mycompany.mygame.Elements
          type: string
        options:
          description: Any additional options that you want to pass to the generator
          type: string
      type: object
    FilterRegistration:
      properties:
        servletNameMappings:
          items:
            type: string
          type: array
        urlPatternMappings:
          items:
            type: string
          type: array
        name:
          type: string
        className:
          type: string
        initParameters:
          additionalProperties:
            type: string
          type: object
      type: object
    JspConfigDescriptor:
      properties:
        taglibs:
          items:
            $ref: "#/components/schemas/TaglibDescriptor"
          type: array
        jspPropertyGroups:
          items:
            $ref: "#/components/schemas/JspPropertyGroupDescriptor"
          type: array
      type: object
    JspPropertyGroupDescriptor:
      properties:
        buffer:
          type: string
        deferredSyntaxAllowedAsLiteral:
          type: string
        isXml:
          type: string
        urlPatterns:
          items:
            type: string
          type: array
        elIgnored:
          type: string
        errorOnELNotFound:
          type: string
        pageEncoding:
          type: string
        scriptingInvalid:
          type: string
        includePreludes:
          items:
            type: string
          type: array
        includeCodas:
          items:
            type: string
          type: array
        trimDirectiveWhitespaces:
          type: string
        defaultContentType:
          type: string
        errorOnUndeclaredNamespace:
          type: string
      type: object
    ServletConfig:
      properties:
        servletContext:
          $ref: "#/components/schemas/ServletContext"
        initParameterNames:
          type: object
        servletName:
          type: string
      type: object
    ServletContext:
      properties:
        classLoader:
          $ref: "#/components/schemas/ServletContext_classLoader"
        majorVersion:
          format: int32
          type: integer
        minorVersion:
          format: int32
          type: integer
        contextPath:
          type: string
        serverInfo:
          type: string
        attributeNames:
          type: object
        effectiveMajorVersion:
          format: int32
          type: integer
        effectiveMinorVersion:
          format: int32
          type: integer
        servletContextName:
          type: string
        servletRegistrations:
          additionalProperties:
            $ref: "#/components/schemas/ServletRegistration"
          type: object
        filterRegistrations:
          additionalProperties:
            $ref: "#/components/schemas/FilterRegistration"
          type: object
        sessionCookieConfig:
          $ref: "#/components/schemas/SessionCookieConfig"
        sessionTrackingModes:
          items:
            enum:
            - COOKIE
            - URL
            - SSL
            type: string
          type: array
          uniqueItems: true
          writeOnly: true
        effectiveSessionTrackingModes:
          items:
            enum:
            - COOKIE
            - URL
            - SSL
            type: string
          type: array
          uniqueItems: true
        jspConfigDescriptor:
          $ref: "#/components/schemas/JspConfigDescriptor"
        defaultSessionTrackingModes:
          items:
            enum:
            - COOKIE
            - URL
            - SSL
            type: string
          type: array
          uniqueItems: true
        virtualServerName:
          type: string
        sessionTimeout:
          format: int32
          type: integer
        requestCharacterEncoding:
          type: string
        responseCharacterEncoding:
          type: string
        initParameterNames:
          type: object
      type: object
    ServletRegistration:
      properties:
        mappings:
          items:
            type: string
          type: array
        runAsRole:
          type: string
        name:
          type: string
        className:
          type: string
        initParameters:
          additionalProperties:
            type: string
          type: object
      type: object
    SessionCookieConfig:
      properties:
        name:
          type: string
        path:
          type: string
        attributes:
          additionalProperties:
            type: string
          type: object
        comment:
          type: string
        httpOnly:
          type: boolean
        secure:
          type: boolean
        maxAge:
          format: int32
          type: integer
        domain:
          type: string
      type: object
    TaglibDescriptor:
      properties:
        taglibURI:
          type: string
        taglibLocation:
          type: string
      type: object
    PaginationProfile:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Profile"
          type: array
      type: object
    CreateFollowerRequest:
      description: Represents a request to follow a player Follower.
      example:
        followedId: followedId
      properties:
        followedId:
          description: The profile id which to follow.
          type: string
      required:
      - followedId
      type: object
    Friend:
      description: "Represents a player's friend.  This includes the basic information\
        \ of the friend as well as the friendship type, profiles he or she has across\
        \ games, and "
      example:
        friendship: NONE
        profiles:
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        id: id
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
      properties:
        id:
          description: The unique ID of the friendship.
          type: string
        user:
          $ref: "#/components/schemas/User"
        friendship:
          description: The friendship type.
          enum:
          - NONE
          - OUTGOING
          - INCOMING
          - MUTUAL
          type: string
        profiles:
          description: The profiles which are associated with the friend user.
          items:
            $ref: "#/components/schemas/Profile"
          type: array
      type: object
    PaginationFriend:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - friendship: NONE
          profiles:
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
        - friendship: NONE
          profiles:
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Friend"
          type: array
      type: object
    CreateItemRequest:
      example:
        metadata:
          key: "{}"
        publicVisible: true
        metadataSpecId: metadataSpecId
        displayName: displayName
        name: name
        description: description
        category: FUNGIBLE
        tags:
        - tags
        - tags
        metadataSpec: metadataSpec
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        category:
          enum:
          - FUNGIBLE
          - DISTINCT
          type: string
        tags:
          items:
            type: string
          type: array
        metadataSpecId:
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        publicVisible:
          type: boolean
        metadataSpec:
          type: string
          writeOnly: true
      required:
      - category
      - description
      - displayName
      - name
      type: object
    PaginationItem:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - metadata:
            key: "{}"
          publicVisible: true
          displayName: displayName
          name: name
          description: description
          id: id
          category: FUNGIBLE
          tags:
          - tags
          - tags
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        - metadata:
            key: "{}"
          publicVisible: true
          displayName: displayName
          name: name
          description: description
          id: id
          category: FUNGIBLE
          tags:
          - tags
          - tags
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Item"
          type: array
      type: object
    UpdateItemRequest:
      example:
        metadata:
          key: "{}"
        publicVisible: true
        displayName: displayName
        name: name
        description: description
        tags:
        - tags
        - tags
        metadataSpec:
          name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        tags:
          items:
            type: string
          type: array
        metadataSpec:
          $ref: "#/components/schemas/MetadataSpec"
        metadata:
          additionalProperties:
            type: object
          type: object
        publicVisible:
          type: boolean
      required:
      - description
      - displayName
      - name
      type: object
    CreateGooglePlayIapReceipt:
      example:
        purchaseToken: purchaseToken
        productId: productId
        packageName: packageName
      properties:
        packageName:
          description: The package name of the app. Note that this may be different
            from the applicationId/uniqueIdentifier which is why it should be provided
            with the request.
          type: string
        productId:
          description: "The product id purchased by the user, e.g. `com.namazustudios.example_app.pack_10_coins`."
          type: string
        purchaseToken:
          description: The token issued to the user upon successful Google Play purchase
            transaction.
          type: string
      required:
      - packageName
      - productId
      - purchaseToken
      type: object
    BuildIndexRequest:
      description: Starts a new indexing operation.
      example:
        toIndex:
        - DISTINCT_INVENTORY_ITEM
        - DISTINCT_INVENTORY_ITEM
        plan: true
      properties:
        plan:
          description: Set to true to plan the index building.
          type: boolean
        toIndex:
          description: Set to true to perform the index building.
          items:
            description: Set to true to perform the index building.
            enum:
            - DISTINCT_INVENTORY_ITEM
            - METADATA
            type: string
          type: array
      type: object
    IndexMetadataObject:
      example:
        identifier: "{}"
      properties:
        identifier:
          type: object
      type: object
    IndexPlanObject:
      example:
        id: id
        state: READY
        steps:
          description: description
          operation: CREATE
          indexMetadata:
            identifier: "{}"
      properties:
        id:
          type: string
        state:
          enum:
          - READY
          - PROCESSING
          - APPLIED
          type: string
        steps:
          $ref: "#/components/schemas/IndexPlanStepObject"
      type: object
    IndexPlanStepObject:
      example:
        description: description
        operation: CREATE
        indexMetadata:
          identifier: "{}"
      properties:
        description:
          type: string
        operation:
          enum:
          - CREATE
          - LEAVE_AS_IS
          - REPLACE
          - DELETE
          type: string
        indexMetadata:
          $ref: "#/components/schemas/IndexMetadataObject"
      type: object
    PaginationIndexPlanObject:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - id: id
          state: READY
          steps:
            description: description
            operation: CREATE
            indexMetadata:
              identifier: "{}"
        - id: id
          state: READY
          steps:
            description: description
            operation: CREATE
            indexMetadata:
              identifier: "{}"
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/IndexPlanObject"
          type: array
      type: object
    InventoryItem:
      description: "Should the redemption be successful, the Inventory Item that was\
        \ updated. Otherwise, null."
      example:
        item:
          metadata:
            key: "{}"
          publicVisible: true
          displayName: displayName
          name: name
          description: description
          id: id
          category: FUNGIBLE
          tags:
          - tags
          - tags
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        quantity: 0
        id: id
        priority: 6
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
      properties:
        id:
          description: The unique ID of the inventory item itself.
          type: string
        user:
          $ref: "#/components/schemas/User"
        item:
          $ref: "#/components/schemas/Item"
        quantity:
          description: The quantity of the Item in inventory
          format: int32
          type: integer
        priority:
          description: The priority of this Item grouping in inventory (for stacked/packaged
            inventory support)
          format: int32
          type: integer
      required:
      - id
      - item
      - priority
      - quantity
      - user
      type: object
    AdvancedInventoryItemQuantityAdjustment:
      example:
        quantityDelta: 0
        priority: 6
        userId: userId
      properties:
        userId:
          description: The User whose inventory to modify.ß
          type: string
        quantityDelta:
          description: The delta to be applied to the inventory item quantity (positive
            or negative)
          format: int32
          type: integer
        priority:
          description: The priority slot for the item.
          format: int32
          type: integer
      required:
      - quantityDelta
      - userId
      type: object
    CreateAdvancedInventoryItemRequest:
      example:
        itemId: itemId
        quantity: 0
        priority: 6
        userId: userId
      properties:
        userId:
          description: The User ID
          type: string
        itemId:
          description: The item to reference.
          type: string
        quantity:
          description: The quantity of the Item in inventory
          format: int32
          type: integer
        priority:
          description: The priority slot for the item.
          format: int32
          type: integer
      required:
      - itemId
      - userId
      type: object
    PaginationInventoryItem:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          quantity: 0
          id: id
          priority: 6
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          quantity: 0
          id: id
          priority: 6
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/InventoryItem"
          type: array
      type: object
    UpdateInventoryItemRequest:
      example:
        quantity: 0
      properties:
        quantity:
          description: The quantity of the Item in inventory
          format: int32
          type: integer
      type: object
    DistinctInventoryItem:
      example:
        item:
          metadata:
            key: "{}"
          publicVisible: true
          displayName: displayName
          name: name
          description: description
          id: id
          category: FUNGIBLE
          tags:
          - tags
          - tags
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        metadata:
          key: "{}"
        profile:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        id: id
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
      properties:
        id:
          description: The unique ID of the inventory item itself.
          type: string
        item:
          $ref: "#/components/schemas/Item"
        user:
          $ref: "#/components/schemas/User"
        profile:
          $ref: "#/components/schemas/Profile"
        metadata:
          additionalProperties:
            type: object
          type: object
      required:
      - id
      - item
      - user
      type: object
    CreateDistinctInventoryItemRequest:
      example:
        itemId: itemId
        metadata:
          key: "{}"
        profileId: profileId
        userId: userId
      properties:
        itemId:
          description: The digital goods item id.
          type: string
        userId:
          description: The id of the User owning this inventory item id.
          type: string
        profileId:
          description: The the profileid of hte Profile owning this inventory item.
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
      required:
      - itemId
      type: object
    PaginationDistinctInventoryItem:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/DistinctInventoryItem"
          type: array
      type: object
    UpdateDistinctInventoryItemRequest:
      example:
        metadata:
          key: "{}"
        profileId: profileId
        userId: userId
      properties:
        userId:
          description: The id of the User owning this inventory item id.
          type: string
        profileId:
          description: The the profile id of hte Profile owning this inventory item.
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
      type: object
    SimpleInventoryItemQuantityAdjustment:
      example:
        quantityDelta: 0
        userId: userId
      properties:
        userId:
          description: The User whose inventory to modify.ß
          type: string
        quantityDelta:
          description: The delta to be applied to the inventory item quantity (positive
            or negative)
          format: int32
          type: integer
      required:
      - quantityDelta
      - userId
      type: object
    CreateSimpleInventoryItemRequest:
      example:
        itemId: itemId
        quantity: 0
        userId: userId
      properties:
        userId:
          description: The User ID
          type: string
        itemId:
          description: The item to reference.
          type: string
        quantity:
          description: The quantity of the Item in inventory
          format: int32
          type: integer
      required:
      - itemId
      - userId
      type: object
    InviteViaPhonesResponse:
      description: Represents a response to invite users with phone numbers list
      example:
        matched:
        - phoneNumber: phoneNumber
          profileIds:
          - profileIds
          - profileIds
        - phoneNumber: phoneNumber
          profileIds:
          - profileIds
          - profileIds
      properties:
        matched:
          description: The list of objects representing matched phone numbers
          items:
            $ref: "#/components/schemas/PhoneMatchedInvitation"
          type: array
      type: object
    PhoneMatchedInvitation:
      description: Represents a single match between the user primary phone number
        and requested phone from invitation.
      example:
        phoneNumber: phoneNumber
        profileIds:
        - profileIds
        - profileIds
      properties:
        phoneNumber:
          description: Phone number
          type: string
        profileIds:
          description: The list of profile Ids that phone was matched
          items:
            description: The list of profile Ids that phone was matched
            type: string
          type: array
      type: object
    InviteViaPhonesRequest:
      description: Represents a request to invite users with phone numbers list
      example:
        phoneNumbers:
        - phoneNumbers
        - phoneNumbers
      properties:
        phoneNumbers:
          description: The list of phone numbers
          items:
            description: The list of phone numbers
            type: string
          type: array
      type: object
    AccessPermissions:
      description: Permission associated with LargeObject.
      example:
        read:
          profiles:
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          users:
          - firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          - firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          wildcard: true
        write:
          profiles:
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          users:
          - firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          - firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          wildcard: true
        delete:
          profiles:
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          - lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          users:
          - firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          - firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          wildcard: true
      properties:
        read:
          $ref: "#/components/schemas/Subjects"
        write:
          $ref: "#/components/schemas/Subjects"
        delete:
          $ref: "#/components/schemas/Subjects"
      required:
      - delete
      - read
      - write
      type: object
    LargeObject:
      example:
        path: path
        accessPermissions:
          read:
            profiles:
            - lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            - lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            users:
            - firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            - firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            wildcard: true
          write:
            profiles:
            - lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            - lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            users:
            - firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            - firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            wildcard: true
          delete:
            profiles:
            - lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            - lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            users:
            - firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            - firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            wildcard: true
        id: id
        mimeType: mimeType
        state: EMPTY
        lastModified: 2000-01-23T04:56:07.000+00:00
        url: url
        originalFilename: originalFilename
      properties:
        id:
          description: The unique ID of the LargeObject.
          type: string
        url:
          description: "The URL where the binary contents of the LargeObject may be\
            \ read. May be null, since Path param or Id is pointer for object."
          type: string
        path:
          description: The path to the file in the underlying bucket.
          type: string
        mimeType:
          description: The MIME type of the LargeObject.
          type: string
        accessPermissions:
          $ref: "#/components/schemas/AccessPermissions"
        state:
          description: Current state of large object.
          enum:
          - EMPTY
          - UPLOADED
          type: string
        lastModified:
          description: Date of last modification.
          format: date-time
          type: string
        originalFilename:
          description: The original name of the file.
          type: string
      required:
      - accessPermissions
      - id
      - path
      type: object
    Subjects:
      description: Subjects allowed to delete
      example:
        profiles:
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        users:
        - firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        - firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        wildcard: true
      properties:
        wildcard:
          description: Flag to check who may perform the operations. True if all users
            may access the object.
          type: boolean
        users:
          description: Users which may perform the operations.
          items:
            $ref: "#/components/schemas/User"
          type: array
        profiles:
          description: "Profiles, which owners may perform the operations."
          items:
            $ref: "#/components/schemas/Profile"
          type: array
      required:
      - profiles
      - users
      type: object
    BodyPart:
      properties:
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          $ref: "#/components/schemas/BodyPart_headers"
        mediaType:
          $ref: "#/components/schemas/MediaType"
        messageBodyWorkers:
          type: object
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
        parameterizedHeaders:
          $ref: "#/components/schemas/BodyPart_parameterizedHeaders"
      type: object
    ContentDisposition:
      properties:
        type:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        fileName:
          type: string
        creationDate:
          format: date-time
          type: string
        modificationDate:
          format: date-time
          type: string
        readDate:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
      type: object
    FormDataBodyPart:
      properties:
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          $ref: "#/components/schemas/BodyPart_headers"
        mediaType:
          $ref: "#/components/schemas/MediaType"
        messageBodyWorkers:
          type: object
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
        name:
          type: string
        value:
          type: string
        content:
          type: object
        fileName:
          type: string
        simple:
          type: boolean
        formDataContentDisposition:
          $ref: "#/components/schemas/FormDataContentDisposition"
        parameterizedHeaders:
          $ref: "#/components/schemas/BodyPart_parameterizedHeaders"
      type: object
    FormDataContentDisposition:
      properties:
        type:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        fileName:
          type: string
        creationDate:
          format: date-time
          type: string
        modificationDate:
          format: date-time
          type: string
        readDate:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
        name:
          type: string
      type: object
    MediaType:
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
      type: object
    MessageBodyWorkers:
      type: object
    MultiPart:
      properties:
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          $ref: "#/components/schemas/BodyPart_headers"
        mediaType:
          $ref: "#/components/schemas/MediaType"
        messageBodyWorkers:
          type: object
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
        bodyParts:
          items:
            $ref: "#/components/schemas/BodyPart"
          type: array
        parameterizedHeaders:
          $ref: "#/components/schemas/BodyPart_parameterizedHeaders"
      type: object
    MultivaluedMapStringParameterizedHeader:
      additionalProperties:
        items:
          $ref: "#/components/schemas/ParameterizedHeader"
        type: array
      properties:
        empty:
          type: boolean
      type: object
    MultivaluedMapStringString:
      additionalProperties:
        items:
          type: string
        type: array
      properties:
        empty:
          type: boolean
      type: object
    ParameterizedHeader:
      properties:
        value:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    Providers:
      type: object
    CreateLargeObjectRequest:
      example:
        read:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
        mimeType: mimeType
        write:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
        delete:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
      properties:
        mimeType:
          description: The MIME type associated with the object.
          type: string
        read:
          $ref: "#/components/schemas/SubjectRequest"
        write:
          $ref: "#/components/schemas/SubjectRequest"
        delete:
          $ref: "#/components/schemas/SubjectRequest"
      required:
      - delete
      - mimeType
      - read
      - write
      type: object
    SubjectRequest:
      description: Specifies the Subjects which can delete the LargeObject.
      example:
        userIds:
        - userIds
        - userIds
        profileIds:
        - profileIds
        - profileIds
        wildcard: true
      properties:
        wildcard:
          description: "Flag to check who may perform the operation. If true, all\
            \ anonymous users may perform the operation."
          type: boolean
        userIds:
          description: A List of all UserIds which can operate against the LargeObject.
          items:
            description: A List of all UserIds which can operate against the LargeObject.
            type: string
          type: array
        profileIds:
          description: A List of all ProfileIds which can operate against the LargeObject.
          items:
            description: A List of all ProfileIds which can operate against the LargeObject.
            type: string
          type: array
      required:
      - profileIds
      - userIds
      type: object
    CreateLargeObjectFromUrlRequest:
      example:
        read:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
        fileUrl: fileUrl
        mimeType: mimeType
        write:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
        delete:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
      properties:
        mimeType:
          description: The MIME type associated with the object.
          type: string
        read:
          $ref: "#/components/schemas/SubjectRequest"
        write:
          $ref: "#/components/schemas/SubjectRequest"
        delete:
          $ref: "#/components/schemas/SubjectRequest"
        fileUrl:
          description: List with image URLs
          type: string
      required:
      - delete
      - fileUrl
      - mimeType
      - read
      - write
      type: object
    PaginationLargeObject:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - path: path
          accessPermissions:
            read:
              profiles:
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              users:
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              wildcard: true
            write:
              profiles:
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              users:
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              wildcard: true
            delete:
              profiles:
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              users:
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              wildcard: true
          id: id
          mimeType: mimeType
          state: EMPTY
          lastModified: 2000-01-23T04:56:07.000+00:00
          url: url
          originalFilename: originalFilename
        - path: path
          accessPermissions:
            read:
              profiles:
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              users:
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              wildcard: true
            write:
              profiles:
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              users:
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              wildcard: true
            delete:
              profiles:
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              - lastLogin: 0
                metadata:
                  key: "{}"
                application:
                  httpDocumentationUiUrl: httpDocumentationUiUrl
                  scriptRepoUrl: scriptRepoUrl
                  name: name
                  description: description
                  httpDocumentationUrl: httpDocumentationUrl
                  attributes:
                    key: "{}"
                  id: id
                  applicationConfiguration: null
                  gitBranch: gitBranch
                  httpTunnelEndpointUrl: httpTunnelEndpointUrl
                displayName: displayName
                imageUrl: imageUrl
                id: id
                user:
                  firstName: firstName
                  lastName: lastName
                  primaryPhoneNb: primaryPhoneNb
                  level: UNPRIVILEGED
                  name: name
                  linkedAccounts:
                  - linkedAccounts
                  - linkedAccounts
                  id: id
                  email: email
                imageObject:
                  id: id
                  mimeType: mimeType
                  state: EMPTY
                  lastModified: 2000-01-23T04:56:07.000+00:00
                  url: url
              users:
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              - firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              wildcard: true
          id: id
          mimeType: mimeType
          state: EMPTY
          lastModified: 2000-01-23T04:56:07.000+00:00
          url: url
          originalFilename: originalFilename
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/LargeObject"
          type: array
      type: object
    UpdateLargeObjectRequest:
      example:
        read:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
        mimeType: mimeType
        write:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
        delete:
          userIds:
          - userIds
          - userIds
          profileIds:
          - profileIds
          - profileIds
          wildcard: true
      properties:
        mimeType:
          description: The MIME type associated with the object.
          type: string
        read:
          $ref: "#/components/schemas/SubjectRequest"
        write:
          $ref: "#/components/schemas/SubjectRequest"
        delete:
          $ref: "#/components/schemas/SubjectRequest"
      required:
      - delete
      - mimeType
      - read
      - write
      type: object
    Leaderboard:
      example:
        scoreStrategyType: OVERWRITE_IF_GREATER
        scoreUnits: scoreUnits
        name: name
        id: id
        title: title
        firstEpochTimestamp: 1
        timeStrategyType: ALL_TIME
        epochInterval: 5
      properties:
        id:
          type: string
        name:
          description: The name of the leaderboard.  This must be unique across all
            leaderboards.
          type: string
        timeStrategyType:
          description: The time strategy for the leaderboard. Current options are
            ALL_TIME and EPOCHAL.
          enum:
          - ALL_TIME
          - EPOCHAL
          type: string
        scoreStrategyType:
          description: The score strategy for the leaderboard. Current options are
            OVERWRITE_IF_GREATER and ACCUMULATE.
          enum:
          - OVERWRITE_IF_GREATER
          - ACCUMULATE
          type: string
        title:
          description: The user-presentable name or title for for the leaderboard.
          type: string
        scoreUnits:
          description: The units-of measure for the score type of the leaderboard.
          type: string
        firstEpochTimestamp:
          description: "The time at which the leaderboard epoch intervals should begin\
            \ (in ms). If null, then the leaderboard is all-time and not epochal.\
            \ During creation, if this value is provided, then epochInterval must\
            \ also be provided."
          format: int64
          type: integer
        epochInterval:
          description: "The duration for a leaderboard epoch interval (in ms). If\
            \ null, then the leaderboard is all-time and not epochal. During creation,\
            \ if this value is provided, then firstEpochTimestamp must also be provided."
          format: int64
          type: integer
      required:
      - name
      - scoreStrategyType
      - scoreUnits
      - timeStrategyType
      - title
      type: object
    PaginationLeaderboard:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - scoreStrategyType: OVERWRITE_IF_GREATER
          scoreUnits: scoreUnits
          name: name
          id: id
          title: title
          firstEpochTimestamp: 1
          timeStrategyType: ALL_TIME
          epochInterval: 5
        - scoreStrategyType: OVERWRITE_IF_GREATER
          scoreUnits: scoreUnits
          name: name
          id: id
          title: title
          firstEpochTimestamp: 1
          timeStrategyType: ALL_TIME
          epochInterval: 5
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Leaderboard"
          type: array
      type: object
    PaginationRank:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - score:
            pointValue: 5.962133916683182
            scoreUnits: scoreUnits
            profile:
              lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            creationTimestamp: 5
            id: id
            leaderboardEpoch: 2
          position: 1
        - score:
            pointValue: 5.962133916683182
            scoreUnits: scoreUnits
            profile:
              lastLogin: 0
              metadata:
                key: "{}"
              application:
                httpDocumentationUiUrl: httpDocumentationUiUrl
                scriptRepoUrl: scriptRepoUrl
                name: name
                description: description
                httpDocumentationUrl: httpDocumentationUrl
                attributes:
                  key: "{}"
                id: id
                applicationConfiguration: null
                gitBranch: gitBranch
                httpTunnelEndpointUrl: httpTunnelEndpointUrl
              displayName: displayName
              imageUrl: imageUrl
              id: id
              user:
                firstName: firstName
                lastName: lastName
                primaryPhoneNb: primaryPhoneNb
                level: UNPRIVILEGED
                name: name
                linkedAccounts:
                - linkedAccounts
                - linkedAccounts
                id: id
                email: email
              imageObject:
                id: id
                mimeType: mimeType
                state: EMPTY
                lastModified: 2000-01-23T04:56:07.000+00:00
                url: url
            creationTimestamp: 5
            id: id
            leaderboardEpoch: 2
          position: 1
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Rank"
          type: array
      type: object
    Rank:
      example:
        score:
          pointValue: 5.962133916683182
          scoreUnits: scoreUnits
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          creationTimestamp: 5
          id: id
          leaderboardEpoch: 2
        position: 1
      properties:
        position:
          description: The position of the associated score in the result set.
          format: int64
          type: integer
        score:
          $ref: "#/components/schemas/Score"
      required:
      - score
      type: object
    Score:
      example:
        pointValue: 5.962133916683182
        scoreUnits: scoreUnits
        profile:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        creationTimestamp: 5
        id: id
        leaderboardEpoch: 2
      properties:
        id:
          description: The ID of the Score
          type: string
        profile:
          $ref: "#/components/schemas/Profile"
        pointValue:
          description: The point value of the score.
          format: double
          type: number
        scoreUnits:
          description: "The the units of measure for the points.  For example, if\
            \ the points in the game were called \"coins\" instead of \"points\" this\
            \ would be used to designate as such in the UI."
          type: string
        creationTimestamp:
          description: The time at which the score was created on the server.
          format: int64
          type: integer
        leaderboardEpoch:
          description: "The epoch to which the score belongs for the associated leaderboard.\
            \ By convention, if the leaderboard is all-time, this value will be set\
            \ to zero."
          format: int64
          type: integer
      required:
      - creationTimestamp
      - id
      - leaderboardEpoch
      - profile
      type: object
    RankRow:
      properties:
        id:
          description: The ID of the Score
          type: string
        position:
          description: The position of the associated score in the result set.
          format: int64
          type: integer
        pointValue:
          description: The point value of the score.
          format: double
          type: number
        scoreUnits:
          description: "The the units of measure for the points.  For example, if\
            \ the points in the game were called \"coins\" instead of \"points\" this\
            \ would be used to designate as such in the UI."
          type: string
        creationTimestamp:
          description: The time at which the score was created on the server.
          format: int64
          type: integer
        leaderboardEpoch:
          description: "The epoch to which the score belongs for the associated leaderboard.\
            \ By convention, if the leaderboard is all-time, this value will be set\
            \ to zero."
          format: int64
          type: integer
        profileId:
          description: The profile ID of the user who holds this rank.
          type: string
        profileDisplayName:
          description: The profile display name of the user who holds this rank.
          type: string
        profileImageUrl:
          description: The profile image url of the user who holds this rank.
          type: string
        lastLogin:
          description: The last login.
          format: int64
          type: integer
      required:
      - lastLogin
      - profileDisplayName
      - profileId
      - profileImageUrl
      type: object
    TabulationRankRow:
      properties:
        rows:
          items:
            $ref: "#/components/schemas/RankRow"
          type: array
      required:
      - rows
      type: object
    Match:
      description: "Represents a single one-on-one match between the current player\
        \ and an opponent.  Once matched, the player will will be able to create a\
        \ game against the supplied opposing player.  The server may modify or delete\
        \ matches based on a variety of circumstances."
      example:
        gameId: gameId
        lastUpdatedTimestamp: 1
        metadata:
          key: "{}"
        scheme: scheme
        scope: scope
        opponent:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        id: id
        player:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
      properties:
        id:
          description: The unique ID of the match.
          type: string
        scheme:
          description: The scheme to use when matching with other players.
          type: string
        scope:
          description: "An optional scope for the match.  For example, if the match\
            \ were part of a tournament, it could be scoped to the unique ID of the\
            \ tournament."
          type: string
        player:
          $ref: "#/components/schemas/Profile"
        opponent:
          $ref: "#/components/schemas/Profile"
        lastUpdatedTimestamp:
          description: The time of the last modification of the match.
          format: int64
          type: integer
        gameId:
          description: The system-assigned game ID of the match.  Null until the match
            is successfully made.
          type: string
        metadata:
          additionalProperties:
            description: Additional arbitrary metadata that is attached to the match.
            type: object
          description: Additional arbitrary metadata that is attached to the match.
          type: object
      required:
      - player
      - scheme
      type: object
    PaginationMatch:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - gameId: gameId
          lastUpdatedTimestamp: 1
          metadata:
            key: "{}"
          scheme: scheme
          scope: scope
          opponent:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          player:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
        - gameId: gameId
          lastUpdatedTimestamp: 1
          metadata:
            key: "{}"
          scheme: scheme
          scope: scope
          opponent:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          player:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Match"
          type: array
      type: object
    MultiMatch:
      description: Represents a multi-match in the matchmaking system.
      example:
        metadata:
          key: "{}"
        configuration:
          parent:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          metadata:
            key: "{}"
          matchmaker:
            serviceType: serviceType
            serviceName: serviceName
            elementName: elementName
          success:
            method: method
            service:
              serviceType: serviceType
              serviceName: serviceName
              elementName: elementName
          name: name
          description: description
          timeoutSeconds: 1
          id: id
          maxProfiles: 0
          type: type
          lingerSeconds: 6
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        created: 5
        count: 1
        id: id
        expiry: 5
        status: OPEN
      properties:
        id:
          description: The unique ID of the match.
          type: string
        status:
          description: The status of the match.
          enum:
          - OPEN
          - FULL
          - CLOSED
          - ENDED
          type: string
        configuration:
          $ref: "#/components/schemas/MatchmakingApplicationConfiguration"
        metadata:
          additionalProperties:
            description: "The metadata of hte multi-match, which can be used to store\
              \ additional information about the match."
            type: object
          description: "The metadata of hte multi-match, which can be used to store\
            \ additional information about the match."
          type: object
        count:
          description: The number of players currently in the match.
          format: int32
          type: integer
        expiry:
          description: "The expiry time of the match in seconds. If not set, the match\
            \ will not expire."
          format: int64
          type: integer
        created:
          description: "The timestamp at which the match was created, in milliseconds\
            \ since epoch."
          format: int64
          type: integer
      required:
      - configuration
      type: object
    PaginationMultiMatch:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - metadata:
            key: "{}"
          configuration:
            parent:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            metadata:
              key: "{}"
            matchmaker:
              serviceType: serviceType
              serviceName: serviceName
              elementName: elementName
            success:
              method: method
              service:
                serviceType: serviceType
                serviceName: serviceName
                elementName: elementName
            name: name
            description: description
            timeoutSeconds: 1
            id: id
            maxProfiles: 0
            type: type
            lingerSeconds: 6
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          created: 5
          count: 1
          id: id
          expiry: 5
          status: OPEN
        - metadata:
            key: "{}"
          configuration:
            parent:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            metadata:
              key: "{}"
            matchmaker:
              serviceType: serviceType
              serviceName: serviceName
              elementName: elementName
            success:
              method: method
              service:
                serviceType: serviceType
                serviceName: serviceName
                elementName: elementName
            name: name
            description: description
            timeoutSeconds: 1
            id: id
            maxProfiles: 0
            type: type
            lingerSeconds: 6
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          created: 5
          count: 1
          id: id
          expiry: 5
          status: OPEN
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/MultiMatch"
          type: array
      type: object
    Metadata:
      description: Represents a custom metadata object.
      example:
        metadata:
          key: "{}"
        accessLevel: UNPRIVILEGED
        name: name
        id: id
        metadataSpec:
          name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        id:
          description: The metadata object's database assigned unique ID.
          type: string
        name:
          description: A unique name for the metadata object.
          type: string
        metadata:
          additionalProperties:
            description: An object containing the metadata payload as key-value pairs.
            type: object
          description: An object containing the metadata payload as key-value pairs.
          type: object
        metadataSpec:
          $ref: "#/components/schemas/MetadataSpec"
        accessLevel:
          description: The minimum level of access required to view this metadata.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
      required:
      - accessLevel
      - id
      - metadata
      - name
      type: object
    CreateMetadataRequest:
      example:
        metadata:
          key: "{}"
        accessLevel: UNPRIVILEGED
        name: name
        metadataSpec:
          name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        name:
          description: A unique name for the metadata object.
          type: string
        metadata:
          additionalProperties:
            description: An object containing the metadata payload as key-value pairs.
            type: object
          description: An object containing the metadata payload as key-value pairs.
          type: object
        metadataSpec:
          $ref: "#/components/schemas/MetadataSpec"
        accessLevel:
          description: The minimum level of access required to view this metadata.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
      required:
      - name
      type: object
    PaginationMetadata:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - metadata:
            key: "{}"
          accessLevel: UNPRIVILEGED
          name: name
          id: id
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        - metadata:
            key: "{}"
          accessLevel: UNPRIVILEGED
          name: name
          id: id
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Metadata"
          type: array
      type: object
    UpdateMetadataRequest:
      example:
        metadata:
          key: "{}"
        accessLevel: UNPRIVILEGED
        metadataSpec:
          name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        metadata:
          additionalProperties:
            description: An object containing the metadata payload as key-value pairs.
            type: object
          description: An object containing the metadata payload as key-value pairs.
          type: object
        metadataSpec:
          $ref: "#/components/schemas/MetadataSpec"
        accessLevel:
          description: The minimum level of access required to view this metadata.
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
      type: object
    Mission:
      example:
        metadata:
          key: "{}"
        displayName: displayName
        finalRepeatStep:
          metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        name: name
        description: description
        id: id
        steps:
        - metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        - metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        tags:
        - tags
        - tags
      properties:
        id:
          description: The unique ID of the mission
          type: string
        name:
          description: The name of the mission
          type: string
        displayName:
          description: The display name for the mission
          type: string
        description:
          description: The description of the mission
          type: string
        tags:
          description: The tags used to categorize this mission
          items:
            description: The tags used to categorize this mission
            type: string
          type: array
        steps:
          description: The steps that constitute the mission (may be null if finalRepeatStep
            is specified)
          items:
            $ref: "#/components/schemas/Step"
          type: array
        finalRepeatStep:
          $ref: "#/components/schemas/Step"
        metadata:
          additionalProperties:
            description: The metadata for this mission
            type: object
          description: The metadata for this mission
          type: object
      required:
      - description
      - displayName
      - id
      - name
      type: object
    Reward:
      description: The reward(s) that will be granted upon completion
      example:
        item:
          metadata:
            key: "{}"
          publicVisible: true
          displayName: displayName
          name: name
          description: description
          id: id
          category: FUNGIBLE
          tags:
          - tags
          - tags
          metadataSpec:
            name: name
            id: id
            type: STRING
            properties:
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
            - displayName: displayName
              defaultValue: "{}"
              name: name
              placeholder: placeholder
              type: STRING
              required: true
              properties:
              - null
              - null
        metadata:
          key: "{}"
        quantity: 5
      properties:
        item:
          $ref: "#/components/schemas/Item"
        quantity:
          description: The quantity of the Item that is rewarded
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: object
          type: object
      required:
      - item
      - quantity
      type: object
    Step:
      description: The final repeating step (may be null if step(s) are specified)
      example:
        metadata:
          key: "{}"
        displayName: displayName
        count: 1
        description: description
        rewards:
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          quantity: 5
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          quantity: 5
      properties:
        displayName:
          description: The display name for the step
          type: string
        description:
          description: The description of the step
          type: string
        count:
          description: The number of times the step must be completed to receive the
            reward(s)
          format: int32
          type: integer
        rewards:
          description: The reward(s) that will be granted upon completion
          items:
            $ref: "#/components/schemas/Reward"
          type: array
        metadata:
          additionalProperties:
            description: The metadata for this step
            type: object
          description: The metadata for this step
          type: object
      required:
      - count
      - description
      - displayName
      - rewards
      type: object
    PaginationMission:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - metadata:
            key: "{}"
          displayName: displayName
          finalRepeatStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          name: name
          description: description
          id: id
          steps:
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          tags:
          - tags
          - tags
        - metadata:
            key: "{}"
          displayName: displayName
          finalRepeatStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          name: name
          description: description
          id: id
          steps:
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          tags:
          - tags
          - tags
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Mission"
          type: array
      type: object
    Progress:
      example:
        currentStep:
          metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        sequence: 6
        mission:
          metadata:
            key: "{}"
          displayName: displayName
          finalRepeatStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          name: name
          description: description
          id: id
          steps:
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          tags:
          - tags
          - tags
        profile:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        rewardIssuances:
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          itemQuantity: 0
          context: context
          expirationTimestamp: 6
          id: id
          state: ISSUED
          source: source
          type: PERSISTENT
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          uuid: uuid
          tags:
          - tags
          - tags
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          itemQuantity: 0
          context: context
          expirationTimestamp: 6
          id: id
          state: ISSUED
          source: source
          type: PERSISTENT
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          uuid: uuid
          tags:
          - tags
          - tags
        schedules:
        - displayName: displayName
          name: name
          description: description
          id: id
        - displayName: displayName
          name: name
          description: description
          id: id
        managedBySchedule: true
        scheduleEvents:
        - schedule:
            displayName: displayName
            name: name
            description: description
            id: id
          missions:
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          end: 5
          id: id
          begin: 1
        - schedule:
            displayName: displayName
            name: name
            description: description
            id: id
          missions:
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          end: 5
          id: id
          begin: 1
        id: id
        remaining: 0
      properties:
        id:
          description: The unique ID of the progress instance
          type: string
        profile:
          $ref: "#/components/schemas/Profile"
        currentStep:
          $ref: "#/components/schemas/Step"
        remaining:
          description: The remaining actions
          format: int32
          type: integer
        mission:
          $ref: "#/components/schemas/ProgressMissionInfo"
        rewardIssuances:
          description: "List of all reward issuances that are issued but not expired,\
            \ or redeemed but persistent."
          items:
            $ref: "#/components/schemas/RewardIssuance"
          type: array
        sequence:
          description: "The current number of completed steps. Note that this may\
            \ exceed the total number of steps, i.e. the final step may be repeated\
            \ infinitely."
          format: int32
          type: integer
        managedBySchedule:
          description: "Indicates that this progress is managed by a Schedule. If\
            \ true, the Progress will be deleted when no schedules have the progress\
            \ active. This will be true if the Progress was created as part of a Schedule."
          type: boolean
        schedules:
          description: A listing of the Schedules which are managing this Progress.
            Empty or null if the Progress is not managed as part of a Schedule.
          items:
            $ref: "#/components/schemas/Schedule"
          type: array
        scheduleEvents:
          description: A listing of ScheduleEvents which are managing this Progress.
            Empty or null if the Progress is not managed as part of a Schedule.
          items:
            $ref: "#/components/schemas/ScheduleEvent"
          type: array
      required:
      - id
      - mission
      - profile
      type: object
    ProgressMissionInfo:
      description: The mission
      example:
        metadata:
          key: "{}"
        displayName: displayName
        finalRepeatStep:
          metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        name: name
        description: description
        id: id
        steps:
        - metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        - metadata:
            key: "{}"
          displayName: displayName
          count: 1
          description: description
          rewards:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            quantity: 5
        tags:
        - tags
        - tags
      properties:
        id:
          description: The id of the mission
          type: string
        name:
          description: The name of the mission
          type: string
        displayName:
          description: The display name for the mission
          type: string
        description:
          description: The description of the mission
          type: string
        steps:
          description: The steps that constitute the mission (may be null if finalRepeatStep
            is specified)
          items:
            $ref: "#/components/schemas/Step"
          type: array
        finalRepeatStep:
          $ref: "#/components/schemas/Step"
        tags:
          description: The tags used to categorize this mission
          items:
            description: The tags used to categorize this mission
            type: string
          type: array
        metadata:
          additionalProperties:
            description: The metadata for this mission
            type: object
          description: The metadata for this mission
          type: object
      required:
      - description
      - displayName
      - id
      - name
      type: object
    Schedule:
      example:
        displayName: displayName
        name: name
        description: description
        id: id
      properties:
        id:
          description: The unique ID of the schedule.
          type: string
        name:
          description: The unique name of the schedule.
          type: string
        displayName:
          type: string
        description:
          description: The description for this schedule.
          type: string
      required:
      - description
      - displayName
      - id
      - name
      type: object
    ScheduleEvent:
      description: A listing of ScheduleEvents which are managing this Progress. Empty
        or null if the Progress is not managed as part of a Schedule.
      example:
        schedule:
          displayName: displayName
          name: name
          description: description
          id: id
        missions:
        - metadata:
            key: "{}"
          displayName: displayName
          finalRepeatStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          name: name
          description: description
          id: id
          steps:
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          tags:
          - tags
          - tags
        - metadata:
            key: "{}"
          displayName: displayName
          finalRepeatStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          name: name
          description: description
          id: id
          steps:
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          - metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          tags:
          - tags
          - tags
        end: 5
        id: id
        begin: 1
      properties:
        id:
          type: string
        begin:
          format: int64
          type: integer
        end:
          format: int64
          type: integer
        schedule:
          $ref: "#/components/schemas/Schedule"
        missions:
          items:
            $ref: "#/components/schemas/Mission"
          type: array
      required:
      - id
      - missions
      - schedule
      type: object
    PaginationProgress:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - currentStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          sequence: 6
          mission:
            metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          rewardIssuances:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            itemQuantity: 0
            context: context
            expirationTimestamp: 6
            id: id
            state: ISSUED
            source: source
            type: PERSISTENT
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            uuid: uuid
            tags:
            - tags
            - tags
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            itemQuantity: 0
            context: context
            expirationTimestamp: 6
            id: id
            state: ISSUED
            source: source
            type: PERSISTENT
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            uuid: uuid
            tags:
            - tags
            - tags
          schedules:
          - displayName: displayName
            name: name
            description: description
            id: id
          - displayName: displayName
            name: name
            description: description
            id: id
          managedBySchedule: true
          scheduleEvents:
          - schedule:
              displayName: displayName
              name: name
              description: description
              id: id
            missions:
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            end: 5
            id: id
            begin: 1
          - schedule:
              displayName: displayName
              name: name
              description: description
              id: id
            missions:
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            end: 5
            id: id
            begin: 1
          id: id
          remaining: 0
        - currentStep:
            metadata:
              key: "{}"
            displayName: displayName
            count: 1
            description: description
            rewards:
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
            - item:
                metadata:
                  key: "{}"
                publicVisible: true
                displayName: displayName
                name: name
                description: description
                id: id
                category: FUNGIBLE
                tags:
                - tags
                - tags
                metadataSpec:
                  name: name
                  id: id
                  type: STRING
                  properties:
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
                  - displayName: displayName
                    defaultValue: "{}"
                    name: name
                    placeholder: placeholder
                    type: STRING
                    required: true
                    properties:
                    - null
                    - null
              metadata:
                key: "{}"
              quantity: 5
          sequence: 6
          mission:
            metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          rewardIssuances:
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            itemQuantity: 0
            context: context
            expirationTimestamp: 6
            id: id
            state: ISSUED
            source: source
            type: PERSISTENT
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            uuid: uuid
            tags:
            - tags
            - tags
          - item:
              metadata:
                key: "{}"
              publicVisible: true
              displayName: displayName
              name: name
              description: description
              id: id
              category: FUNGIBLE
              tags:
              - tags
              - tags
              metadataSpec:
                name: name
                id: id
                type: STRING
                properties:
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
                - displayName: displayName
                  defaultValue: "{}"
                  name: name
                  placeholder: placeholder
                  type: STRING
                  required: true
                  properties:
                  - null
                  - null
            metadata:
              key: "{}"
            itemQuantity: 0
            context: context
            expirationTimestamp: 6
            id: id
            state: ISSUED
            source: source
            type: PERSISTENT
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            uuid: uuid
            tags:
            - tags
            - tags
          schedules:
          - displayName: displayName
            name: name
            description: description
            id: id
          - displayName: displayName
            name: name
            description: description
            id: id
          managedBySchedule: true
          scheduleEvents:
          - schedule:
              displayName: displayName
              name: name
              description: description
              id: id
            missions:
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            end: 5
            id: id
            begin: 1
          - schedule:
              displayName: displayName
              name: name
              description: description
              id: id
            missions:
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            - metadata:
                key: "{}"
              displayName: displayName
              finalRepeatStep:
                metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              name: name
              description: description
              id: id
              steps:
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              - metadata:
                  key: "{}"
                displayName: displayName
                count: 1
                description: description
                rewards:
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
                - item:
                    metadata:
                      key: "{}"
                    publicVisible: true
                    displayName: displayName
                    name: name
                    description: description
                    id: id
                    category: FUNGIBLE
                    tags:
                    - tags
                    - tags
                    metadataSpec:
                      name: name
                      id: id
                      type: STRING
                      properties:
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                      - displayName: displayName
                        defaultValue: "{}"
                        name: name
                        placeholder: placeholder
                        type: STRING
                        required: true
                        properties:
                        - null
                        - null
                  metadata:
                    key: "{}"
                  quantity: 5
              tags:
              - tags
              - tags
            end: 5
            id: id
            begin: 1
          id: id
          remaining: 0
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Progress"
          type: array
      type: object
    ProgressRow:
      properties:
        id:
          type: string
        profileId:
          type: string
        profileImageUrl:
          type: string
        profileDisplayName:
          type: string
        stepDisplayName:
          type: string
        stepDescription:
          type: string
        remaining:
          format: int32
          type: integer
        stepCount:
          format: int32
          type: integer
      type: object
    TabulationProgressRow:
      properties:
        rows:
          items:
            $ref: "#/components/schemas/ProgressRow"
          type: array
      required:
      - rows
      type: object
    PaginationRewardIssuance:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          itemQuantity: 0
          context: context
          expirationTimestamp: 6
          id: id
          state: ISSUED
          source: source
          type: PERSISTENT
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          uuid: uuid
          tags:
          - tags
          - tags
        - item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          itemQuantity: 0
          context: context
          expirationTimestamp: 6
          id: id
          state: ISSUED
          source: source
          type: PERSISTENT
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          uuid: uuid
          tags:
          - tags
          - tags
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/RewardIssuance"
          type: array
      type: object
    RewardIssuanceRedemptionResult:
      description: "Represents the result of a reward issuance redemption, housing\
        \ either the resultant RewardIssuance or the error details."
      example:
        inventoryItem:
          item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          quantity: 0
          id: id
          priority: 6
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
        rewardIssuanceId: rewardIssuanceId
        rewardIssuance:
          item:
            metadata:
              key: "{}"
            publicVisible: true
            displayName: displayName
            name: name
            description: description
            id: id
            category: FUNGIBLE
            tags:
            - tags
            - tags
            metadataSpec:
              name: name
              id: id
              type: STRING
              properties:
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
              - displayName: displayName
                defaultValue: "{}"
                name: name
                placeholder: placeholder
                type: STRING
                required: true
                properties:
                - null
                - null
          metadata:
            key: "{}"
          itemQuantity: 0
          context: context
          expirationTimestamp: 6
          id: id
          state: ISSUED
          source: source
          type: PERSISTENT
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          uuid: uuid
          tags:
          - tags
          - tags
        errorDetails: errorDetails
      properties:
        rewardIssuanceId:
          description: The id as originally provided in the request.
          type: string
        rewardIssuance:
          $ref: "#/components/schemas/RewardIssuance"
        inventoryItem:
          $ref: "#/components/schemas/InventoryItem"
        errorDetails:
          description: "Should the redemption fail, the error details. Otherwise,\
            \ null."
          type: string
      type: object
    CreateScheduleEventRequest:
      example:
        end: 6
        missionNamesOrIds:
        - missionNamesOrIds
        - missionNamesOrIds
        begin: 0
      properties:
        begin:
          format: int64
          type: integer
        end:
          format: int64
          type: integer
        missionNamesOrIds:
          items:
            type: string
          type: array
      required:
      - missionNamesOrIds
      type: object
    PaginationScheduleEvent:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - schedule:
            displayName: displayName
            name: name
            description: description
            id: id
          missions:
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          end: 5
          id: id
          begin: 1
        - schedule:
            displayName: displayName
            name: name
            description: description
            id: id
          missions:
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          - metadata:
              key: "{}"
            displayName: displayName
            finalRepeatStep:
              metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            name: name
            description: description
            id: id
            steps:
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            - metadata:
                key: "{}"
              displayName: displayName
              count: 1
              description: description
              rewards:
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
              - item:
                  metadata:
                    key: "{}"
                  publicVisible: true
                  displayName: displayName
                  name: name
                  description: description
                  id: id
                  category: FUNGIBLE
                  tags:
                  - tags
                  - tags
                  metadataSpec:
                    name: name
                    id: id
                    type: STRING
                    properties:
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                    - displayName: displayName
                      defaultValue: "{}"
                      name: name
                      placeholder: placeholder
                      type: STRING
                      required: true
                      properties:
                      - null
                      - null
                metadata:
                  key: "{}"
                quantity: 5
            tags:
            - tags
            - tags
          end: 5
          id: id
          begin: 1
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/ScheduleEvent"
          type: array
      type: object
    UpdateScheduleEventRequest:
      example:
        end: 6
        missionNamesOrIds:
        - missionNamesOrIds
        - missionNamesOrIds
        begin: 0
      properties:
        begin:
          format: int64
          type: integer
        end:
          format: int64
          type: integer
        missionNamesOrIds:
          items:
            type: string
          type: array
      required:
      - missionNamesOrIds
      type: object
    CreateScheduleRequest:
      example:
        displayName: displayName
        name: name
        description: description
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
      required:
      - description
      - displayName
      - name
      type: object
    PaginationSchedule:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - displayName: displayName
          name: name
          description: description
          id: id
        - displayName: displayName
          name: name
          description: description
          id: id
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/Schedule"
          type: array
      type: object
    UpdateScheduleRequest:
      example:
        displayName: displayName
        name: name
        description: description
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
      required:
      - description
      - displayName
      - name
      type: object
    FCMRegistration:
      description: Represents a Firebase Cloud Messaging Registration Token
      example:
        registrationToken: registrationToken
        profile:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        id: id
      properties:
        id:
          description: The the unique id of the token stored in the database.
          type: string
        registrationToken:
          description: The actual Firebase registration.
          type: string
        profile:
          $ref: "#/components/schemas/Profile"
      required:
      - registrationToken
      type: object
    CreateProfileRequest:
      description: Represents a request to create a profile for a user.
      example:
        metadata:
          key: "{}"
        displayName: displayName
        imageUrl: imageUrl
        applicationId: applicationId
        userId: userId
      properties:
        userId:
          description: The user id this profile belongs to.
          type: string
        applicationId:
          description: The application id this profile belongs to.
          type: string
        imageUrl:
          description: A URL to the image of the profile.  (ie the User's Avatar).
          type: string
        displayName:
          description: A non-unique display name for this profile.
          type: string
        metadata:
          additionalProperties:
            description: A map of arbitrary metadata.
            type: object
          description: A map of arbitrary metadata.
          type: object
      required:
      - applicationId
      - userId
      type: object
    UpdateProfileRequest:
      description: Represents a request to update a profile.
      example:
        metadata:
          key: "{}"
        displayName: displayName
        imageUrl: imageUrl
      properties:
        imageUrl:
          description: A URL to the image of the profile.  (ie the User's Avatar).
          type: string
        displayName:
          description: A non-unique display name for this profile.
          type: string
        metadata:
          additionalProperties:
            description: A map of arbitrary metadata.
            type: object
          description: A map of arbitrary metadata.
          type: object
      type: object
    UpdateProfileImageRequest:
      description: Represents a request to update an image profile.
      example:
        mimeType: mimeType
      properties:
        mimeType:
          description: MimeType of image
          type: string
      required:
      - mimeType
      type: object
    SaveDataDocument:
      description: Represents an arbitrary save data document that persists on the
        server. The document saves with a version identifier such that clients may
        resolve conflicts between the local copy and the remote copy.
      example:
        contents: contents
        profile:
          lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        id: id
        slot: 1
        user:
          firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        version: version
        timestamp: 5
      properties:
        id:
          description: The database assigned unique ID of the document.
          type: string
        slot:
          description: The slot of the property.
          format: int32
          type: integer
        user:
          $ref: "#/components/schemas/User"
        profile:
          $ref: "#/components/schemas/Profile"
        timestamp:
          description: The timestamp of the last write to this document.
          format: int64
          type: integer
        version:
          description: The revision of the save data document.
          type: string
        contents:
          description: The contents of the save data.
          type: string
      required:
      - contents
      - version
      type: object
    CreateSaveDataDocumentRequest:
      description: Used to create a save data document on the remote.
      example:
        contents: contents
        profileId: profileId
        slot: 0
        userId: userId
      properties:
        slot:
          description: The slot of the property. Must be unique for user or profile.
          format: int32
          type: integer
        userId:
          description: "The id of the user which owns the save data. If specified,\
            \ the user will own this save data and the profileId must be null or be\
            \ owned by the user specified."
          type: string
        profileId:
          description: "The id of the profile which owns the save data. If specified,\
            \ the profile will own this save data and the userId must be null or be\
            \ owned by the user specified."
          type: string
        contents:
          description: The contents of the save data.
          type: string
      required:
      - contents
      - slot
      type: object
    PaginationSaveDataDocument:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - contents: contents
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          slot: 1
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          version: version
          timestamp: 5
        - contents: contents
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          id: id
          slot: 1
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          version: version
          timestamp: 5
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/SaveDataDocument"
          type: array
      type: object
    UpdateSaveDataDocumentRequest:
      description: Updates a save data document. This accepts the contents of the
        document as well as the versioning information required to take the update
        properly.
      example:
        contents: contents
        force: true
        version: version
      properties:
        force:
          type: boolean
        version:
          type: string
        contents:
          type: string
      required:
      - contents
      type: object
    CreateMetadataSpecRequest:
      description: Represents a request to create a MetadataSpec definition.
      example:
        name: name
        type: STRING
        properties:
        - displayName: displayName
          defaultValue: "{}"
          name: name
          placeholder: placeholder
          type: STRING
          required: true
          properties:
          - null
          - null
        - displayName: displayName
          defaultValue: "{}"
          name: name
          placeholder: placeholder
          type: STRING
          required: true
          properties:
          - null
          - null
      properties:
        name:
          description: The name of the metadata spec.
          type: string
        type:
          description: The type of the metadata spec.
          enum:
          - STRING
          - NUMBER
          - BOOLEAN
          - ARRAY
          - ENUM
          - OBJECT
          - TAGS
          type: string
        properties:
          description: The token template tabs to create.
          items:
            $ref: "#/components/schemas/MetadataSpecProperty"
          type: array
      required:
      - properties
      type: object
    EditorLayout:
      description: Defines an editor layout element.
      example:
        placeholder: placeholder
        title: title
        key: key
      properties:
        key:
          type: string
        title:
          type: string
        placeholder:
          type: string
      type: object
    EditorSchema:
      description: "Defines an editor schema which contains a JSON Schema, layout,\
        \ and initial data for the editor."
      example:
        schema:
          get$schema: get$schema
          description: description
          title: title
          type: type
          get$id: get$id
          properties:
            key:
              description: description
              type: type
              title: title
              required:
              - required
              - required
          required:
          - required
          - required
        layout:
        - placeholder: placeholder
          title: title
          key: key
        - placeholder: placeholder
          title: title
          key: key
        data: "{}"
      properties:
        data:
          description: The data itself.
          type: object
        schema:
          $ref: "#/components/schemas/JsonSchema"
        layout:
          description: The editor layout.
          items:
            $ref: "#/components/schemas/EditorLayout"
          type: array
      type: object
    JsonSchema:
      description: A Subset of the JSON-Schema - https://json-schema.org/draft/2020-12/json-schema-core
      example:
        get$schema: get$schema
        description: description
        title: title
        type: type
        get$id: get$id
        properties:
          key:
            description: description
            type: type
            title: title
            required:
            - required
            - required
        required:
        - required
        - required
      properties:
        get$id:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        get$schema:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        title:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        description:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        type:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        properties:
          additionalProperties:
            $ref: "#/components/schemas/JsonSchemaProperty"
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: object
        required:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          items:
            description: See - https://json-schema.org/draft/2020-12/json-schema-core
            type: string
          type: array
      type: object
    JsonSchemaProperty:
      description: See - https://json-schema.org/draft/2020-12/json-schema-core
      example:
        description: description
        type: type
        title: title
        required:
        - required
        - required
      properties:
        type:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        title:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        description:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          type: string
        required:
          description: See - https://json-schema.org/draft/2020-12/json-schema-core
          items:
            description: See - https://json-schema.org/draft/2020-12/json-schema-core
            type: string
          type: array
      type: object
    PaginationMetadataSpec:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
        - name: name
          id: id
          type: STRING
          properties:
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
          - displayName: displayName
            defaultValue: "{}"
            name: name
            placeholder: placeholder
            type: STRING
            required: true
            properties:
            - null
            - null
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/MetadataSpec"
          type: array
      type: object
    UpdateMetadataSpecRequest:
      description: Represents a request to update a MetadataSpec.
      example:
        name: name
        type: STRING
        properties:
        - displayName: displayName
          defaultValue: "{}"
          name: name
          placeholder: placeholder
          type: STRING
          required: true
          properties:
          - null
          - null
        - displayName: displayName
          defaultValue: "{}"
          name: name
          placeholder: placeholder
          type: STRING
          required: true
          properties:
          - null
          - null
      properties:
        name:
          description: The name of the metadata spec.
          type: string
        type:
          description: The type of the metadata spec.
          enum:
          - STRING
          - NUMBER
          - BOOLEAN
          - ARRAY
          - ENUM
          - OBJECT
          - TAGS
          type: string
        properties:
          description: The updated list of properties.
          items:
            $ref: "#/components/schemas/MetadataSpecProperty"
          type: array
      type: object
    MockSessionCreation:
      description: The mock session creation.
      example:
        password: password
        userExpiresAt: 0
        session:
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          profile:
            lastLogin: 0
            metadata:
              key: "{}"
            application:
              httpDocumentationUiUrl: httpDocumentationUiUrl
              scriptRepoUrl: scriptRepoUrl
              name: name
              description: description
              httpDocumentationUrl: httpDocumentationUrl
              attributes:
                key: "{}"
              id: id
              applicationConfiguration: null
              gitBranch: gitBranch
              httpTunnelEndpointUrl: httpTunnelEndpointUrl
            displayName: displayName
            imageUrl: imageUrl
            id: id
            user:
              firstName: firstName
              lastName: lastName
              primaryPhoneNb: primaryPhoneNb
              level: UNPRIVILEGED
              name: name
              linkedAccounts:
              - linkedAccounts
              - linkedAccounts
              id: id
              email: email
            imageObject:
              id: id
              mimeType: mimeType
              state: EMPTY
              lastModified: 2000-01-23T04:56:07.000+00:00
              url: url
          expiry: 6
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
        sessionSecret: sessionSecret
      properties:
        sessionSecret:
          description: The Session Secret to pass to subsequent requests through headers.
          type: string
        session:
          $ref: "#/components/schemas/Session"
        userExpiresAt:
          description: The assocaited mock user will automatically be deleted at supplied
            time.
          format: int64
          type: integer
        password:
          description: The randomly-assigned password for the mock user.
          type: string
      type: object
    MockSessionRequest:
      description: Used to create a mock session with the server.  This will create
        a temporary user as well which will exist for a short period of time
      example:
        application:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        lifetimeInSeconds: 0
      properties:
        lifetimeInSeconds:
          description: "The lifetime of the user in seconds.  After this amount of\
            \ time, "
          format: int32
          type: integer
        application:
          $ref: "#/components/schemas/Application"
      type: object
    UsernamePasswordSessionRequest:
      example:
        password: password
        profileId: profileId
        profileSelector: profileSelector
        userId: userId
      properties:
        userId:
          description: The user ID.
          type: string
        password:
          description: The password.
          type: string
        profileId:
          description: The profile ID to assign to the session.
          type: string
        profileSelector:
          description: A query string to select the profile to use.
          type: string
      required:
      - password
      - userId
      type: object
    ApplicationStatus:
      example:
        uris:
        - https://openapi-generator.tech
        - https://openapi-generator.tech
        application:
          httpDocumentationUiUrl: httpDocumentationUiUrl
          scriptRepoUrl: scriptRepoUrl
          name: name
          description: description
          httpDocumentationUrl: httpDocumentationUrl
          attributes:
            key: "{}"
          id: id
          applicationConfiguration: null
          gitBranch: gitBranch
          httpTunnelEndpointUrl: httpTunnelEndpointUrl
        elements:
        - defaultAttributes:
          - name: name
            value: value
          - name: name
            value: value
          definition:
            additionalPackages:
            - name: name
              recursive: true
            - name: name
              recursive: true
            loader: loader
            name: name
            recursive: true
          producedEvents:
          - name: name
            description: description
          - name: name
            description: description
          attributes:
            key: "{}"
          services:
          - implementation:
              default: true
              expose: true
            export:
              named: true
              name: name
          - implementation:
              default: true
              expose: true
            export:
              named: true
              name: name
          type: ISOLATED_CLASSPATH
          consumedEvents:
          - directDispatch: true
            method:
              declaredAnnotations:
              - "{}"
              - "{}"
              accessible: true
              annotatedReturnType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              parameterCount: 6
              defaultValue: "{}"
              annotations:
              - "{}"
              - "{}"
              modifiers: 0
              typeParameters:
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              varArgs: true
              synthetic: true
              genericParameterTypes:
              - typeName: typeName
              - typeName: typeName
              default: true
              name: name
              genericReturnType:
                typeName: typeName
              annotatedReceiverType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              genericExceptionTypes:
              - typeName: typeName
              - typeName: typeName
              parameterAnnotations:
              - - "{}"
                - "{}"
              - - "{}"
                - "{}"
              bridge: true
              parameters:
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              annotatedExceptionTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              annotatedParameterTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            eventKey:
              eventName: eventName
              serviceKey:
                named: true
                name: name
          - directDispatch: true
            method:
              declaredAnnotations:
              - "{}"
              - "{}"
              accessible: true
              annotatedReturnType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              parameterCount: 6
              defaultValue: "{}"
              annotations:
              - "{}"
              - "{}"
              modifiers: 0
              typeParameters:
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              varArgs: true
              synthetic: true
              genericParameterTypes:
              - typeName: typeName
              - typeName: typeName
              default: true
              name: name
              genericReturnType:
                typeName: typeName
              annotatedReceiverType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              genericExceptionTypes:
              - typeName: typeName
              - typeName: typeName
              parameterAnnotations:
              - - "{}"
                - "{}"
              - - "{}"
                - "{}"
              bridge: true
              parameters:
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              annotatedExceptionTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              annotatedParameterTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            eventKey:
              eventName: eventName
              serviceKey:
                named: true
                name: name
          dependencies:
          - dependency: "{}"
            selector: "{}"
          - dependency: "{}"
            selector: "{}"
        - defaultAttributes:
          - name: name
            value: value
          - name: name
            value: value
          definition:
            additionalPackages:
            - name: name
              recursive: true
            - name: name
              recursive: true
            loader: loader
            name: name
            recursive: true
          producedEvents:
          - name: name
            description: description
          - name: name
            description: description
          attributes:
            key: "{}"
          services:
          - implementation:
              default: true
              expose: true
            export:
              named: true
              name: name
          - implementation:
              default: true
              expose: true
            export:
              named: true
              name: name
          type: ISOLATED_CLASSPATH
          consumedEvents:
          - directDispatch: true
            method:
              declaredAnnotations:
              - "{}"
              - "{}"
              accessible: true
              annotatedReturnType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              parameterCount: 6
              defaultValue: "{}"
              annotations:
              - "{}"
              - "{}"
              modifiers: 0
              typeParameters:
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              varArgs: true
              synthetic: true
              genericParameterTypes:
              - typeName: typeName
              - typeName: typeName
              default: true
              name: name
              genericReturnType:
                typeName: typeName
              annotatedReceiverType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              genericExceptionTypes:
              - typeName: typeName
              - typeName: typeName
              parameterAnnotations:
              - - "{}"
                - "{}"
              - - "{}"
                - "{}"
              bridge: true
              parameters:
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              annotatedExceptionTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              annotatedParameterTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            eventKey:
              eventName: eventName
              serviceKey:
                named: true
                name: name
          - directDispatch: true
            method:
              declaredAnnotations:
              - "{}"
              - "{}"
              accessible: true
              annotatedReturnType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              parameterCount: 6
              defaultValue: "{}"
              annotations:
              - "{}"
              - "{}"
              modifiers: 0
              typeParameters:
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              varArgs: true
              synthetic: true
              genericParameterTypes:
              - typeName: typeName
              - typeName: typeName
              default: true
              name: name
              genericReturnType:
                typeName: typeName
              annotatedReceiverType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              genericExceptionTypes:
              - typeName: typeName
              - typeName: typeName
              parameterAnnotations:
              - - "{}"
                - "{}"
              - - "{}"
                - "{}"
              bridge: true
              parameters:
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              - synthetic: true
                declaredAnnotations:
                - "{}"
                - "{}"
                implicit: true
                namePresent: true
                annotatedType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                name: name
                annotations:
                - "{}"
                - "{}"
                declaringExecutable:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  accessible: true
                  annotatedReturnType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  parameterCount: 5
                  annotations:
                  - "{}"
                  - "{}"
                  modifiers: 5
                  typeParameters:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    name: name
                    bounds:
                    - typeName: typeName
                    - typeName: typeName
                    typeName: typeName
                    genericDeclaration: "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    annotatedBounds:
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                    - declaredAnnotations:
                      - "{}"
                      - "{}"
                      annotations:
                      - "{}"
                      - "{}"
                      type:
                        typeName: typeName
                  varArgs: true
                  synthetic: true
                  genericParameterTypes:
                  - typeName: typeName
                  - typeName: typeName
                  name: name
                  annotatedReceiverType:
                    declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  genericExceptionTypes:
                  - typeName: typeName
                  - typeName: typeName
                  parameterAnnotations:
                  - - "{}"
                    - "{}"
                  - - "{}"
                    - "{}"
                  annotatedExceptionTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  annotatedParameterTypes:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                modifiers: 1
                parameterizedType:
                  typeName: typeName
                varArgs: true
              annotatedExceptionTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              annotatedParameterTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            eventKey:
              eventName: eventName
              serviceKey:
                named: true
                name: name
          dependencies:
          - dependency: "{}"
            selector: "{}"
          - dependency: "{}"
            selector: "{}"
        logs:
        - logs
        - logs
        status: status
      properties:
        application:
          $ref: "#/components/schemas/Application"
        status:
          type: string
        uris:
          items:
            format: uri
            type: string
          type: array
          uniqueItems: true
        logs:
          items:
            type: string
          type: array
        elements:
          items:
            $ref: "#/components/schemas/ElementMetadata"
          type: array
      type: object
    ElementDefaultAttributeRecord:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    ElementDefinitionMetadata:
      example:
        additionalPackages:
        - name: name
          recursive: true
        - name: name
          recursive: true
        loader: loader
        name: name
        recursive: true
      properties:
        name:
          type: string
        recursive:
          type: boolean
        additionalPackages:
          items:
            $ref: "#/components/schemas/ElementPackageRecord"
          type: array
        loader:
          type: string
      type: object
    ElementDependency:
      type: object
    ElementDependencyRecord:
      example:
        dependency: "{}"
        selector: "{}"
      properties:
        dependency:
          type: object
        selector:
          type: object
      type: object
    ElementEventConsumerRecordObject:
      example:
        directDispatch: true
        method:
          declaredAnnotations:
          - "{}"
          - "{}"
          accessible: true
          annotatedReturnType:
            declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          parameterCount: 6
          defaultValue: "{}"
          annotations:
          - "{}"
          - "{}"
          modifiers: 0
          typeParameters:
          - declaredAnnotations:
            - "{}"
            - "{}"
            name: name
            bounds:
            - typeName: typeName
            - typeName: typeName
            typeName: typeName
            annotations:
            - "{}"
            - "{}"
            annotatedBounds:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            name: name
            bounds:
            - typeName: typeName
            - typeName: typeName
            typeName: typeName
            annotations:
            - "{}"
            - "{}"
            annotatedBounds:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          varArgs: true
          synthetic: true
          genericParameterTypes:
          - typeName: typeName
          - typeName: typeName
          default: true
          name: name
          genericReturnType:
            typeName: typeName
          annotatedReceiverType:
            declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          genericExceptionTypes:
          - typeName: typeName
          - typeName: typeName
          parameterAnnotations:
          - - "{}"
            - "{}"
          - - "{}"
            - "{}"
          bridge: true
          parameters:
          - synthetic: true
            declaredAnnotations:
            - "{}"
            - "{}"
            implicit: true
            namePresent: true
            annotatedType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            name: name
            annotations:
            - "{}"
            - "{}"
            declaringExecutable:
              declaredAnnotations:
              - "{}"
              - "{}"
              accessible: true
              annotatedReturnType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              parameterCount: 5
              annotations:
              - "{}"
              - "{}"
              modifiers: 5
              typeParameters:
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                genericDeclaration: "{}"
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                genericDeclaration: "{}"
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              varArgs: true
              synthetic: true
              genericParameterTypes:
              - typeName: typeName
              - typeName: typeName
              name: name
              annotatedReceiverType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              genericExceptionTypes:
              - typeName: typeName
              - typeName: typeName
              parameterAnnotations:
              - - "{}"
                - "{}"
              - - "{}"
                - "{}"
              annotatedExceptionTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              annotatedParameterTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            modifiers: 1
            parameterizedType:
              typeName: typeName
            varArgs: true
          - synthetic: true
            declaredAnnotations:
            - "{}"
            - "{}"
            implicit: true
            namePresent: true
            annotatedType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            name: name
            annotations:
            - "{}"
            - "{}"
            declaringExecutable:
              declaredAnnotations:
              - "{}"
              - "{}"
              accessible: true
              annotatedReturnType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              parameterCount: 5
              annotations:
              - "{}"
              - "{}"
              modifiers: 5
              typeParameters:
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                genericDeclaration: "{}"
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                name: name
                bounds:
                - typeName: typeName
                - typeName: typeName
                typeName: typeName
                genericDeclaration: "{}"
                annotations:
                - "{}"
                - "{}"
                annotatedBounds:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              varArgs: true
              synthetic: true
              genericParameterTypes:
              - typeName: typeName
              - typeName: typeName
              name: name
              annotatedReceiverType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              genericExceptionTypes:
              - typeName: typeName
              - typeName: typeName
              parameterAnnotations:
              - - "{}"
                - "{}"
              - - "{}"
                - "{}"
              annotatedExceptionTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              annotatedParameterTypes:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            modifiers: 1
            parameterizedType:
              typeName: typeName
            varArgs: true
          annotatedExceptionTypes:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          annotatedParameterTypes:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
        eventKey:
          eventName: eventName
          serviceKey:
            named: true
            name: name
      properties:
        eventKey:
          $ref: "#/components/schemas/ElementEventKeyObject"
        method:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method"
        directDispatch:
          type: boolean
      type: object
    ElementEventKeyObject:
      example:
        eventName: eventName
        serviceKey:
          named: true
          name: name
      properties:
        serviceKey:
          $ref: "#/components/schemas/ElementServiceKeyObject"
        eventName:
          type: string
      type: object
    ElementEventProducerRecord:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      type: object
    ElementMetadata:
      example:
        defaultAttributes:
        - name: name
          value: value
        - name: name
          value: value
        definition:
          additionalPackages:
          - name: name
            recursive: true
          - name: name
            recursive: true
          loader: loader
          name: name
          recursive: true
        producedEvents:
        - name: name
          description: description
        - name: name
          description: description
        attributes:
          key: "{}"
        services:
        - implementation:
            default: true
            expose: true
          export:
            named: true
            name: name
        - implementation:
            default: true
            expose: true
          export:
            named: true
            name: name
        type: ISOLATED_CLASSPATH
        consumedEvents:
        - directDispatch: true
          method:
            declaredAnnotations:
            - "{}"
            - "{}"
            accessible: true
            annotatedReturnType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            parameterCount: 6
            defaultValue: "{}"
            annotations:
            - "{}"
            - "{}"
            modifiers: 0
            typeParameters:
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            varArgs: true
            synthetic: true
            genericParameterTypes:
            - typeName: typeName
            - typeName: typeName
            default: true
            name: name
            genericReturnType:
              typeName: typeName
            annotatedReceiverType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            genericExceptionTypes:
            - typeName: typeName
            - typeName: typeName
            parameterAnnotations:
            - - "{}"
              - "{}"
            - - "{}"
              - "{}"
            bridge: true
            parameters:
            - synthetic: true
              declaredAnnotations:
              - "{}"
              - "{}"
              implicit: true
              namePresent: true
              annotatedType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              name: name
              annotations:
              - "{}"
              - "{}"
              declaringExecutable:
                declaredAnnotations:
                - "{}"
                - "{}"
                accessible: true
                annotatedReturnType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                parameterCount: 5
                annotations:
                - "{}"
                - "{}"
                modifiers: 5
                typeParameters:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                varArgs: true
                synthetic: true
                genericParameterTypes:
                - typeName: typeName
                - typeName: typeName
                name: name
                annotatedReceiverType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                genericExceptionTypes:
                - typeName: typeName
                - typeName: typeName
                parameterAnnotations:
                - - "{}"
                  - "{}"
                - - "{}"
                  - "{}"
                annotatedExceptionTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                annotatedParameterTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              modifiers: 1
              parameterizedType:
                typeName: typeName
              varArgs: true
            - synthetic: true
              declaredAnnotations:
              - "{}"
              - "{}"
              implicit: true
              namePresent: true
              annotatedType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              name: name
              annotations:
              - "{}"
              - "{}"
              declaringExecutable:
                declaredAnnotations:
                - "{}"
                - "{}"
                accessible: true
                annotatedReturnType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                parameterCount: 5
                annotations:
                - "{}"
                - "{}"
                modifiers: 5
                typeParameters:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                varArgs: true
                synthetic: true
                genericParameterTypes:
                - typeName: typeName
                - typeName: typeName
                name: name
                annotatedReceiverType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                genericExceptionTypes:
                - typeName: typeName
                - typeName: typeName
                parameterAnnotations:
                - - "{}"
                  - "{}"
                - - "{}"
                  - "{}"
                annotatedExceptionTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                annotatedParameterTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              modifiers: 1
              parameterizedType:
                typeName: typeName
              varArgs: true
            annotatedExceptionTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            annotatedParameterTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          eventKey:
            eventName: eventName
            serviceKey:
              named: true
              name: name
        - directDispatch: true
          method:
            declaredAnnotations:
            - "{}"
            - "{}"
            accessible: true
            annotatedReturnType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            parameterCount: 6
            defaultValue: "{}"
            annotations:
            - "{}"
            - "{}"
            modifiers: 0
            typeParameters:
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            varArgs: true
            synthetic: true
            genericParameterTypes:
            - typeName: typeName
            - typeName: typeName
            default: true
            name: name
            genericReturnType:
              typeName: typeName
            annotatedReceiverType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            genericExceptionTypes:
            - typeName: typeName
            - typeName: typeName
            parameterAnnotations:
            - - "{}"
              - "{}"
            - - "{}"
              - "{}"
            bridge: true
            parameters:
            - synthetic: true
              declaredAnnotations:
              - "{}"
              - "{}"
              implicit: true
              namePresent: true
              annotatedType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              name: name
              annotations:
              - "{}"
              - "{}"
              declaringExecutable:
                declaredAnnotations:
                - "{}"
                - "{}"
                accessible: true
                annotatedReturnType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                parameterCount: 5
                annotations:
                - "{}"
                - "{}"
                modifiers: 5
                typeParameters:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                varArgs: true
                synthetic: true
                genericParameterTypes:
                - typeName: typeName
                - typeName: typeName
                name: name
                annotatedReceiverType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                genericExceptionTypes:
                - typeName: typeName
                - typeName: typeName
                parameterAnnotations:
                - - "{}"
                  - "{}"
                - - "{}"
                  - "{}"
                annotatedExceptionTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                annotatedParameterTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              modifiers: 1
              parameterizedType:
                typeName: typeName
              varArgs: true
            - synthetic: true
              declaredAnnotations:
              - "{}"
              - "{}"
              implicit: true
              namePresent: true
              annotatedType:
                declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              name: name
              annotations:
              - "{}"
              - "{}"
              declaringExecutable:
                declaredAnnotations:
                - "{}"
                - "{}"
                accessible: true
                annotatedReturnType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                parameterCount: 5
                annotations:
                - "{}"
                - "{}"
                modifiers: 5
                typeParameters:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  name: name
                  bounds:
                  - typeName: typeName
                  - typeName: typeName
                  typeName: typeName
                  genericDeclaration: "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  annotatedBounds:
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                  - declaredAnnotations:
                    - "{}"
                    - "{}"
                    annotations:
                    - "{}"
                    - "{}"
                    type:
                      typeName: typeName
                varArgs: true
                synthetic: true
                genericParameterTypes:
                - typeName: typeName
                - typeName: typeName
                name: name
                annotatedReceiverType:
                  declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                genericExceptionTypes:
                - typeName: typeName
                - typeName: typeName
                parameterAnnotations:
                - - "{}"
                  - "{}"
                - - "{}"
                  - "{}"
                annotatedExceptionTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                annotatedParameterTypes:
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
                - declaredAnnotations:
                  - "{}"
                  - "{}"
                  annotations:
                  - "{}"
                  - "{}"
                  type:
                    typeName: typeName
              modifiers: 1
              parameterizedType:
                typeName: typeName
              varArgs: true
            annotatedExceptionTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            annotatedParameterTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          eventKey:
            eventName: eventName
            serviceKey:
              named: true
              name: name
        dependencies:
        - dependency: "{}"
          selector: "{}"
        - dependency: "{}"
          selector: "{}"
      properties:
        type:
          enum:
          - ISOLATED_CLASSPATH
          - SHARED_CLASSPATH
          type: string
        definition:
          $ref: "#/components/schemas/ElementDefinitionMetadata"
        services:
          items:
            $ref: "#/components/schemas/ElementServiceRecord"
          type: array
        producedEvents:
          items:
            $ref: "#/components/schemas/ElementEventProducerRecord"
          type: array
        consumedEvents:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject"
          type: array
        dependencies:
          items:
            $ref: "#/components/schemas/ElementDependencyRecord"
          type: array
        attributes:
          additionalProperties:
            type: object
          type: object
        defaultAttributes:
          items:
            $ref: "#/components/schemas/ElementDefaultAttributeRecord"
          type: array
      type: object
    ElementPackageRecord:
      example:
        name: name
        recursive: true
      properties:
        name:
          type: string
        recursive:
          type: boolean
      type: object
    ElementServiceExportRecord:
      example:
        named: true
        name: name
      properties:
        name:
          type: string
        named:
          type: boolean
      type: object
    ElementServiceImplementationRecord:
      example:
        default: true
        expose: true
      properties:
        expose:
          type: boolean
        default:
          type: boolean
      type: object
    ElementServiceKeyObject:
      example:
        named: true
        name: name
      properties:
        name:
          type: string
        named:
          type: boolean
      type: object
    ElementServiceRecord:
      example:
        implementation:
          default: true
          expose: true
        export:
          named: true
          name: name
      properties:
        implementation:
          $ref: "#/components/schemas/ElementServiceImplementationRecord"
        export:
          $ref: "#/components/schemas/ElementServiceExportRecord"
      type: object
    DatabaseHealthStatus:
      example:
        metadata: metadata
        name: name
      properties:
        name:
          type: string
        metadata:
          type: string
      type: object
    DiscoveryHealthStatus:
      example:
        records:
        - records
        - records
        knownHosts:
        - knownHosts
        - knownHosts
      properties:
        records:
          items:
            type: string
          type: array
        knownHosts:
          items:
            type: string
          type: array
      type: object
    HealthStatus:
      example:
        overallHealth: 1.4658129805029452
        routingHealthStatus:
          instanceId: instanceId
          routingTable:
          - routingTable
          - routingTable
          masterNodeRoutingTable:
          - masterNodeRoutingTable
          - masterNodeRoutingTable
          applicationNodeRoutingTable:
          - applicationNodeRoutingTable
          - applicationNodeRoutingTable
        databaseStatus:
        - metadata: metadata
          name: name
        - metadata: metadata
          name: name
        checksPerformed: 6
        checksFailed: 0
        invokerHealthStatus:
          connectedPeers:
          - connectedPeers
          - connectedPeers
          priorities:
          - priorities
          - priorities
        discoveryHealthStatus:
          records:
          - records
          - records
          knownHosts:
          - knownHosts
          - knownHosts
        instanceStatus:
          nodeIds:
          - nodeIds
          - nodeIds
          instanceId: instanceId
        problems:
        - problems
        - problems
      properties:
        checksFailed:
          format: int32
          type: integer
        checksPerformed:
          format: int32
          type: integer
        overallHealth:
          format: double
          type: number
        problems:
          items:
            type: string
          type: array
        instanceStatus:
          $ref: "#/components/schemas/InstanceHealthStatus"
        databaseStatus:
          items:
            $ref: "#/components/schemas/DatabaseHealthStatus"
          type: array
        discoveryHealthStatus:
          $ref: "#/components/schemas/DiscoveryHealthStatus"
        routingHealthStatus:
          $ref: "#/components/schemas/RoutingHealthStatus"
        invokerHealthStatus:
          $ref: "#/components/schemas/InvokerHealthStatus"
      type: object
    InstanceHealthStatus:
      example:
        nodeIds:
        - nodeIds
        - nodeIds
        instanceId: instanceId
      properties:
        instanceId:
          type: string
        nodeIds:
          items:
            type: string
          type: array
      type: object
    InvokerHealthStatus:
      example:
        connectedPeers:
        - connectedPeers
        - connectedPeers
        priorities:
        - priorities
        - priorities
      properties:
        priorities:
          items:
            type: string
          type: array
        connectedPeers:
          items:
            type: string
          type: array
      type: object
    RoutingHealthStatus:
      example:
        instanceId: instanceId
        routingTable:
        - routingTable
        - routingTable
        masterNodeRoutingTable:
        - masterNodeRoutingTable
        - masterNodeRoutingTable
        applicationNodeRoutingTable:
        - applicationNodeRoutingTable
        - applicationNodeRoutingTable
      properties:
        instanceId:
          type: string
        routingTable:
          items:
            type: string
          type: array
        masterNodeRoutingTable:
          items:
            type: string
          type: array
        applicationNodeRoutingTable:
          items:
            type: string
          type: array
      type: object
    Version:
      example:
        version: version
        revision: revision
        timestamp: timestamp
      properties:
        version:
          type: string
        revision:
          type: string
        timestamp:
          type: string
      type: object
    UserCreateResponse:
      example:
        lastName: lastName
        level: UNPRIVILEGED
        facebookId: facebookId
        profiles:
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        - lastLogin: 0
          metadata:
            key: "{}"
          application:
            httpDocumentationUiUrl: httpDocumentationUiUrl
            scriptRepoUrl: scriptRepoUrl
            name: name
            description: description
            httpDocumentationUrl: httpDocumentationUrl
            attributes:
              key: "{}"
            id: id
            applicationConfiguration: null
            gitBranch: gitBranch
            httpTunnelEndpointUrl: httpTunnelEndpointUrl
          displayName: displayName
          imageUrl: imageUrl
          id: id
          user:
            firstName: firstName
            lastName: lastName
            primaryPhoneNb: primaryPhoneNb
            level: UNPRIVILEGED
            name: name
            linkedAccounts:
            - linkedAccounts
            - linkedAccounts
            id: id
            email: email
          imageObject:
            id: id
            mimeType: mimeType
            state: EMPTY
            lastModified: 2000-01-23T04:56:07.000+00:00
            url: url
        active: true
        firstName: firstName
        password: password
        primaryPhoneNb: primaryPhoneNb
        firebaseId: firebaseId
        name: name
        linkedAccounts:
        - linkedAccounts
        - linkedAccounts
        id: id
        appleSignInId: appleSignInId
        email: email
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        level:
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
        active:
          type: boolean
        facebookId:
          type: string
        firebaseId:
          type: string
        appleSignInId:
          type: string
        primaryPhoneNb:
          type: string
        profiles:
          items:
            $ref: "#/components/schemas/Profile"
          type: array
        password:
          type: string
        linkedAccounts:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    CreateProfileSignupRequest:
      description: Used in conjunction with the user creation request to specify.
      example:
        displayName: displayName
        imageUrl: imageUrl
        applicationId: applicationId
      properties:
        applicationId:
          description: The application id this profile belongs to.
          type: string
        displayName:
          description: "A non-unique display name for this profile. If left null,\
            \ the server will assign."
          type: string
        imageUrl:
          description: "A URL to the image of the profile.  (ie the User's Avatar).\
            \ If left null, the server will no assign any URL."
          type: string
      required:
      - applicationId
      type: object
    UserCreateRequest:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        primaryPhoneNb: primaryPhoneNb
        level: UNPRIVILEGED
        name: name
        profiles:
        - displayName: displayName
          imageUrl: imageUrl
          applicationId: applicationId
        - displayName: displayName
          imageUrl: imageUrl
          applicationId: applicationId
        email: email
      properties:
        name:
          type: string
        email:
          type: string
        primaryPhoneNb:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          description: "The user's plaintext password, only to be provided in POST/PUT\
            \ requests in the User Resource REST API interface. In the future, a dedicated\
            \ REST API model may be constructed instead of using a direct User model."
          type: string
        level:
          description: "The user's level to assign. Depending on the usage, the server\
            \ may ignore this field and assign its own description."
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
        profiles:
          description: A list of profiles to assign to this user during creation.
            The server will attempt to create a profile for each item in this list.
          items:
            $ref: "#/components/schemas/CreateProfileSignupRequest"
          type: array
      type: object
    PaginationUser:
      example:
        total: 6
        approximation: true
        offset: 0
        objects:
        - firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
        - firstName: firstName
          lastName: lastName
          primaryPhoneNb: primaryPhoneNb
          level: UNPRIVILEGED
          name: name
          linkedAccounts:
          - linkedAccounts
          - linkedAccounts
          id: id
          email: email
      properties:
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        approximation:
          type: boolean
        objects:
          items:
            $ref: "#/components/schemas/User"
          type: array
      type: object
    UserUpdateRequest:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        primaryPhoneNb: primaryPhoneNb
        level: UNPRIVILEGED
        name: name
        email: email
      properties:
        name:
          type: string
        email:
          type: string
        primaryPhoneNb:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          description: "The user's plaintext password, only to be provided in POST/PUT\
            \ requests in the User Resource REST API interface. In the future, a dedicated\
            \ REST API model may be constructed instead of using a direct User model."
          type: string
        level:
          enum:
          - UNPRIVILEGED
          - USER
          - SUPERUSER
          type: string
      required:
      - email
      - level
      - name
      type: object
    UserUpdatePasswordRequest:
      example:
        oldPassword: oldPassword
        profileId: profileId
        newPassword: newPassword
      properties:
        oldPassword:
          description: The user's current password.
          type: string
        newPassword:
          description: The user's updated password.
          type: string
        profileId:
          description: The user's profile id to assign the new session. Leave blank
            for no profile id.
          type: string
      required:
      - newPassword
      - oldPassword
      type: object
    ErrorResponse:
      example:
        code: code
        message: message
      properties:
        code:
          description: A machine readable code of the error.
          type: string
        message:
          description: "A description of the error. This error is not intended to\
            \ be displayed to the end-user, rather it is it designed to relay information\
            \ to the application developer."
          type: string
      type: object
    createLargeObject_request:
      properties:
        object:
          $ref: "#/components/schemas/FormDataBodyPart"
        metadata:
          $ref: "#/components/schemas/CreateLargeObjectRequest"
      type: object
    updateLargeObjectContents_request:
      properties:
        file:
          $ref: "#/components/schemas/FormDataContentDisposition"
      type: object
    ServletContext_classLoader_parent_unnamedModule_descriptor:
      properties:
        open:
          type: boolean
        automatic:
          type: boolean
      type: object
    ServletContext_classLoader_parent_unnamedModule:
      properties:
        name:
          type: string
        descriptor:
          $ref: "#/components/schemas/ServletContext_classLoader_parent_unnamedModule_descriptor"
        named:
          type: boolean
        annotations:
          items:
            type: object
          type: array
        declaredAnnotations:
          items:
            type: object
          type: array
        packages:
          items:
            type: string
          type: array
          uniqueItems: true
        nativeAccessEnabled:
          type: boolean
        layer:
          type: object
      type: object
    ServletContext_classLoader_parent_definedPackages_inner:
      properties:
        name:
          type: string
        annotations:
          items:
            type: object
          type: array
        declaredAnnotations:
          items:
            type: object
          type: array
        sealed:
          type: boolean
        specificationTitle:
          type: string
        specificationVersion:
          type: string
        specificationVendor:
          type: string
        implementationTitle:
          type: string
        implementationVersion:
          type: string
        implementationVendor:
          type: string
      type: object
    ServletContext_classLoader_parent:
      properties:
        name:
          type: string
        registeredAsParallelCapable:
          type: boolean
        unnamedModule:
          $ref: "#/components/schemas/ServletContext_classLoader_parent_unnamedModule"
        definedPackages:
          items:
            $ref: "#/components/schemas/ServletContext_classLoader_parent_definedPackages_inner"
          type: array
        defaultAssertionStatus:
          type: boolean
          writeOnly: true
      type: object
    ServletContext_classLoader:
      properties:
        name:
          type: string
        registeredAsParallelCapable:
          type: boolean
        parent:
          $ref: "#/components/schemas/ServletContext_classLoader_parent"
        unnamedModule:
          $ref: "#/components/schemas/ServletContext_classLoader_parent_unnamedModule"
        definedPackages:
          items:
            $ref: "#/components/schemas/ServletContext_classLoader_parent_definedPackages_inner"
          type: array
        defaultAssertionStatus:
          type: boolean
          writeOnly: true
      type: object
    BodyPart_headers:
      additionalProperties:
        items:
          type: string
        type: array
      properties:
        empty:
          type: boolean
      type: object
    BodyPart_parameterizedHeaders:
      additionalProperties:
        items:
          $ref: "#/components/schemas/ParameterizedHeader"
        type: array
      properties:
        empty:
          type: boolean
      type: object
    ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner:
      example:
        typeName: typeName
      properties:
        typeName:
          type: string
      type: object
    ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner:
      example:
        declaredAnnotations:
        - "{}"
        - "{}"
        annotations:
        - "{}"
        - "{}"
        type:
          typeName: typeName
      properties:
        annotations:
          items:
            type: object
          type: array
        declaredAnnotations:
          items:
            type: object
          type: array
        type:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
      type: object
    ElementEventConsumerRecordObject_method_typeParameters_inner:
      example:
        declaredAnnotations:
        - "{}"
        - "{}"
        name: name
        bounds:
        - typeName: typeName
        - typeName: typeName
        typeName: typeName
        annotations:
        - "{}"
        - "{}"
        annotatedBounds:
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
      properties:
        name:
          type: string
        bounds:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
          type: array
        annotatedBounds:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
          type: array
        typeName:
          type: string
        annotations:
          items:
            type: object
          type: array
        declaredAnnotations:
          items:
            type: object
          type: array
      type: object
    ElementEventConsumerRecordObject_method_parameters_inner_declaringExecutable_typeParameters_inner:
      example:
        declaredAnnotations:
        - "{}"
        - "{}"
        name: name
        bounds:
        - typeName: typeName
        - typeName: typeName
        typeName: typeName
        genericDeclaration: "{}"
        annotations:
        - "{}"
        - "{}"
        annotatedBounds:
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
      properties:
        name:
          type: string
        bounds:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
          type: array
        genericDeclaration:
          type: object
        annotatedBounds:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
          type: array
        typeName:
          type: string
        annotations:
          items:
            type: object
          type: array
        declaredAnnotations:
          items:
            type: object
          type: array
      type: object
    ElementEventConsumerRecordObject_method_parameters_inner_declaringExecutable:
      example:
        declaredAnnotations:
        - "{}"
        - "{}"
        accessible: true
        annotatedReturnType:
          declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        parameterCount: 5
        annotations:
        - "{}"
        - "{}"
        modifiers: 5
        typeParameters:
        - declaredAnnotations:
          - "{}"
          - "{}"
          name: name
          bounds:
          - typeName: typeName
          - typeName: typeName
          typeName: typeName
          genericDeclaration: "{}"
          annotations:
          - "{}"
          - "{}"
          annotatedBounds:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          name: name
          bounds:
          - typeName: typeName
          - typeName: typeName
          typeName: typeName
          genericDeclaration: "{}"
          annotations:
          - "{}"
          - "{}"
          annotatedBounds:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
        varArgs: true
        synthetic: true
        genericParameterTypes:
        - typeName: typeName
        - typeName: typeName
        name: name
        annotatedReceiverType:
          declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        genericExceptionTypes:
        - typeName: typeName
        - typeName: typeName
        parameterAnnotations:
        - - "{}"
          - "{}"
        - - "{}"
          - "{}"
        annotatedExceptionTypes:
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        annotatedParameterTypes:
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
      properties:
        name:
          type: string
        modifiers:
          format: int32
          type: integer
        typeParameters:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_parameters_inner_declaringExecutable_typeParameters_inner"
          type: array
        synthetic:
          type: boolean
        declaredAnnotations:
          items:
            type: object
          type: array
        varArgs:
          type: boolean
        annotatedParameterTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
          type: array
        parameterCount:
          format: int32
          type: integer
        parameterAnnotations:
          items:
            items:
              type: object
            type: array
          type: array
        genericParameterTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
          type: array
        genericExceptionTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
          type: array
        annotatedReturnType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
        annotatedReceiverType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
        annotatedExceptionTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
          type: array
        annotations:
          items:
            type: object
          type: array
        accessible:
          type: boolean
      type: object
    ElementEventConsumerRecordObject_method_parameters_inner:
      example:
        synthetic: true
        declaredAnnotations:
        - "{}"
        - "{}"
        implicit: true
        namePresent: true
        annotatedType:
          declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        name: name
        annotations:
        - "{}"
        - "{}"
        declaringExecutable:
          declaredAnnotations:
          - "{}"
          - "{}"
          accessible: true
          annotatedReturnType:
            declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          parameterCount: 5
          annotations:
          - "{}"
          - "{}"
          modifiers: 5
          typeParameters:
          - declaredAnnotations:
            - "{}"
            - "{}"
            name: name
            bounds:
            - typeName: typeName
            - typeName: typeName
            typeName: typeName
            genericDeclaration: "{}"
            annotations:
            - "{}"
            - "{}"
            annotatedBounds:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            name: name
            bounds:
            - typeName: typeName
            - typeName: typeName
            typeName: typeName
            genericDeclaration: "{}"
            annotations:
            - "{}"
            - "{}"
            annotatedBounds:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          varArgs: true
          synthetic: true
          genericParameterTypes:
          - typeName: typeName
          - typeName: typeName
          name: name
          annotatedReceiverType:
            declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          genericExceptionTypes:
          - typeName: typeName
          - typeName: typeName
          parameterAnnotations:
          - - "{}"
            - "{}"
          - - "{}"
            - "{}"
          annotatedExceptionTypes:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          annotatedParameterTypes:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
        modifiers: 1
        parameterizedType:
          typeName: typeName
        varArgs: true
      properties:
        name:
          type: string
        modifiers:
          format: int32
          type: integer
        synthetic:
          type: boolean
        annotations:
          items:
            type: object
          type: array
        declaredAnnotations:
          items:
            type: object
          type: array
        annotatedType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
        parameterizedType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
        varArgs:
          type: boolean
        namePresent:
          type: boolean
        declaringExecutable:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_parameters_inner_declaringExecutable"
        implicit:
          type: boolean
      type: object
    ElementEventConsumerRecordObject_method:
      example:
        declaredAnnotations:
        - "{}"
        - "{}"
        accessible: true
        annotatedReturnType:
          declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        parameterCount: 6
        defaultValue: "{}"
        annotations:
        - "{}"
        - "{}"
        modifiers: 0
        typeParameters:
        - declaredAnnotations:
          - "{}"
          - "{}"
          name: name
          bounds:
          - typeName: typeName
          - typeName: typeName
          typeName: typeName
          annotations:
          - "{}"
          - "{}"
          annotatedBounds:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          name: name
          bounds:
          - typeName: typeName
          - typeName: typeName
          typeName: typeName
          annotations:
          - "{}"
          - "{}"
          annotatedBounds:
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          - declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
        varArgs: true
        synthetic: true
        genericParameterTypes:
        - typeName: typeName
        - typeName: typeName
        default: true
        name: name
        genericReturnType:
          typeName: typeName
        annotatedReceiverType:
          declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        genericExceptionTypes:
        - typeName: typeName
        - typeName: typeName
        parameterAnnotations:
        - - "{}"
          - "{}"
        - - "{}"
          - "{}"
        bridge: true
        parameters:
        - synthetic: true
          declaredAnnotations:
          - "{}"
          - "{}"
          implicit: true
          namePresent: true
          annotatedType:
            declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          name: name
          annotations:
          - "{}"
          - "{}"
          declaringExecutable:
            declaredAnnotations:
            - "{}"
            - "{}"
            accessible: true
            annotatedReturnType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            parameterCount: 5
            annotations:
            - "{}"
            - "{}"
            modifiers: 5
            typeParameters:
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              genericDeclaration: "{}"
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              genericDeclaration: "{}"
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            varArgs: true
            synthetic: true
            genericParameterTypes:
            - typeName: typeName
            - typeName: typeName
            name: name
            annotatedReceiverType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            genericExceptionTypes:
            - typeName: typeName
            - typeName: typeName
            parameterAnnotations:
            - - "{}"
              - "{}"
            - - "{}"
              - "{}"
            annotatedExceptionTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            annotatedParameterTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          modifiers: 1
          parameterizedType:
            typeName: typeName
          varArgs: true
        - synthetic: true
          declaredAnnotations:
          - "{}"
          - "{}"
          implicit: true
          namePresent: true
          annotatedType:
            declaredAnnotations:
            - "{}"
            - "{}"
            annotations:
            - "{}"
            - "{}"
            type:
              typeName: typeName
          name: name
          annotations:
          - "{}"
          - "{}"
          declaringExecutable:
            declaredAnnotations:
            - "{}"
            - "{}"
            accessible: true
            annotatedReturnType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            parameterCount: 5
            annotations:
            - "{}"
            - "{}"
            modifiers: 5
            typeParameters:
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              genericDeclaration: "{}"
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              name: name
              bounds:
              - typeName: typeName
              - typeName: typeName
              typeName: typeName
              genericDeclaration: "{}"
              annotations:
              - "{}"
              - "{}"
              annotatedBounds:
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
              - declaredAnnotations:
                - "{}"
                - "{}"
                annotations:
                - "{}"
                - "{}"
                type:
                  typeName: typeName
            varArgs: true
            synthetic: true
            genericParameterTypes:
            - typeName: typeName
            - typeName: typeName
            name: name
            annotatedReceiverType:
              declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            genericExceptionTypes:
            - typeName: typeName
            - typeName: typeName
            parameterAnnotations:
            - - "{}"
              - "{}"
            - - "{}"
              - "{}"
            annotatedExceptionTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            annotatedParameterTypes:
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
            - declaredAnnotations:
              - "{}"
              - "{}"
              annotations:
              - "{}"
              - "{}"
              type:
                typeName: typeName
          modifiers: 1
          parameterizedType:
            typeName: typeName
          varArgs: true
        annotatedExceptionTypes:
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        annotatedParameterTypes:
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
        - declaredAnnotations:
          - "{}"
          - "{}"
          annotations:
          - "{}"
          - "{}"
          type:
            typeName: typeName
      properties:
        name:
          type: string
        modifiers:
          format: int32
          type: integer
        typeParameters:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner"
          type: array
        synthetic:
          type: boolean
        declaredAnnotations:
          items:
            type: object
          type: array
        accessible:
          type: boolean
        varArgs:
          type: boolean
        parameterCount:
          format: int32
          type: integer
        parameterAnnotations:
          items:
            items:
              type: object
            type: array
          type: array
        genericParameterTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
          type: array
        genericExceptionTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
          type: array
        default:
          type: boolean
        genericReturnType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_bounds_inner"
        bridge:
          type: boolean
        defaultValue:
          type: object
        annotatedReturnType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
        annotatedParameterTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
          type: array
        parameters:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_parameters_inner"
          type: array
        annotatedReceiverType:
          $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
        annotatedExceptionTypes:
          items:
            $ref: "#/components/schemas/ElementEventConsumerRecordObject_method_typeParameters_inner_annotatedBounds_inner"
          type: array
        annotations:
          items:
            type: object
          type: array
      type: object
  securitySchemes:
    auth_bearer:
      in: header
      name: Authorization
      type: apiKey
    session_secret:
      in: header
      name: Elements-SessionSecret
      type: apiKey

