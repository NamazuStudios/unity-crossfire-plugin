/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Progress
    /// </summary>
    [DataContract(Name = "Progress")]
    public partial class Progress
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Progress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Progress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Progress" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the progress instance (required).</param>
        /// <param name="profile">profile (required).</param>
        /// <param name="currentStep">currentStep.</param>
        /// <param name="remaining">The remaining actions.</param>
        /// <param name="mission">mission (required).</param>
        /// <param name="rewardIssuances">List of all reward issuances that are issued but not expired, or redeemed but persistent..</param>
        /// <param name="sequence">The current number of completed steps. Note that this may exceed the total number of steps, i.e. the final step may be repeated infinitely..</param>
        /// <param name="managedBySchedule">Indicates that this progress is managed by a Schedule. If true, the Progress will be deleted when no schedules have the progress active. This will be true if the Progress was created as part of a Schedule..</param>
        /// <param name="schedules">A listing of the Schedules which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule..</param>
        /// <param name="scheduleEvents">A listing of ScheduleEvents which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule..</param>
        public Progress(string id = default(string), Profile profile = default(Profile), Step currentStep = default(Step), int remaining = default(int), ProgressMissionInfo mission = default(ProgressMissionInfo), List<RewardIssuance> rewardIssuances = default(List<RewardIssuance>), int sequence = default(int), bool managedBySchedule = default(bool), List<Schedule> schedules = default(List<Schedule>), List<ScheduleEvent> scheduleEvents = default(List<ScheduleEvent>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Progress and cannot be null");
            }
            this.Id = id;
            // to ensure "profile" is required (not null)
            if (profile == null)
            {
                throw new ArgumentNullException("profile is a required property for Progress and cannot be null");
            }
            this.Profile = profile;
            // to ensure "mission" is required (not null)
            if (mission == null)
            {
                throw new ArgumentNullException("mission is a required property for Progress and cannot be null");
            }
            this.Mission = mission;
            this.CurrentStep = currentStep;
            this.Remaining = remaining;
            this.RewardIssuances = rewardIssuances;
            this.Sequence = sequence;
            this.ManagedBySchedule = managedBySchedule;
            this.Schedules = schedules;
            this.ScheduleEvents = scheduleEvents;
        }

        /// <summary>
        /// The unique ID of the progress instance
        /// </summary>
        /// <value>The unique ID of the progress instance</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", IsRequired = true, EmitDefaultValue = true)]
        public Profile Profile { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStep
        /// </summary>
        [DataMember(Name = "currentStep", EmitDefaultValue = false)]
        public Step CurrentStep { get; set; }

        /// <summary>
        /// The remaining actions
        /// </summary>
        /// <value>The remaining actions</value>
        [DataMember(Name = "remaining", EmitDefaultValue = false)]
        public int Remaining { get; set; }

        /// <summary>
        /// Gets or Sets Mission
        /// </summary>
        [DataMember(Name = "mission", IsRequired = true, EmitDefaultValue = true)]
        public ProgressMissionInfo Mission { get; set; }

        /// <summary>
        /// List of all reward issuances that are issued but not expired, or redeemed but persistent.
        /// </summary>
        /// <value>List of all reward issuances that are issued but not expired, or redeemed but persistent.</value>
        [DataMember(Name = "rewardIssuances", EmitDefaultValue = false)]
        public List<RewardIssuance> RewardIssuances { get; set; }

        /// <summary>
        /// The current number of completed steps. Note that this may exceed the total number of steps, i.e. the final step may be repeated infinitely.
        /// </summary>
        /// <value>The current number of completed steps. Note that this may exceed the total number of steps, i.e. the final step may be repeated infinitely.</value>
        [DataMember(Name = "sequence", EmitDefaultValue = false)]
        public int Sequence { get; set; }

        /// <summary>
        /// Indicates that this progress is managed by a Schedule. If true, the Progress will be deleted when no schedules have the progress active. This will be true if the Progress was created as part of a Schedule.
        /// </summary>
        /// <value>Indicates that this progress is managed by a Schedule. If true, the Progress will be deleted when no schedules have the progress active. This will be true if the Progress was created as part of a Schedule.</value>
        [DataMember(Name = "managedBySchedule", EmitDefaultValue = true)]
        public bool ManagedBySchedule { get; set; }

        /// <summary>
        /// A listing of the Schedules which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule.
        /// </summary>
        /// <value>A listing of the Schedules which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule.</value>
        [DataMember(Name = "schedules", EmitDefaultValue = false)]
        public List<Schedule> Schedules { get; set; }

        /// <summary>
        /// A listing of ScheduleEvents which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule.
        /// </summary>
        /// <value>A listing of ScheduleEvents which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule.</value>
        [DataMember(Name = "scheduleEvents", EmitDefaultValue = false)]
        public List<ScheduleEvent> ScheduleEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Progress {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  CurrentStep: ").Append(CurrentStep).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("  Mission: ").Append(Mission).Append("\n");
            sb.Append("  RewardIssuances: ").Append(RewardIssuances).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  ManagedBySchedule: ").Append(ManagedBySchedule).Append("\n");
            sb.Append("  Schedules: ").Append(Schedules).Append("\n");
            sb.Append("  ScheduleEvents: ").Append(ScheduleEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
