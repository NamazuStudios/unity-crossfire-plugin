/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// This configures the matchmaking system for the application. This defines the queue name and the Matchmacker to use when finding players to match. Currently FIFO is builtin and is the default.
    /// </summary>
    [DataContract(Name = "MatchmakingApplicationConfiguration")]
    public partial class MatchmakingApplicationConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingApplicationConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchmakingApplicationConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingApplicationConfiguration" /> class.
        /// </summary>
        /// <param name="id">The database assigned ID for the application configuration. (required).</param>
        /// <param name="name">The application-configuration specific unique ID. Unique per application per category. (required).</param>
        /// <param name="type">The fully-qualified Java type of ApplicationConfiguration. (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="parent">parent (required).</param>
        /// <param name="success">success.</param>
        /// <param name="matchmaker">matchmaker.</param>
        /// <param name="maxProfiles">The maximum number of profiles that can be matched in a single match. .</param>
        /// <param name="metadata">The metadata for this matchmaking configuration. This will be copied to the match when it is created..</param>
        /// <param name="metadataSpec">metadataSpec.</param>
        public MatchmakingApplicationConfiguration(string id = default(string), string name = default(string), string type = default(string), string description = default(string), Application parent = default(Application), CallbackDefinition success = default(CallbackDefinition), ElementServiceReference matchmaker = default(ElementServiceReference), int maxProfiles = default(int), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), MetadataSpec metadataSpec = default(MetadataSpec))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Description = description;
            // to ensure "parent" is required (not null)
            if (parent == null)
            {
                throw new ArgumentNullException("parent is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Parent = parent;
            this.Success = success;
            this.Matchmaker = matchmaker;
            this.MaxProfiles = maxProfiles;
            this.Metadata = metadata;
            this.MetadataSpec = metadataSpec;
        }

        /// <summary>
        /// The database assigned ID for the application configuration.
        /// </summary>
        /// <value>The database assigned ID for the application configuration.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The application-configuration specific unique ID. Unique per application per category.
        /// </summary>
        /// <value>The application-configuration specific unique ID. Unique per application per category.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The fully-qualified Java type of ApplicationConfiguration.
        /// </summary>
        /// <value>The fully-qualified Java type of ApplicationConfiguration.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", IsRequired = true, EmitDefaultValue = true)]
        public Application Parent { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = false)]
        public CallbackDefinition Success { get; set; }

        /// <summary>
        /// Gets or Sets Matchmaker
        /// </summary>
        [DataMember(Name = "matchmaker", EmitDefaultValue = false)]
        public ElementServiceReference Matchmaker { get; set; }

        /// <summary>
        /// The maximum number of profiles that can be matched in a single match. 
        /// </summary>
        /// <value>The maximum number of profiles that can be matched in a single match. </value>
        [DataMember(Name = "maxProfiles", EmitDefaultValue = false)]
        public int MaxProfiles { get; set; }

        /// <summary>
        /// The metadata for this matchmaking configuration. This will be copied to the match when it is created.
        /// </summary>
        /// <value>The metadata for this matchmaking configuration. This will be copied to the match when it is created.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets MetadataSpec
        /// </summary>
        [DataMember(Name = "metadataSpec", EmitDefaultValue = false)]
        public MetadataSpec MetadataSpec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingApplicationConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Matchmaker: ").Append(Matchmaker).Append("\n");
            sb.Append("  MaxProfiles: ").Append(MaxProfiles).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MetadataSpec: ").Append(MetadataSpec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
