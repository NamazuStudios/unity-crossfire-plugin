/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.4.12 - 269e2454fdf4ae1e7fe7e3b5889ab8dc3e23d53f - 2025-10-27 02:10:17
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a multi-match in the matchmaking system.
    /// </summary>
    [DataContract(Name = "MultiMatch")]
    public partial class MultiMatch
    {
        /// <summary>
        /// The status of the match.
        /// </summary>
        /// <value>The status of the match.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 1,

            /// <summary>
            /// Enum FULL for value: FULL
            /// </summary>
            [EnumMember(Value = "FULL")]
            FULL = 2,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 3,

            /// <summary>
            /// Enum ENDED for value: ENDED
            /// </summary>
            [EnumMember(Value = "ENDED")]
            ENDED = 4
        }


        /// <summary>
        /// The status of the match.
        /// </summary>
        /// <value>The status of the match.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiMatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultiMatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiMatch" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the match..</param>
        /// <param name="status">The status of the match..</param>
        /// <param name="varConfiguration">varConfiguration (required).</param>
        /// <param name="metadata">The metadata of hte multi-match, which can be used to store additional information about the match..</param>
        /// <param name="count">The number of players currently in the match..</param>
        /// <param name="expiry">The expiry time of the match in seconds. If not set, the match will not expire..</param>
        /// <param name="created">The timestamp at which the match was created, in milliseconds since epoch..</param>
        public MultiMatch(string id = default(string), StatusEnum? status = default(StatusEnum?), MatchmakingApplicationConfiguration varConfiguration = default(MatchmakingApplicationConfiguration), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), int count = default(int), long expiry = default(long), long created = default(long))
        {
            // to ensure "varConfiguration" is required (not null)
            if (varConfiguration == null)
            {
                throw new ArgumentNullException("varConfiguration is a required property for MultiMatch and cannot be null");
            }
            this.VarConfiguration = varConfiguration;
            this.Id = id;
            this.Status = status;
            this.Metadata = metadata;
            this.Count = count;
            this.Expiry = expiry;
            this.Created = created;
        }

        /// <summary>
        /// The unique ID of the match.
        /// </summary>
        /// <value>The unique ID of the match.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name = "configuration", IsRequired = true, EmitDefaultValue = true)]
        public MatchmakingApplicationConfiguration VarConfiguration { get; set; }

        /// <summary>
        /// The metadata of hte multi-match, which can be used to store additional information about the match.
        /// </summary>
        /// <value>The metadata of hte multi-match, which can be used to store additional information about the match.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// The number of players currently in the match.
        /// </summary>
        /// <value>The number of players currently in the match.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// The expiry time of the match in seconds. If not set, the match will not expire.
        /// </summary>
        /// <value>The expiry time of the match in seconds. If not set, the match will not expire.</value>
        [DataMember(Name = "expiry", EmitDefaultValue = false)]
        public long Expiry { get; set; }

        /// <summary>
        /// The timestamp at which the match was created, in milliseconds since epoch.
        /// </summary>
        /// <value>The timestamp at which the match was created, in milliseconds since epoch.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public long Created { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiMatch {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
