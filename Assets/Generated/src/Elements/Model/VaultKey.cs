/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The Vault&#39;s key. The vault secures each vault with this key.
    /// </summary>
    [DataContract(Name = "VaultKey")]
    public partial class VaultKey
    {
        /// <summary>
        /// Specifies the private key encryption algorithm used to secure the vault.
        /// </summary>
        /// <value>Specifies the private key encryption algorithm used to secure the vault.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlgorithmEnum
        {
            /// <summary>
            /// Enum RSA256 for value: RSA_256
            /// </summary>
            [EnumMember(Value = "RSA_256")]
            RSA256 = 1,

            /// <summary>
            /// Enum RSA384 for value: RSA_384
            /// </summary>
            [EnumMember(Value = "RSA_384")]
            RSA384 = 2,

            /// <summary>
            /// Enum RSA512 for value: RSA_512
            /// </summary>
            [EnumMember(Value = "RSA_512")]
            RSA512 = 3
        }


        /// <summary>
        /// Specifies the private key encryption algorithm used to secure the vault.
        /// </summary>
        /// <value>Specifies the private key encryption algorithm used to secure the vault.</value>
        [DataMember(Name = "algorithm", IsRequired = true, EmitDefaultValue = true)]
        public AlgorithmEnum Algorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VaultKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VaultKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VaultKey" /> class.
        /// </summary>
        /// <param name="algorithm">Specifies the private key encryption algorithm used to secure the vault. (required).</param>
        /// <param name="publicKey">The public key portion of the vault key. (required).</param>
        /// <param name="privateKey">The private key portion of the vault key. (required).</param>
        /// <param name="encrypted">The flag to indicate if the key is encrypted or not..</param>
        /// <param name="encryption">The Vault&#39;s encryption metadata. This is specific to the encryption type used..</param>
        public VaultKey(AlgorithmEnum algorithm = default(AlgorithmEnum), string publicKey = default(string), string privateKey = default(string), bool encrypted = default(bool), Dictionary<string, Object> encryption = default(Dictionary<string, Object>))
        {
            this.Algorithm = algorithm;
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new ArgumentNullException("publicKey is a required property for VaultKey and cannot be null");
            }
            this.PublicKey = publicKey;
            // to ensure "privateKey" is required (not null)
            if (privateKey == null)
            {
                throw new ArgumentNullException("privateKey is a required property for VaultKey and cannot be null");
            }
            this.PrivateKey = privateKey;
            this.Encrypted = encrypted;
            this.Encryption = encryption;
        }

        /// <summary>
        /// The public key portion of the vault key.
        /// </summary>
        /// <value>The public key portion of the vault key.</value>
        [DataMember(Name = "publicKey", IsRequired = true, EmitDefaultValue = true)]
        public string PublicKey { get; set; }

        /// <summary>
        /// The private key portion of the vault key.
        /// </summary>
        /// <value>The private key portion of the vault key.</value>
        [DataMember(Name = "privateKey", IsRequired = true, EmitDefaultValue = true)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// The flag to indicate if the key is encrypted or not.
        /// </summary>
        /// <value>The flag to indicate if the key is encrypted or not.</value>
        [DataMember(Name = "encrypted", EmitDefaultValue = true)]
        public bool Encrypted { get; set; }

        /// <summary>
        /// The Vault&#39;s encryption metadata. This is specific to the encryption type used.
        /// </summary>
        /// <value>The Vault&#39;s encryption metadata. This is specific to the encryption type used.</value>
        [DataMember(Name = "encryption", EmitDefaultValue = false)]
        public Dictionary<string, Object> Encryption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VaultKey {\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  Encrypted: ").Append(Encrypted).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
