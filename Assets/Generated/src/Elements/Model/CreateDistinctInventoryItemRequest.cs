/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// CreateDistinctInventoryItemRequest
    /// </summary>
    [DataContract(Name = "CreateDistinctInventoryItemRequest")]
    public partial class CreateDistinctInventoryItemRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDistinctInventoryItemRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDistinctInventoryItemRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDistinctInventoryItemRequest" /> class.
        /// </summary>
        /// <param name="itemId">The digital goods item id. (required).</param>
        /// <param name="userId">The id of the User owning this inventory item id..</param>
        /// <param name="profileId">The the profileid of hte Profile owning this inventory item..</param>
        /// <param name="metadata">metadata.</param>
        public CreateDistinctInventoryItemRequest(string itemId = default(string), string userId = default(string), string profileId = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for CreateDistinctInventoryItemRequest and cannot be null");
            }
            this.ItemId = itemId;
            this.UserId = userId;
            this.ProfileId = profileId;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The digital goods item id.
        /// </summary>
        /// <value>The digital goods item id.</value>
        [DataMember(Name = "itemId", IsRequired = true, EmitDefaultValue = true)]
        public string ItemId { get; set; }

        /// <summary>
        /// The id of the User owning this inventory item id.
        /// </summary>
        /// <value>The id of the User owning this inventory item id.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// The the profileid of hte Profile owning this inventory item.
        /// </summary>
        /// <value>The the profileid of hte Profile owning this inventory item.</value>
        [DataMember(Name = "profileId", EmitDefaultValue = false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDistinctInventoryItemRequest {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
