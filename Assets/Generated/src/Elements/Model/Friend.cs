/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a player&#39;s friend.  This includes the basic information of the friend as well as the friendship type, profiles he or she has across games, and 
    /// </summary>
    [DataContract(Name = "Friend")]
    public partial class Friend
    {
        /// <summary>
        /// The friendship type.
        /// </summary>
        /// <value>The friendship type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FriendshipEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum OUTGOING for value: OUTGOING
            /// </summary>
            [EnumMember(Value = "OUTGOING")]
            OUTGOING = 2,

            /// <summary>
            /// Enum INCOMING for value: INCOMING
            /// </summary>
            [EnumMember(Value = "INCOMING")]
            INCOMING = 3,

            /// <summary>
            /// Enum MUTUAL for value: MUTUAL
            /// </summary>
            [EnumMember(Value = "MUTUAL")]
            MUTUAL = 4
        }


        /// <summary>
        /// The friendship type.
        /// </summary>
        /// <value>The friendship type.</value>
        [DataMember(Name = "friendship", EmitDefaultValue = false)]
        public FriendshipEnum? Friendship { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Friend" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the friendship..</param>
        /// <param name="user">user.</param>
        /// <param name="friendship">The friendship type..</param>
        /// <param name="profiles">The profiles which are associated with the friend user..</param>
        public Friend(string id = default(string), User user = default(User), FriendshipEnum? friendship = default(FriendshipEnum?), List<Profile> profiles = default(List<Profile>))
        {
            this.Id = id;
            this.User = user;
            this.Friendship = friendship;
            this.Profiles = profiles;
        }

        /// <summary>
        /// The unique ID of the friendship.
        /// </summary>
        /// <value>The unique ID of the friendship.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// The profiles which are associated with the friend user.
        /// </summary>
        /// <value>The profiles which are associated with the friend user.</value>
        [DataMember(Name = "profiles", EmitDefaultValue = false)]
        public List<Profile> Profiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Friend {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Friendship: ").Append(Friendship).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
