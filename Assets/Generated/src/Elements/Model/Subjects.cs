/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Subjects allowed to delete
    /// </summary>
    [DataContract(Name = "Subjects")]
    public partial class Subjects
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subjects" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Subjects() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subjects" /> class.
        /// </summary>
        /// <param name="wildcard">Flag to check who may perform the operations. True if all users may access the object..</param>
        /// <param name="users">Users which may perform the operations. (required).</param>
        /// <param name="profiles">Profiles, which owners may perform the operations. (required).</param>
        public Subjects(bool wildcard = default(bool), List<User> users = default(List<User>), List<Profile> profiles = default(List<Profile>))
        {
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new ArgumentNullException("users is a required property for Subjects and cannot be null");
            }
            this.Users = users;
            // to ensure "profiles" is required (not null)
            if (profiles == null)
            {
                throw new ArgumentNullException("profiles is a required property for Subjects and cannot be null");
            }
            this.Profiles = profiles;
            this.Wildcard = wildcard;
        }

        /// <summary>
        /// Flag to check who may perform the operations. True if all users may access the object.
        /// </summary>
        /// <value>Flag to check who may perform the operations. True if all users may access the object.</value>
        [DataMember(Name = "wildcard", EmitDefaultValue = true)]
        public bool Wildcard { get; set; }

        /// <summary>
        /// Users which may perform the operations.
        /// </summary>
        /// <value>Users which may perform the operations.</value>
        [DataMember(Name = "users", IsRequired = true, EmitDefaultValue = true)]
        public List<User> Users { get; set; }

        /// <summary>
        /// Profiles, which owners may perform the operations.
        /// </summary>
        /// <value>Profiles, which owners may perform the operations.</value>
        [DataMember(Name = "profiles", IsRequired = true, EmitDefaultValue = true)]
        public List<Profile> Profiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subjects {\n");
            sb.Append("  Wildcard: ").Append(Wildcard).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
