/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a single one-on-one match between the current player and an opponent.  Once matched, the player will will be able to create a game against the supplied opposing player.  The server may modify or delete matches based on a variety of circumstances.
    /// </summary>
    [DataContract(Name = "Match")]
    public partial class Match
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Match" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Match() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Match" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the match..</param>
        /// <param name="scheme">The scheme to use when matching with other players. (required).</param>
        /// <param name="scope">An optional scope for the match.  For example, if the match were part of a tournament, it could be scoped to the unique ID of the tournament..</param>
        /// <param name="player">player (required).</param>
        /// <param name="opponent">opponent.</param>
        /// <param name="lastUpdatedTimestamp">The time of the last modification of the match..</param>
        /// <param name="gameId">The system-assigned game ID of the match.  Null until the match is successfully made..</param>
        /// <param name="metadata">Additional arbitrary metadata that is attached to the match..</param>
        public Match(string id = default(string), string scheme = default(string), string scope = default(string), Profile player = default(Profile), Profile opponent = default(Profile), long lastUpdatedTimestamp = default(long), string gameId = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "scheme" is required (not null)
            if (scheme == null)
            {
                throw new ArgumentNullException("scheme is a required property for Match and cannot be null");
            }
            this.Scheme = scheme;
            // to ensure "player" is required (not null)
            if (player == null)
            {
                throw new ArgumentNullException("player is a required property for Match and cannot be null");
            }
            this.Player = player;
            this.Id = id;
            this.Scope = scope;
            this.Opponent = opponent;
            this.LastUpdatedTimestamp = lastUpdatedTimestamp;
            this.GameId = gameId;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The unique ID of the match.
        /// </summary>
        /// <value>The unique ID of the match.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The scheme to use when matching with other players.
        /// </summary>
        /// <value>The scheme to use when matching with other players.</value>
        [DataMember(Name = "scheme", IsRequired = true, EmitDefaultValue = true)]
        public string Scheme { get; set; }

        /// <summary>
        /// An optional scope for the match.  For example, if the match were part of a tournament, it could be scoped to the unique ID of the tournament.
        /// </summary>
        /// <value>An optional scope for the match.  For example, if the match were part of a tournament, it could be scoped to the unique ID of the tournament.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Player
        /// </summary>
        [DataMember(Name = "player", IsRequired = true, EmitDefaultValue = true)]
        public Profile Player { get; set; }

        /// <summary>
        /// Gets or Sets Opponent
        /// </summary>
        [DataMember(Name = "opponent", EmitDefaultValue = false)]
        public Profile Opponent { get; set; }

        /// <summary>
        /// The time of the last modification of the match.
        /// </summary>
        /// <value>The time of the last modification of the match.</value>
        [DataMember(Name = "lastUpdatedTimestamp", EmitDefaultValue = false)]
        public long LastUpdatedTimestamp { get; set; }

        /// <summary>
        /// The system-assigned game ID of the match.  Null until the match is successfully made.
        /// </summary>
        /// <value>The system-assigned game ID of the match.  Null until the match is successfully made.</value>
        [DataMember(Name = "gameId", EmitDefaultValue = false)]
        public string GameId { get; set; }

        /// <summary>
        /// Additional arbitrary metadata that is attached to the match.
        /// </summary>
        /// <value>Additional arbitrary metadata that is attached to the match.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Match {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  Opponent: ").Append(Opponent).Append("\n");
            sb.Append("  LastUpdatedTimestamp: ").Append(LastUpdatedTimestamp).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
