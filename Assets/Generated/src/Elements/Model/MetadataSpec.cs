/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a spec for metadata.
    /// </summary>
    [DataContract(Name = "MetadataSpec")]
    public partial class MetadataSpec
    {
        /// <summary>
        /// The type of the tab itself.
        /// </summary>
        /// <value>The type of the tab itself.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 1,

            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 2,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 3,

            /// <summary>
            /// Enum ARRAY for value: ARRAY
            /// </summary>
            [EnumMember(Value = "ARRAY")]
            ARRAY = 4,

            /// <summary>
            /// Enum ENUM for value: ENUM
            /// </summary>
            [EnumMember(Value = "ENUM")]
            ENUM = 5,

            /// <summary>
            /// Enum OBJECT for value: OBJECT
            /// </summary>
            [EnumMember(Value = "OBJECT")]
            OBJECT = 6,

            /// <summary>
            /// Enum TAGS for value: TAGS
            /// </summary>
            [EnumMember(Value = "TAGS")]
            TAGS = 7
        }


        /// <summary>
        /// The type of the tab itself.
        /// </summary>
        /// <value>The type of the tab itself.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSpec" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the schema itself. (required).</param>
        /// <param name="name">The Name of the schema. (required).</param>
        /// <param name="type">The type of the tab itself. (required).</param>
        /// <param name="properties">The tabs of the metadata spec. (required).</param>
        public MetadataSpec(string id = default(string), string name = default(string), TypeEnum type = default(TypeEnum), List<MetadataSpecProperty> properties = default(List<MetadataSpecProperty>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MetadataSpec and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MetadataSpec and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "properties" is required (not null)
            if (properties == null)
            {
                throw new ArgumentNullException("properties is a required property for MetadataSpec and cannot be null");
            }
            this.Properties = properties;
        }

        /// <summary>
        /// The unique ID of the schema itself.
        /// </summary>
        /// <value>The unique ID of the schema itself.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Name of the schema.
        /// </summary>
        /// <value>The Name of the schema.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The tabs of the metadata spec.
        /// </summary>
        /// <value>The tabs of the metadata spec.</value>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = true)]
        public List<MetadataSpecProperty> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataSpec {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
