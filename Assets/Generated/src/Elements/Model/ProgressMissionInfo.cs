/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The mission
    /// </summary>
    [DataContract(Name = "ProgressMissionInfo")]
    public partial class ProgressMissionInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgressMissionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProgressMissionInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgressMissionInfo" /> class.
        /// </summary>
        /// <param name="id">The id of the mission (required).</param>
        /// <param name="name">The name of the mission (required).</param>
        /// <param name="displayName">The display name for the mission (required).</param>
        /// <param name="description">The description of the mission (required).</param>
        /// <param name="steps">The steps that constitute the mission (may be null if finalRepeatStep is specified).</param>
        /// <param name="finalRepeatStep">finalRepeatStep.</param>
        /// <param name="tags">The tags used to categorize this mission.</param>
        /// <param name="metadata">The metadata for this mission.</param>
        public ProgressMissionInfo(string id = default(string), string name = default(string), string displayName = default(string), string description = default(string), List<Step> steps = default(List<Step>), Step finalRepeatStep = default(Step), List<string> tags = default(List<string>), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ProgressMissionInfo and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProgressMissionInfo and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for ProgressMissionInfo and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ProgressMissionInfo and cannot be null");
            }
            this.Description = description;
            this.Steps = steps;
            this.FinalRepeatStep = finalRepeatStep;
            this.Tags = tags;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The id of the mission
        /// </summary>
        /// <value>The id of the mission</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the mission
        /// </summary>
        /// <value>The name of the mission</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The display name for the mission
        /// </summary>
        /// <value>The display name for the mission</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the mission
        /// </summary>
        /// <value>The description of the mission</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The steps that constitute the mission (may be null if finalRepeatStep is specified)
        /// </summary>
        /// <value>The steps that constitute the mission (may be null if finalRepeatStep is specified)</value>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public List<Step> Steps { get; set; }

        /// <summary>
        /// Gets or Sets FinalRepeatStep
        /// </summary>
        [DataMember(Name = "finalRepeatStep", EmitDefaultValue = false)]
        public Step FinalRepeatStep { get; set; }

        /// <summary>
        /// The tags used to categorize this mission
        /// </summary>
        /// <value>The tags used to categorize this mission</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The metadata for this mission
        /// </summary>
        /// <value>The metadata for this mission</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProgressMissionInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  FinalRepeatStep: ").Append(FinalRepeatStep).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
