/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ServletContext
    /// </summary>
    [DataContract(Name = "ServletContext")]
    public partial class ServletContext
    {
        /// <summary>
        /// Defines SessionTrackingModes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SessionTrackingModesEnum
        {
            /// <summary>
            /// Enum COOKIE for value: COOKIE
            /// </summary>
            [EnumMember(Value = "COOKIE")]
            COOKIE = 1,

            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 2,

            /// <summary>
            /// Enum SSL for value: SSL
            /// </summary>
            [EnumMember(Value = "SSL")]
            SSL = 3
        }

        /// <summary>
        /// Defines DefaultSessionTrackingModes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultSessionTrackingModesEnum
        {
            /// <summary>
            /// Enum COOKIE for value: COOKIE
            /// </summary>
            [EnumMember(Value = "COOKIE")]
            COOKIE = 1,

            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 2,

            /// <summary>
            /// Enum SSL for value: SSL
            /// </summary>
            [EnumMember(Value = "SSL")]
            SSL = 3
        }

        /// <summary>
        /// Defines EffectiveSessionTrackingModes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EffectiveSessionTrackingModesEnum
        {
            /// <summary>
            /// Enum COOKIE for value: COOKIE
            /// </summary>
            [EnumMember(Value = "COOKIE")]
            COOKIE = 1,

            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 2,

            /// <summary>
            /// Enum SSL for value: SSL
            /// </summary>
            [EnumMember(Value = "SSL")]
            SSL = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServletContext" /> class.
        /// </summary>
        /// <param name="classLoader">classLoader.</param>
        /// <param name="majorVersion">majorVersion.</param>
        /// <param name="minorVersion">minorVersion.</param>
        /// <param name="servletContextName">servletContextName.</param>
        /// <param name="filterRegistrations">filterRegistrations.</param>
        /// <param name="sessionCookieConfig">sessionCookieConfig.</param>
        /// <param name="jspConfigDescriptor">jspConfigDescriptor.</param>
        /// <param name="virtualServerName">virtualServerName.</param>
        /// <param name="sessionTimeout">sessionTimeout.</param>
        /// <param name="initParameterNames">initParameterNames.</param>
        /// <param name="attributeNames">attributeNames.</param>
        /// <param name="contextPath">contextPath.</param>
        /// <param name="serverInfo">serverInfo.</param>
        /// <param name="effectiveMajorVersion">effectiveMajorVersion.</param>
        /// <param name="effectiveMinorVersion">effectiveMinorVersion.</param>
        /// <param name="servletRegistrations">servletRegistrations.</param>
        /// <param name="sessionTrackingModes">sessionTrackingModes.</param>
        /// <param name="defaultSessionTrackingModes">defaultSessionTrackingModes.</param>
        /// <param name="requestCharacterEncoding">requestCharacterEncoding.</param>
        /// <param name="responseCharacterEncoding">responseCharacterEncoding.</param>
        /// <param name="effectiveSessionTrackingModes">effectiveSessionTrackingModes.</param>
        public ServletContext(ServletContextClassLoader classLoader = default(ServletContextClassLoader), int majorVersion = default(int), int minorVersion = default(int), string servletContextName = default(string), Dictionary<string, FilterRegistration> filterRegistrations = default(Dictionary<string, FilterRegistration>), SessionCookieConfig sessionCookieConfig = default(SessionCookieConfig), JspConfigDescriptor jspConfigDescriptor = default(JspConfigDescriptor), string virtualServerName = default(string), int sessionTimeout = default(int), Object initParameterNames = default(Object), Object attributeNames = default(Object), string contextPath = default(string), string serverInfo = default(string), int effectiveMajorVersion = default(int), int effectiveMinorVersion = default(int), Dictionary<string, ServletRegistration> servletRegistrations = default(Dictionary<string, ServletRegistration>), List<SessionTrackingModesEnum> sessionTrackingModes = default(List<SessionTrackingModesEnum>), List<DefaultSessionTrackingModesEnum> defaultSessionTrackingModes = default(List<DefaultSessionTrackingModesEnum>), string requestCharacterEncoding = default(string), string responseCharacterEncoding = default(string), List<EffectiveSessionTrackingModesEnum> effectiveSessionTrackingModes = default(List<EffectiveSessionTrackingModesEnum>))
        {
            this.ClassLoader = classLoader;
            this.MajorVersion = majorVersion;
            this.MinorVersion = minorVersion;
            this.ServletContextName = servletContextName;
            this.FilterRegistrations = filterRegistrations;
            this.SessionCookieConfig = sessionCookieConfig;
            this.JspConfigDescriptor = jspConfigDescriptor;
            this.VirtualServerName = virtualServerName;
            this.SessionTimeout = sessionTimeout;
            this.InitParameterNames = initParameterNames;
            this.AttributeNames = attributeNames;
            this.ContextPath = contextPath;
            this.ServerInfo = serverInfo;
            this.EffectiveMajorVersion = effectiveMajorVersion;
            this.EffectiveMinorVersion = effectiveMinorVersion;
            this.ServletRegistrations = servletRegistrations;
            this.SessionTrackingModes = sessionTrackingModes;
            this.DefaultSessionTrackingModes = defaultSessionTrackingModes;
            this.RequestCharacterEncoding = requestCharacterEncoding;
            this.ResponseCharacterEncoding = responseCharacterEncoding;
            this.EffectiveSessionTrackingModes = effectiveSessionTrackingModes;
        }

        /// <summary>
        /// Gets or Sets ClassLoader
        /// </summary>
        [DataMember(Name = "classLoader", EmitDefaultValue = false)]
        public ServletContextClassLoader ClassLoader { get; set; }

        /// <summary>
        /// Gets or Sets MajorVersion
        /// </summary>
        [DataMember(Name = "majorVersion", EmitDefaultValue = false)]
        public int MajorVersion { get; set; }

        /// <summary>
        /// Gets or Sets MinorVersion
        /// </summary>
        [DataMember(Name = "minorVersion", EmitDefaultValue = false)]
        public int MinorVersion { get; set; }

        /// <summary>
        /// Gets or Sets ServletContextName
        /// </summary>
        [DataMember(Name = "servletContextName", EmitDefaultValue = false)]
        public string ServletContextName { get; set; }

        /// <summary>
        /// Gets or Sets FilterRegistrations
        /// </summary>
        [DataMember(Name = "filterRegistrations", EmitDefaultValue = false)]
        public Dictionary<string, FilterRegistration> FilterRegistrations { get; set; }

        /// <summary>
        /// Gets or Sets SessionCookieConfig
        /// </summary>
        [DataMember(Name = "sessionCookieConfig", EmitDefaultValue = false)]
        public SessionCookieConfig SessionCookieConfig { get; set; }

        /// <summary>
        /// Gets or Sets JspConfigDescriptor
        /// </summary>
        [DataMember(Name = "jspConfigDescriptor", EmitDefaultValue = false)]
        public JspConfigDescriptor JspConfigDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets VirtualServerName
        /// </summary>
        [DataMember(Name = "virtualServerName", EmitDefaultValue = false)]
        public string VirtualServerName { get; set; }

        /// <summary>
        /// Gets or Sets SessionTimeout
        /// </summary>
        [DataMember(Name = "sessionTimeout", EmitDefaultValue = false)]
        public int SessionTimeout { get; set; }

        /// <summary>
        /// Gets or Sets InitParameterNames
        /// </summary>
        [DataMember(Name = "initParameterNames", EmitDefaultValue = false)]
        public Object InitParameterNames { get; set; }

        /// <summary>
        /// Gets or Sets AttributeNames
        /// </summary>
        [DataMember(Name = "attributeNames", EmitDefaultValue = false)]
        public Object AttributeNames { get; set; }

        /// <summary>
        /// Gets or Sets ContextPath
        /// </summary>
        [DataMember(Name = "contextPath", EmitDefaultValue = false)]
        public string ContextPath { get; set; }

        /// <summary>
        /// Gets or Sets ServerInfo
        /// </summary>
        [DataMember(Name = "serverInfo", EmitDefaultValue = false)]
        public string ServerInfo { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveMajorVersion
        /// </summary>
        [DataMember(Name = "effectiveMajorVersion", EmitDefaultValue = false)]
        public int EffectiveMajorVersion { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveMinorVersion
        /// </summary>
        [DataMember(Name = "effectiveMinorVersion", EmitDefaultValue = false)]
        public int EffectiveMinorVersion { get; set; }

        /// <summary>
        /// Gets or Sets ServletRegistrations
        /// </summary>
        [DataMember(Name = "servletRegistrations", EmitDefaultValue = false)]
        public Dictionary<string, ServletRegistration> ServletRegistrations { get; set; }

        /// <summary>
        /// Gets or Sets SessionTrackingModes
        /// </summary>
        [DataMember(Name = "sessionTrackingModes", EmitDefaultValue = false)]
        public List<ServletContext.SessionTrackingModesEnum> SessionTrackingModes { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSessionTrackingModes
        /// </summary>
        [DataMember(Name = "defaultSessionTrackingModes", EmitDefaultValue = false)]
        public List<ServletContext.DefaultSessionTrackingModesEnum> DefaultSessionTrackingModes { get; set; }

        /// <summary>
        /// Gets or Sets RequestCharacterEncoding
        /// </summary>
        [DataMember(Name = "requestCharacterEncoding", EmitDefaultValue = false)]
        public string RequestCharacterEncoding { get; set; }

        /// <summary>
        /// Gets or Sets ResponseCharacterEncoding
        /// </summary>
        [DataMember(Name = "responseCharacterEncoding", EmitDefaultValue = false)]
        public string ResponseCharacterEncoding { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveSessionTrackingModes
        /// </summary>
        [DataMember(Name = "effectiveSessionTrackingModes", EmitDefaultValue = false)]
        public List<ServletContext.EffectiveSessionTrackingModesEnum> EffectiveSessionTrackingModes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServletContext {\n");
            sb.Append("  ClassLoader: ").Append(ClassLoader).Append("\n");
            sb.Append("  MajorVersion: ").Append(MajorVersion).Append("\n");
            sb.Append("  MinorVersion: ").Append(MinorVersion).Append("\n");
            sb.Append("  ServletContextName: ").Append(ServletContextName).Append("\n");
            sb.Append("  FilterRegistrations: ").Append(FilterRegistrations).Append("\n");
            sb.Append("  SessionCookieConfig: ").Append(SessionCookieConfig).Append("\n");
            sb.Append("  JspConfigDescriptor: ").Append(JspConfigDescriptor).Append("\n");
            sb.Append("  VirtualServerName: ").Append(VirtualServerName).Append("\n");
            sb.Append("  SessionTimeout: ").Append(SessionTimeout).Append("\n");
            sb.Append("  InitParameterNames: ").Append(InitParameterNames).Append("\n");
            sb.Append("  AttributeNames: ").Append(AttributeNames).Append("\n");
            sb.Append("  ContextPath: ").Append(ContextPath).Append("\n");
            sb.Append("  ServerInfo: ").Append(ServerInfo).Append("\n");
            sb.Append("  EffectiveMajorVersion: ").Append(EffectiveMajorVersion).Append("\n");
            sb.Append("  EffectiveMinorVersion: ").Append(EffectiveMinorVersion).Append("\n");
            sb.Append("  ServletRegistrations: ").Append(ServletRegistrations).Append("\n");
            sb.Append("  SessionTrackingModes: ").Append(SessionTrackingModes).Append("\n");
            sb.Append("  DefaultSessionTrackingModes: ").Append(DefaultSessionTrackingModes).Append("\n");
            sb.Append("  RequestCharacterEncoding: ").Append(RequestCharacterEncoding).Append("\n");
            sb.Append("  ResponseCharacterEncoding: ").Append(ResponseCharacterEncoding).Append("\n");
            sb.Append("  EffectiveSessionTrackingModes: ").Append(EffectiveSessionTrackingModes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
