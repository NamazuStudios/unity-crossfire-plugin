/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a smart contract.
    /// </summary>
    [DataContract(Name = "SmartContract")]
    public partial class SmartContract
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartContract" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmartContract() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartContract" /> class.
        /// </summary>
        /// <param name="id">The Elements database id of the contract. (required).</param>
        /// <param name="name">The unique symbolic name of the smart contract. (required).</param>
        /// <param name="displayName">The name given to this contract for display purposes. (required).</param>
        /// <param name="addresses">The addresses of the contract from the blockchain. Depending on the network or protocol this may have several meanings. For example, this may be the script has for the Ethereum network. (required).</param>
        /// <param name="vault">vault (required).</param>
        /// <param name="metadata">Any metadata for this contract..</param>
        public SmartContract(string id = default(string), string name = default(string), string displayName = default(string), Dictionary<string, SmartContractAddress> addresses = default(Dictionary<string, SmartContractAddress>), Vault vault = default(Vault), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SmartContract and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SmartContract and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for SmartContract and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "addresses" is required (not null)
            if (addresses == null)
            {
                throw new ArgumentNullException("addresses is a required property for SmartContract and cannot be null");
            }
            this.Addresses = addresses;
            // to ensure "vault" is required (not null)
            if (vault == null)
            {
                throw new ArgumentNullException("vault is a required property for SmartContract and cannot be null");
            }
            this.Vault = vault;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The Elements database id of the contract.
        /// </summary>
        /// <value>The Elements database id of the contract.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The unique symbolic name of the smart contract.
        /// </summary>
        /// <value>The unique symbolic name of the smart contract.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The name given to this contract for display purposes.
        /// </summary>
        /// <value>The name given to this contract for display purposes.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The addresses of the contract from the blockchain. Depending on the network or protocol this may have several meanings. For example, this may be the script has for the Ethereum network.
        /// </summary>
        /// <value>The addresses of the contract from the blockchain. Depending on the network or protocol this may have several meanings. For example, this may be the script has for the Ethereum network.</value>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, SmartContractAddress> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Vault
        /// </summary>
        [DataMember(Name = "vault", IsRequired = true, EmitDefaultValue = true)]
        public Vault Vault { get; set; }

        /// <summary>
        /// Any metadata for this contract.
        /// </summary>
        /// <value>Any metadata for this contract.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmartContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Vault: ").Append(Vault).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
