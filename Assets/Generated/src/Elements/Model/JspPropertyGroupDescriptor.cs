/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// JspPropertyGroupDescriptor
    /// </summary>
    [DataContract(Name = "JspPropertyGroupDescriptor")]
    public partial class JspPropertyGroupDescriptor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JspPropertyGroupDescriptor" /> class.
        /// </summary>
        /// <param name="buffer">buffer.</param>
        /// <param name="errorOnELNotFound">errorOnELNotFound.</param>
        /// <param name="pageEncoding">pageEncoding.</param>
        /// <param name="scriptingInvalid">scriptingInvalid.</param>
        /// <param name="includePreludes">includePreludes.</param>
        /// <param name="includeCodas">includeCodas.</param>
        /// <param name="defaultContentType">defaultContentType.</param>
        /// <param name="urlPatterns">urlPatterns.</param>
        /// <param name="elIgnored">elIgnored.</param>
        /// <param name="isXml">isXml.</param>
        /// <param name="deferredSyntaxAllowedAsLiteral">deferredSyntaxAllowedAsLiteral.</param>
        /// <param name="trimDirectiveWhitespaces">trimDirectiveWhitespaces.</param>
        /// <param name="errorOnUndeclaredNamespace">errorOnUndeclaredNamespace.</param>
        public JspPropertyGroupDescriptor(string buffer = default(string), string errorOnELNotFound = default(string), string pageEncoding = default(string), string scriptingInvalid = default(string), List<string> includePreludes = default(List<string>), List<string> includeCodas = default(List<string>), string defaultContentType = default(string), List<string> urlPatterns = default(List<string>), string elIgnored = default(string), string isXml = default(string), string deferredSyntaxAllowedAsLiteral = default(string), string trimDirectiveWhitespaces = default(string), string errorOnUndeclaredNamespace = default(string))
        {
            this.Buffer = buffer;
            this.ErrorOnELNotFound = errorOnELNotFound;
            this.PageEncoding = pageEncoding;
            this.ScriptingInvalid = scriptingInvalid;
            this.IncludePreludes = includePreludes;
            this.IncludeCodas = includeCodas;
            this.DefaultContentType = defaultContentType;
            this.UrlPatterns = urlPatterns;
            this.ElIgnored = elIgnored;
            this.IsXml = isXml;
            this.DeferredSyntaxAllowedAsLiteral = deferredSyntaxAllowedAsLiteral;
            this.TrimDirectiveWhitespaces = trimDirectiveWhitespaces;
            this.ErrorOnUndeclaredNamespace = errorOnUndeclaredNamespace;
        }

        /// <summary>
        /// Gets or Sets Buffer
        /// </summary>
        [DataMember(Name = "buffer", EmitDefaultValue = false)]
        public string Buffer { get; set; }

        /// <summary>
        /// Gets or Sets ErrorOnELNotFound
        /// </summary>
        [DataMember(Name = "errorOnELNotFound", EmitDefaultValue = false)]
        public string ErrorOnELNotFound { get; set; }

        /// <summary>
        /// Gets or Sets PageEncoding
        /// </summary>
        [DataMember(Name = "pageEncoding", EmitDefaultValue = false)]
        public string PageEncoding { get; set; }

        /// <summary>
        /// Gets or Sets ScriptingInvalid
        /// </summary>
        [DataMember(Name = "scriptingInvalid", EmitDefaultValue = false)]
        public string ScriptingInvalid { get; set; }

        /// <summary>
        /// Gets or Sets IncludePreludes
        /// </summary>
        [DataMember(Name = "includePreludes", EmitDefaultValue = false)]
        public List<string> IncludePreludes { get; set; }

        /// <summary>
        /// Gets or Sets IncludeCodas
        /// </summary>
        [DataMember(Name = "includeCodas", EmitDefaultValue = false)]
        public List<string> IncludeCodas { get; set; }

        /// <summary>
        /// Gets or Sets DefaultContentType
        /// </summary>
        [DataMember(Name = "defaultContentType", EmitDefaultValue = false)]
        public string DefaultContentType { get; set; }

        /// <summary>
        /// Gets or Sets UrlPatterns
        /// </summary>
        [DataMember(Name = "urlPatterns", EmitDefaultValue = false)]
        public List<string> UrlPatterns { get; set; }

        /// <summary>
        /// Gets or Sets ElIgnored
        /// </summary>
        [DataMember(Name = "elIgnored", EmitDefaultValue = false)]
        public string ElIgnored { get; set; }

        /// <summary>
        /// Gets or Sets IsXml
        /// </summary>
        [DataMember(Name = "isXml", EmitDefaultValue = false)]
        public string IsXml { get; set; }

        /// <summary>
        /// Gets or Sets DeferredSyntaxAllowedAsLiteral
        /// </summary>
        [DataMember(Name = "deferredSyntaxAllowedAsLiteral", EmitDefaultValue = false)]
        public string DeferredSyntaxAllowedAsLiteral { get; set; }

        /// <summary>
        /// Gets or Sets TrimDirectiveWhitespaces
        /// </summary>
        [DataMember(Name = "trimDirectiveWhitespaces", EmitDefaultValue = false)]
        public string TrimDirectiveWhitespaces { get; set; }

        /// <summary>
        /// Gets or Sets ErrorOnUndeclaredNamespace
        /// </summary>
        [DataMember(Name = "errorOnUndeclaredNamespace", EmitDefaultValue = false)]
        public string ErrorOnUndeclaredNamespace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JspPropertyGroupDescriptor {\n");
            sb.Append("  Buffer: ").Append(Buffer).Append("\n");
            sb.Append("  ErrorOnELNotFound: ").Append(ErrorOnELNotFound).Append("\n");
            sb.Append("  PageEncoding: ").Append(PageEncoding).Append("\n");
            sb.Append("  ScriptingInvalid: ").Append(ScriptingInvalid).Append("\n");
            sb.Append("  IncludePreludes: ").Append(IncludePreludes).Append("\n");
            sb.Append("  IncludeCodas: ").Append(IncludeCodas).Append("\n");
            sb.Append("  DefaultContentType: ").Append(DefaultContentType).Append("\n");
            sb.Append("  UrlPatterns: ").Append(UrlPatterns).Append("\n");
            sb.Append("  ElIgnored: ").Append(ElIgnored).Append("\n");
            sb.Append("  IsXml: ").Append(IsXml).Append("\n");
            sb.Append("  DeferredSyntaxAllowedAsLiteral: ").Append(DeferredSyntaxAllowedAsLiteral).Append("\n");
            sb.Append("  TrimDirectiveWhitespaces: ").Append(TrimDirectiveWhitespaces).Append("\n");
            sb.Append("  ErrorOnUndeclaredNamespace: ").Append(ErrorOnUndeclaredNamespace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
