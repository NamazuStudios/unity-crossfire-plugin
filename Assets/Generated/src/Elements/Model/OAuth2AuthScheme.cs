/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The full JSON response as described in AuthScheme
    /// </summary>
    [DataContract(Name = "OAuth2AuthScheme")]
    public partial class OAuth2AuthScheme
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2AuthScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OAuth2AuthScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2AuthScheme" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the auth scheme. (required).</param>
        /// <param name="name">A unique name used to identify the scheme within the instance of Elements. If using the same OAuth2 provider (e.g. Steam), it is recommended to suffix the name for each application when using multitenancy, e.g. steam_game1, steam_game2, etc. (required).</param>
        /// <param name="validationUrl">The URL to send the user token validation request to. (required).</param>
        /// <param name="headers">The headers required for the validation request..</param>
        /// <param name="varParams">The query parameters required for the validation request..</param>
        /// <param name="responseIdMapping">Determines how to map the user id in the response. For example \&quot;response.params.steamid\&quot;.</param>
        public OAuth2AuthScheme(string id = default(string), string name = default(string), string validationUrl = default(string), List<OAuth2RequestKeyValue> headers = default(List<OAuth2RequestKeyValue>), List<OAuth2RequestKeyValue> varParams = default(List<OAuth2RequestKeyValue>), string responseIdMapping = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OAuth2AuthScheme and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for OAuth2AuthScheme and cannot be null");
            }
            this.Name = name;
            // to ensure "validationUrl" is required (not null)
            if (validationUrl == null)
            {
                throw new ArgumentNullException("validationUrl is a required property for OAuth2AuthScheme and cannot be null");
            }
            this.ValidationUrl = validationUrl;
            this.Headers = headers;
            this.Params = varParams;
            this.ResponseIdMapping = responseIdMapping;
        }

        /// <summary>
        /// The unique ID of the auth scheme.
        /// </summary>
        /// <value>The unique ID of the auth scheme.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique name used to identify the scheme within the instance of Elements. If using the same OAuth2 provider (e.g. Steam), it is recommended to suffix the name for each application when using multitenancy, e.g. steam_game1, steam_game2, etc.
        /// </summary>
        /// <value>A unique name used to identify the scheme within the instance of Elements. If using the same OAuth2 provider (e.g. Steam), it is recommended to suffix the name for each application when using multitenancy, e.g. steam_game1, steam_game2, etc.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The URL to send the user token validation request to.
        /// </summary>
        /// <value>The URL to send the user token validation request to.</value>
        [DataMember(Name = "validationUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ValidationUrl { get; set; }

        /// <summary>
        /// The headers required for the validation request.
        /// </summary>
        /// <value>The headers required for the validation request.</value>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public List<OAuth2RequestKeyValue> Headers { get; set; }

        /// <summary>
        /// The query parameters required for the validation request.
        /// </summary>
        /// <value>The query parameters required for the validation request.</value>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public List<OAuth2RequestKeyValue> Params { get; set; }

        /// <summary>
        /// Determines how to map the user id in the response. For example \&quot;response.params.steamid\&quot;
        /// </summary>
        /// <value>Determines how to map the user id in the response. For example \&quot;response.params.steamid\&quot;</value>
        [DataMember(Name = "responseIdMapping", EmitDefaultValue = false)]
        public string ResponseIdMapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuth2AuthScheme {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValidationUrl: ").Append(ValidationUrl).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  ResponseIdMapping: ").Append(ResponseIdMapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
