/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// RankRow
    /// </summary>
    [DataContract(Name = "RankRow")]
    public partial class RankRow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RankRow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RankRow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RankRow" /> class.
        /// </summary>
        /// <param name="id">The ID of the Score.</param>
        /// <param name="position">The position of the associated score in the result set..</param>
        /// <param name="pointValue">The point value of the score..</param>
        /// <param name="scoreUnits">The the units of measure for the points.  For example, if the points in the game were called \&quot;coins\&quot; instead of \&quot;points\&quot; this would be used to designate as such in the UI..</param>
        /// <param name="creationTimestamp">The time at which the score was created on the server..</param>
        /// <param name="leaderboardEpoch">The epoch to which the score belongs for the associated leaderboard. By convention, if the leaderboard is all-time, this value will be set to zero..</param>
        /// <param name="profileId">The profile ID of the user who holds this rank. (required).</param>
        /// <param name="profileDisplayName">The profile display name of the user who holds this rank. (required).</param>
        /// <param name="profileImageUrl">The profile image url of the user who holds this rank. (required).</param>
        /// <param name="lastLogin">The last login. (required).</param>
        public RankRow(string id = default(string), long position = default(long), double pointValue = default(double), string scoreUnits = default(string), long creationTimestamp = default(long), long leaderboardEpoch = default(long), string profileId = default(string), string profileDisplayName = default(string), string profileImageUrl = default(string), long lastLogin = default(long))
        {
            // to ensure "profileId" is required (not null)
            if (profileId == null)
            {
                throw new ArgumentNullException("profileId is a required property for RankRow and cannot be null");
            }
            this.ProfileId = profileId;
            // to ensure "profileDisplayName" is required (not null)
            if (profileDisplayName == null)
            {
                throw new ArgumentNullException("profileDisplayName is a required property for RankRow and cannot be null");
            }
            this.ProfileDisplayName = profileDisplayName;
            // to ensure "profileImageUrl" is required (not null)
            if (profileImageUrl == null)
            {
                throw new ArgumentNullException("profileImageUrl is a required property for RankRow and cannot be null");
            }
            this.ProfileImageUrl = profileImageUrl;
            this.LastLogin = lastLogin;
            this.Id = id;
            this.Position = position;
            this.PointValue = pointValue;
            this.ScoreUnits = scoreUnits;
            this.CreationTimestamp = creationTimestamp;
            this.LeaderboardEpoch = leaderboardEpoch;
        }

        /// <summary>
        /// The ID of the Score
        /// </summary>
        /// <value>The ID of the Score</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The position of the associated score in the result set.
        /// </summary>
        /// <value>The position of the associated score in the result set.</value>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public long Position { get; set; }

        /// <summary>
        /// The point value of the score.
        /// </summary>
        /// <value>The point value of the score.</value>
        [DataMember(Name = "pointValue", EmitDefaultValue = false)]
        public double PointValue { get; set; }

        /// <summary>
        /// The the units of measure for the points.  For example, if the points in the game were called \&quot;coins\&quot; instead of \&quot;points\&quot; this would be used to designate as such in the UI.
        /// </summary>
        /// <value>The the units of measure for the points.  For example, if the points in the game were called \&quot;coins\&quot; instead of \&quot;points\&quot; this would be used to designate as such in the UI.</value>
        [DataMember(Name = "scoreUnits", EmitDefaultValue = false)]
        public string ScoreUnits { get; set; }

        /// <summary>
        /// The time at which the score was created on the server.
        /// </summary>
        /// <value>The time at which the score was created on the server.</value>
        [DataMember(Name = "creationTimestamp", EmitDefaultValue = false)]
        public long CreationTimestamp { get; set; }

        /// <summary>
        /// The epoch to which the score belongs for the associated leaderboard. By convention, if the leaderboard is all-time, this value will be set to zero.
        /// </summary>
        /// <value>The epoch to which the score belongs for the associated leaderboard. By convention, if the leaderboard is all-time, this value will be set to zero.</value>
        [DataMember(Name = "leaderboardEpoch", EmitDefaultValue = false)]
        public long LeaderboardEpoch { get; set; }

        /// <summary>
        /// The profile ID of the user who holds this rank.
        /// </summary>
        /// <value>The profile ID of the user who holds this rank.</value>
        [DataMember(Name = "profileId", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileId { get; set; }

        /// <summary>
        /// The profile display name of the user who holds this rank.
        /// </summary>
        /// <value>The profile display name of the user who holds this rank.</value>
        [DataMember(Name = "profileDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileDisplayName { get; set; }

        /// <summary>
        /// The profile image url of the user who holds this rank.
        /// </summary>
        /// <value>The profile image url of the user who holds this rank.</value>
        [DataMember(Name = "profileImageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// The last login.
        /// </summary>
        /// <value>The last login.</value>
        [DataMember(Name = "lastLogin", IsRequired = true, EmitDefaultValue = true)]
        public long LastLogin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RankRow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PointValue: ").Append(PointValue).Append("\n");
            sb.Append("  ScoreUnits: ").Append(ScoreUnits).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  LeaderboardEpoch: ").Append(LeaderboardEpoch).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileDisplayName: ").Append(ProfileDisplayName).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
