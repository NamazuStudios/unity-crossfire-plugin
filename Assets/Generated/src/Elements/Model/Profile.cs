/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Profile
    /// </summary>
    [DataContract(Name = "Profile")]
    public partial class Profile
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Profile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the profile itself. (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="application">application (required).</param>
        /// <param name="imageUrl">A URL to the image of the profile.  (ie the User&#39;s Avatar)..</param>
        /// <param name="imageObject">imageObject.</param>
        /// <param name="displayName">A non-unique display name for this profile. (required).</param>
        /// <param name="metadata">An object containing arbitrary player metadata as key-value pairs..</param>
        /// <param name="lastLogin">The last time this profile has been logged in by the user..</param>
        public Profile(string id = default(string), User user = default(User), Application application = default(Application), string imageUrl = default(string), LargeObjectReference imageObject = default(LargeObjectReference), string displayName = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), long lastLogin = default(long))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Profile and cannot be null");
            }
            this.Id = id;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for Profile and cannot be null");
            }
            this.User = user;
            // to ensure "application" is required (not null)
            if (application == null)
            {
                throw new ArgumentNullException("application is a required property for Profile and cannot be null");
            }
            this.Application = application;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Profile and cannot be null");
            }
            this.DisplayName = displayName;
            this.ImageUrl = imageUrl;
            this.ImageObject = imageObject;
            this.Metadata = metadata;
            this.LastLogin = lastLogin;
        }

        /// <summary>
        /// The unique ID of the profile itself.
        /// </summary>
        /// <value>The unique ID of the profile itself.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", IsRequired = true, EmitDefaultValue = true)]
        public Application Application { get; set; }

        /// <summary>
        /// A URL to the image of the profile.  (ie the User&#39;s Avatar).
        /// </summary>
        /// <value>A URL to the image of the profile.  (ie the User&#39;s Avatar).</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ImageObject
        /// </summary>
        [DataMember(Name = "imageObject", EmitDefaultValue = false)]
        public LargeObjectReference ImageObject { get; set; }

        /// <summary>
        /// A non-unique display name for this profile.
        /// </summary>
        /// <value>A non-unique display name for this profile.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// An object containing arbitrary player metadata as key-value pairs.
        /// </summary>
        /// <value>An object containing arbitrary player metadata as key-value pairs.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// The last time this profile has been logged in by the user.
        /// </summary>
        /// <value>The last time this profile has been logged in by the user.</value>
        [DataMember(Name = "lastLogin", EmitDefaultValue = false)]
        public long LastLogin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ImageObject: ").Append(ImageObject).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
