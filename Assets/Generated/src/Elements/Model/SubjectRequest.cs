/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Specifies the Subjects which can delete the LargeObject.
    /// </summary>
    [DataContract(Name = "SubjectRequest")]
    public partial class SubjectRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubjectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectRequest" /> class.
        /// </summary>
        /// <param name="wildcard">Flag to check who may perform the operation. If true, all anonymous users may perform the operation..</param>
        /// <param name="userIds">A List of all UserIds which can operate against the LargeObject. (required).</param>
        /// <param name="profileIds">A List of all ProfileIds which can operate against the LargeObject. (required).</param>
        public SubjectRequest(bool wildcard = default(bool), List<string> userIds = default(List<string>), List<string> profileIds = default(List<string>))
        {
            // to ensure "userIds" is required (not null)
            if (userIds == null)
            {
                throw new ArgumentNullException("userIds is a required property for SubjectRequest and cannot be null");
            }
            this.UserIds = userIds;
            // to ensure "profileIds" is required (not null)
            if (profileIds == null)
            {
                throw new ArgumentNullException("profileIds is a required property for SubjectRequest and cannot be null");
            }
            this.ProfileIds = profileIds;
            this.Wildcard = wildcard;
        }

        /// <summary>
        /// Flag to check who may perform the operation. If true, all anonymous users may perform the operation.
        /// </summary>
        /// <value>Flag to check who may perform the operation. If true, all anonymous users may perform the operation.</value>
        [DataMember(Name = "wildcard", EmitDefaultValue = true)]
        public bool Wildcard { get; set; }

        /// <summary>
        /// A List of all UserIds which can operate against the LargeObject.
        /// </summary>
        /// <value>A List of all UserIds which can operate against the LargeObject.</value>
        [DataMember(Name = "userIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// A List of all ProfileIds which can operate against the LargeObject.
        /// </summary>
        /// <value>A List of all ProfileIds which can operate against the LargeObject.</value>
        [DataMember(Name = "profileIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ProfileIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubjectRequest {\n");
            sb.Append("  Wildcard: ").Append(Wildcard).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  ProfileIds: ").Append(ProfileIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
