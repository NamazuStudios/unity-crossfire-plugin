/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The final repeating step (may be null if step(s) are specified)
    /// </summary>
    [DataContract(Name = "Step")]
    public partial class Step
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Step" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Step() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Step" /> class.
        /// </summary>
        /// <param name="displayName">The display name for the step (required).</param>
        /// <param name="description">The description of the step (required).</param>
        /// <param name="count">The number of times the step must be completed to receive the reward(s) (required).</param>
        /// <param name="rewards">The reward(s) that will be granted upon completion (required).</param>
        /// <param name="metadata">The metadata for this step.</param>
        public Step(string displayName = default(string), string description = default(string), int count = default(int), List<Reward> rewards = default(List<Reward>), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Step and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Step and cannot be null");
            }
            this.Description = description;
            this.Count = count;
            // to ensure "rewards" is required (not null)
            if (rewards == null)
            {
                throw new ArgumentNullException("rewards is a required property for Step and cannot be null");
            }
            this.Rewards = rewards;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The display name for the step
        /// </summary>
        /// <value>The display name for the step</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the step
        /// </summary>
        /// <value>The description of the step</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The number of times the step must be completed to receive the reward(s)
        /// </summary>
        /// <value>The number of times the step must be completed to receive the reward(s)</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// The reward(s) that will be granted upon completion
        /// </summary>
        /// <value>The reward(s) that will be granted upon completion</value>
        [DataMember(Name = "rewards", IsRequired = true, EmitDefaultValue = true)]
        public List<Reward> Rewards { get; set; }

        /// <summary>
        /// The metadata for this step
        /// </summary>
        /// <value>The metadata for this step</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Step {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
