/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents an arbitrary save data document that persists on the server. The document saves with a version identifier such that clients may resolve conflicts between the local copy and the remote copy.
    /// </summary>
    [DataContract(Name = "SaveDataDocument")]
    public partial class SaveDataDocument
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveDataDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaveDataDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveDataDocument" /> class.
        /// </summary>
        /// <param name="id">The database assigned unique ID of the document..</param>
        /// <param name="slot">The slot of the property..</param>
        /// <param name="user">user.</param>
        /// <param name="profile">profile.</param>
        /// <param name="timestamp">The timestamp of the last write to this document..</param>
        /// <param name="varVersion">The revision of the save data document. (required).</param>
        /// <param name="contents">The contents of the save data. (required).</param>
        public SaveDataDocument(string id = default(string), int slot = default(int), User user = default(User), Profile profile = default(Profile), long timestamp = default(long), string varVersion = default(string), string contents = default(string))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for SaveDataDocument and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for SaveDataDocument and cannot be null");
            }
            this.Contents = contents;
            this.Id = id;
            this.Slot = slot;
            this.User = user;
            this.Profile = profile;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// The database assigned unique ID of the document.
        /// </summary>
        /// <value>The database assigned unique ID of the document.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The slot of the property.
        /// </summary>
        /// <value>The slot of the property.</value>
        [DataMember(Name = "slot", EmitDefaultValue = false)]
        public int Slot { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public Profile Profile { get; set; }

        /// <summary>
        /// The timestamp of the last write to this document.
        /// </summary>
        /// <value>The timestamp of the last write to this document.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// The revision of the save data document.
        /// </summary>
        /// <value>The revision of the save data document.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The contents of the save data.
        /// </summary>
        /// <value>The contents of the save data.</value>
        [DataMember(Name = "contents", IsRequired = true, EmitDefaultValue = true)]
        public string Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaveDataDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
