/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// TaglibDescriptor
    /// </summary>
    [DataContract(Name = "TaglibDescriptor")]
    public partial class TaglibDescriptor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaglibDescriptor" /> class.
        /// </summary>
        /// <param name="taglibLocation">taglibLocation.</param>
        /// <param name="taglibURI">taglibURI.</param>
        public TaglibDescriptor(string taglibLocation = default(string), string taglibURI = default(string))
        {
            this.TaglibLocation = taglibLocation;
            this.TaglibURI = taglibURI;
        }

        /// <summary>
        /// Gets or Sets TaglibLocation
        /// </summary>
        [DataMember(Name = "taglibLocation", EmitDefaultValue = false)]
        public string TaglibLocation { get; set; }

        /// <summary>
        /// Gets or Sets TaglibURI
        /// </summary>
        [DataMember(Name = "taglibURI", EmitDefaultValue = false)]
        public string TaglibURI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaglibDescriptor {\n");
            sb.Append("  TaglibLocation: ").Append(TaglibLocation).Append("\n");
            sb.Append("  TaglibURI: ").Append(TaglibURI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
