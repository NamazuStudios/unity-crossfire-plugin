/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The full JSON response as described in AuthScheme
    /// </summary>
    [DataContract(Name = "AuthScheme")]
    public partial class AuthScheme
    {
        /// <summary>
        /// The digital signature matching the public key format.
        /// </summary>
        /// <value>The digital signature matching the public key format.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlgorithmEnum
        {
            /// <summary>
            /// Enum RSA256 for value: RSA_256
            /// </summary>
            [EnumMember(Value = "RSA_256")]
            RSA256 = 1,

            /// <summary>
            /// Enum RSA384 for value: RSA_384
            /// </summary>
            [EnumMember(Value = "RSA_384")]
            RSA384 = 2,

            /// <summary>
            /// Enum RSA512 for value: RSA_512
            /// </summary>
            [EnumMember(Value = "RSA_512")]
            RSA512 = 3
        }


        /// <summary>
        /// The digital signature matching the public key format.
        /// </summary>
        /// <value>The digital signature matching the public key format.</value>
        [DataMember(Name = "algorithm", IsRequired = true, EmitDefaultValue = true)]
        public AlgorithmEnum Algorithm { get; set; }
        /// <summary>
        /// The highest permitted user level this particular scheme will authorize.
        /// </summary>
        /// <value>The highest permitted user level this particular scheme will authorize.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserLevelEnum
        {
            /// <summary>
            /// Enum UNPRIVILEGED for value: UNPRIVILEGED
            /// </summary>
            [EnumMember(Value = "UNPRIVILEGED")]
            UNPRIVILEGED = 1,

            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 2,

            /// <summary>
            /// Enum SUPERUSER for value: SUPERUSER
            /// </summary>
            [EnumMember(Value = "SUPERUSER")]
            SUPERUSER = 3
        }


        /// <summary>
        /// The highest permitted user level this particular scheme will authorize.
        /// </summary>
        /// <value>The highest permitted user level this particular scheme will authorize.</value>
        [DataMember(Name = "userLevel", IsRequired = true, EmitDefaultValue = true)]
        public UserLevelEnum UserLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthScheme" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the auth scheme. (required).</param>
        /// <param name="audience">A unique name used to identify the scheme within the instance of Elements. (required).</param>
        /// <param name="publicKey">A base-64 encoded string representing an x509 encoded public key. (required).</param>
        /// <param name="algorithm">The digital signature matching the public key format. (required).</param>
        /// <param name="userLevel">The highest permitted user level this particular scheme will authorize. (required).</param>
        /// <param name="tags">The tags used to tag this auth scheme. (required).</param>
        /// <param name="allowedIssuers">A list of issuers allowed to use this scheme. (required).</param>
        public AuthScheme(string id = default(string), string audience = default(string), string publicKey = default(string), AlgorithmEnum algorithm = default(AlgorithmEnum), UserLevelEnum userLevel = default(UserLevelEnum), List<string> tags = default(List<string>), List<string> allowedIssuers = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AuthScheme and cannot be null");
            }
            this.Id = id;
            // to ensure "audience" is required (not null)
            if (audience == null)
            {
                throw new ArgumentNullException("audience is a required property for AuthScheme and cannot be null");
            }
            this.Audience = audience;
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new ArgumentNullException("publicKey is a required property for AuthScheme and cannot be null");
            }
            this.PublicKey = publicKey;
            this.Algorithm = algorithm;
            this.UserLevel = userLevel;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for AuthScheme and cannot be null");
            }
            this.Tags = tags;
            // to ensure "allowedIssuers" is required (not null)
            if (allowedIssuers == null)
            {
                throw new ArgumentNullException("allowedIssuers is a required property for AuthScheme and cannot be null");
            }
            this.AllowedIssuers = allowedIssuers;
        }

        /// <summary>
        /// The unique ID of the auth scheme.
        /// </summary>
        /// <value>The unique ID of the auth scheme.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique name used to identify the scheme within the instance of Elements.
        /// </summary>
        /// <value>A unique name used to identify the scheme within the instance of Elements.</value>
        [DataMember(Name = "audience", IsRequired = true, EmitDefaultValue = true)]
        public string Audience { get; set; }

        /// <summary>
        /// A base-64 encoded string representing an x509 encoded public key.
        /// </summary>
        /// <value>A base-64 encoded string representing an x509 encoded public key.</value>
        [DataMember(Name = "publicKey", IsRequired = true, EmitDefaultValue = true)]
        public string PublicKey { get; set; }

        /// <summary>
        /// The tags used to tag this auth scheme.
        /// </summary>
        /// <value>The tags used to tag this auth scheme.</value>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// A list of issuers allowed to use this scheme.
        /// </summary>
        /// <value>A list of issuers allowed to use this scheme.</value>
        [DataMember(Name = "allowedIssuers", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AllowedIssuers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthScheme {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  UserLevel: ").Append(UserLevel).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  AllowedIssuers: ").Append(AllowedIssuers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
