/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.4.12 - 269e2454fdf4ae1e7fe7e3b5889ab8dc3e23d53f - 2025-10-27 02:10:17
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ElementEventConsumerRecordObjectMethodTypeParametersInner
    /// </summary>
    [DataContract(Name = "ElementEventConsumerRecordObject_method_typeParameters_inner")]
    public partial class ElementEventConsumerRecordObjectMethodTypeParametersInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementEventConsumerRecordObjectMethodTypeParametersInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="bounds">bounds.</param>
        /// <param name="annotatedBounds">annotatedBounds.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="annotations">annotations.</param>
        /// <param name="declaredAnnotations">declaredAnnotations.</param>
        public ElementEventConsumerRecordObjectMethodTypeParametersInner(string name = default(string), List<ElementEventConsumerRecordObjectMethodTypeParametersInnerBoundsInner> bounds = default(List<ElementEventConsumerRecordObjectMethodTypeParametersInnerBoundsInner>), List<ElementEventConsumerRecordObjectMethodTypeParametersInnerAnnotatedBoundsInner> annotatedBounds = default(List<ElementEventConsumerRecordObjectMethodTypeParametersInnerAnnotatedBoundsInner>), string typeName = default(string), List<Object> annotations = default(List<Object>), List<Object> declaredAnnotations = default(List<Object>))
        {
            this.Name = name;
            this.Bounds = bounds;
            this.AnnotatedBounds = annotatedBounds;
            this.TypeName = typeName;
            this.Annotations = annotations;
            this.DeclaredAnnotations = declaredAnnotations;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Bounds
        /// </summary>
        [DataMember(Name = "bounds", EmitDefaultValue = false)]
        public List<ElementEventConsumerRecordObjectMethodTypeParametersInnerBoundsInner> Bounds { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedBounds
        /// </summary>
        [DataMember(Name = "annotatedBounds", EmitDefaultValue = false)]
        public List<ElementEventConsumerRecordObjectMethodTypeParametersInnerAnnotatedBoundsInner> AnnotatedBounds { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name = "typeName", EmitDefaultValue = false)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public List<Object> Annotations { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAnnotations
        /// </summary>
        [DataMember(Name = "declaredAnnotations", EmitDefaultValue = false)]
        public List<Object> DeclaredAnnotations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElementEventConsumerRecordObjectMethodTypeParametersInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  AnnotatedBounds: ").Append(AnnotatedBounds).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  DeclaredAnnotations: ").Append(DeclaredAnnotations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
