/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The full JSON response as described in AuthScheme
    /// </summary>
    [DataContract(Name = "OidcAuthScheme")]
    public partial class OidcAuthScheme
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OidcAuthScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OidcAuthScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OidcAuthScheme" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the auth scheme. (required).</param>
        /// <param name="name">The unique name of the auth scheme..</param>
        /// <param name="issuer">A unique name used to identify the scheme within the instance of Elements. When validating from an external source (e.g. Google or Apple SSO), must match the &#39;iss&#39; property of the decoded JWT. (required).</param>
        /// <param name="keys">A set of JWKs containing the keys required to validate JWT signatures. (required).</param>
        /// <param name="keysUrl">The URL for the JWK data. Will attempt to refresh keys if the kid cannot be found in the collection..</param>
        /// <param name="mediaType">The JWK format. Defaults to application/json.</param>
        public OidcAuthScheme(string id = default(string), string name = default(string), string issuer = default(string), List<JWK> keys = default(List<JWK>), string keysUrl = default(string), string mediaType = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OidcAuthScheme and cannot be null");
            }
            this.Id = id;
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new ArgumentNullException("issuer is a required property for OidcAuthScheme and cannot be null");
            }
            this.Issuer = issuer;
            // to ensure "keys" is required (not null)
            if (keys == null)
            {
                throw new ArgumentNullException("keys is a required property for OidcAuthScheme and cannot be null");
            }
            this.Keys = keys;
            this.Name = name;
            this.KeysUrl = keysUrl;
            this.MediaType = mediaType;
        }

        /// <summary>
        /// The unique ID of the auth scheme.
        /// </summary>
        /// <value>The unique ID of the auth scheme.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The unique name of the auth scheme.
        /// </summary>
        /// <value>The unique name of the auth scheme.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A unique name used to identify the scheme within the instance of Elements. When validating from an external source (e.g. Google or Apple SSO), must match the &#39;iss&#39; property of the decoded JWT.
        /// </summary>
        /// <value>A unique name used to identify the scheme within the instance of Elements. When validating from an external source (e.g. Google or Apple SSO), must match the &#39;iss&#39; property of the decoded JWT.</value>
        [DataMember(Name = "issuer", IsRequired = true, EmitDefaultValue = true)]
        public string Issuer { get; set; }

        /// <summary>
        /// A set of JWKs containing the keys required to validate JWT signatures.
        /// </summary>
        /// <value>A set of JWKs containing the keys required to validate JWT signatures.</value>
        [DataMember(Name = "keys", IsRequired = true, EmitDefaultValue = true)]
        public List<JWK> Keys { get; set; }

        /// <summary>
        /// The URL for the JWK data. Will attempt to refresh keys if the kid cannot be found in the collection.
        /// </summary>
        /// <value>The URL for the JWK data. Will attempt to refresh keys if the kid cannot be found in the collection.</value>
        [DataMember(Name = "keysUrl", EmitDefaultValue = false)]
        public string KeysUrl { get; set; }

        /// <summary>
        /// The JWK format. Defaults to application/json
        /// </summary>
        /// <value>The JWK format. Defaults to application/json</value>
        [DataMember(Name = "mediaType", EmitDefaultValue = false)]
        public string MediaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OidcAuthScheme {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  KeysUrl: ").Append(KeysUrl).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
