/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Specifies a Custodial Wallet Account Creating a Wallet
    /// </summary>
    [DataContract(Name = "CreateWalletRequestAccount")]
    public partial class CreateWalletRequestAccount
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWalletRequestAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateWalletRequestAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWalletRequestAccount" /> class.
        /// </summary>
        /// <param name="generate">Flag which indicates if the account should be generated or imported..</param>
        /// <param name="address">The Wallet Address - id public identity. Must be null for generated wallets. (required).</param>
        /// <param name="privateKey">The Wallet Account - id private identity. May be null if the wallet is for receive only..</param>
        public CreateWalletRequestAccount(bool generate = default(bool), string address = default(string), string privateKey = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for CreateWalletRequestAccount and cannot be null");
            }
            this.Address = address;
            this.Generate = generate;
            this.PrivateKey = privateKey;
        }

        /// <summary>
        /// Flag which indicates if the account should be generated or imported.
        /// </summary>
        /// <value>Flag which indicates if the account should be generated or imported.</value>
        [DataMember(Name = "generate", EmitDefaultValue = true)]
        public bool Generate { get; set; }

        /// <summary>
        /// The Wallet Address - id public identity. Must be null for generated wallets.
        /// </summary>
        /// <value>The Wallet Address - id public identity. Must be null for generated wallets.</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The Wallet Account - id private identity. May be null if the wallet is for receive only.
        /// </summary>
        /// <value>The Wallet Account - id private identity. May be null if the wallet is for receive only.</value>
        [DataMember(Name = "privateKey", EmitDefaultValue = false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWalletRequestAccount {\n");
            sb.Append("  Generate: ").Append(Generate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
