/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Application
    /// </summary>
    [DataContract(Name = "Application")]
    public partial class Application
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Application() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="gitBranch">gitBranch.</param>
        /// <param name="scriptRepoUrl">scriptRepoUrl.</param>
        /// <param name="httpDocumentationUrl">httpDocumentationUrl.</param>
        /// <param name="httpDocumentationUiUrl">httpDocumentationUiUrl.</param>
        /// <param name="httpTunnelEndpointUrl">httpTunnelEndpointUrl.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="applicationConfiguration">applicationConfiguration.</param>
        public Application(string id = default(string), string name = default(string), string description = default(string), string gitBranch = default(string), string scriptRepoUrl = default(string), string httpDocumentationUrl = default(string), string httpDocumentationUiUrl = default(string), string httpTunnelEndpointUrl = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), ApplicationConfiguration applicationConfiguration = default(ApplicationConfiguration))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Application and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.Description = description;
            this.GitBranch = gitBranch;
            this.ScriptRepoUrl = scriptRepoUrl;
            this.HttpDocumentationUrl = httpDocumentationUrl;
            this.HttpDocumentationUiUrl = httpDocumentationUiUrl;
            this.HttpTunnelEndpointUrl = httpTunnelEndpointUrl;
            this.Attributes = attributes;
            this.ApplicationConfiguration = applicationConfiguration;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets GitBranch
        /// </summary>
        [DataMember(Name = "gitBranch", EmitDefaultValue = false)]
        public string GitBranch { get; set; }

        /// <summary>
        /// Gets or Sets ScriptRepoUrl
        /// </summary>
        [DataMember(Name = "scriptRepoUrl", EmitDefaultValue = false)]
        public string ScriptRepoUrl { get; set; }

        /// <summary>
        /// Gets or Sets HttpDocumentationUrl
        /// </summary>
        [DataMember(Name = "httpDocumentationUrl", EmitDefaultValue = false)]
        public string HttpDocumentationUrl { get; set; }

        /// <summary>
        /// Gets or Sets HttpDocumentationUiUrl
        /// </summary>
        [DataMember(Name = "httpDocumentationUiUrl", EmitDefaultValue = false)]
        public string HttpDocumentationUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets HttpTunnelEndpointUrl
        /// </summary>
        [DataMember(Name = "httpTunnelEndpointUrl", EmitDefaultValue = false)]
        public string HttpTunnelEndpointUrl { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationConfiguration
        /// </summary>
        [DataMember(Name = "applicationConfiguration", EmitDefaultValue = false)]
        public ApplicationConfiguration ApplicationConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Application {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GitBranch: ").Append(GitBranch).Append("\n");
            sb.Append("  ScriptRepoUrl: ").Append(ScriptRepoUrl).Append("\n");
            sb.Append("  HttpDocumentationUrl: ").Append(HttpDocumentationUrl).Append("\n");
            sb.Append("  HttpDocumentationUiUrl: ").Append(HttpDocumentationUiUrl).Append("\n");
            sb.Append("  HttpTunnelEndpointUrl: ").Append(HttpTunnelEndpointUrl).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ApplicationConfiguration: ").Append(ApplicationConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
