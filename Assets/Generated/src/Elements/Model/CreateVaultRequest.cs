/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// CreateVaultRequest
    /// </summary>
    [DataContract(Name = "CreateVaultRequest")]
    public partial class CreateVaultRequest
    {
        /// <summary>
        /// The encryption algorithm used to secure the vault. Once crated, a vault will contains a private/public key pair which will be used to encrypt the wallets within the vault.
        /// </summary>
        /// <value>The encryption algorithm used to secure the vault. Once crated, a vault will contains a private/public key pair which will be used to encrypt the wallets within the vault.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlgorithmEnum
        {
            /// <summary>
            /// Enum RSA256 for value: RSA_256
            /// </summary>
            [EnumMember(Value = "RSA_256")]
            RSA256 = 1,

            /// <summary>
            /// Enum RSA384 for value: RSA_384
            /// </summary>
            [EnumMember(Value = "RSA_384")]
            RSA384 = 2,

            /// <summary>
            /// Enum RSA512 for value: RSA_512
            /// </summary>
            [EnumMember(Value = "RSA_512")]
            RSA512 = 3
        }


        /// <summary>
        /// The encryption algorithm used to secure the vault. Once crated, a vault will contains a private/public key pair which will be used to encrypt the wallets within the vault.
        /// </summary>
        /// <value>The encryption algorithm used to secure the vault. Once crated, a vault will contains a private/public key pair which will be used to encrypt the wallets within the vault.</value>
        [DataMember(Name = "algorithm", EmitDefaultValue = false)]
        public AlgorithmEnum? Algorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVaultRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateVaultRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVaultRequest" /> class.
        /// </summary>
        /// <param name="userId">The elements-defined user ID to own the vault. (required).</param>
        /// <param name="displayName">A user-defined name for the vault. This is used simply for the user&#39;s reference and has no bearing  onthe vault&#39;s functionality. (required).</param>
        /// <param name="passphrase">The passphrase used to to encrypt the vault. If empty, then the vault will not be encrypted. Some configurations may opt to disallow encryption entirely..</param>
        /// <param name="algorithm">The encryption algorithm used to secure the vault. Once crated, a vault will contains a private/public key pair which will be used to encrypt the wallets within the vault..</param>
        public CreateVaultRequest(string userId = default(string), string displayName = default(string), string passphrase = default(string), AlgorithmEnum? algorithm = default(AlgorithmEnum?))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for CreateVaultRequest and cannot be null");
            }
            this.UserId = userId;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CreateVaultRequest and cannot be null");
            }
            this.DisplayName = displayName;
            this.Passphrase = passphrase;
            this.Algorithm = algorithm;
        }

        /// <summary>
        /// The elements-defined user ID to own the vault.
        /// </summary>
        /// <value>The elements-defined user ID to own the vault.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// A user-defined name for the vault. This is used simply for the user&#39;s reference and has no bearing  onthe vault&#39;s functionality.
        /// </summary>
        /// <value>A user-defined name for the vault. This is used simply for the user&#39;s reference and has no bearing  onthe vault&#39;s functionality.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The passphrase used to to encrypt the vault. If empty, then the vault will not be encrypted. Some configurations may opt to disallow encryption entirely.
        /// </summary>
        /// <value>The passphrase used to to encrypt the vault. If empty, then the vault will not be encrypted. Some configurations may opt to disallow encryption entirely.</value>
        [DataMember(Name = "passphrase", EmitDefaultValue = false)]
        public string Passphrase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateVaultRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
