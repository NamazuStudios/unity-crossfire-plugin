/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Leaderboard
    /// </summary>
    [DataContract(Name = "Leaderboard")]
    public partial class Leaderboard
    {
        /// <summary>
        /// The time strategy for the leaderboard. Current options are ALL_TIME and EPOCHAL.
        /// </summary>
        /// <value>The time strategy for the leaderboard. Current options are ALL_TIME and EPOCHAL.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeStrategyTypeEnum
        {
            /// <summary>
            /// Enum ALLTIME for value: ALL_TIME
            /// </summary>
            [EnumMember(Value = "ALL_TIME")]
            ALLTIME = 1,

            /// <summary>
            /// Enum EPOCHAL for value: EPOCHAL
            /// </summary>
            [EnumMember(Value = "EPOCHAL")]
            EPOCHAL = 2
        }


        /// <summary>
        /// The time strategy for the leaderboard. Current options are ALL_TIME and EPOCHAL.
        /// </summary>
        /// <value>The time strategy for the leaderboard. Current options are ALL_TIME and EPOCHAL.</value>
        [DataMember(Name = "timeStrategyType", IsRequired = true, EmitDefaultValue = true)]
        public TimeStrategyTypeEnum TimeStrategyType { get; set; }
        /// <summary>
        /// The score strategy for the leaderboard. Current options are OVERWRITE_IF_GREATER and ACCUMULATE.
        /// </summary>
        /// <value>The score strategy for the leaderboard. Current options are OVERWRITE_IF_GREATER and ACCUMULATE.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScoreStrategyTypeEnum
        {
            /// <summary>
            /// Enum OVERWRITEIFGREATER for value: OVERWRITE_IF_GREATER
            /// </summary>
            [EnumMember(Value = "OVERWRITE_IF_GREATER")]
            OVERWRITEIFGREATER = 1,

            /// <summary>
            /// Enum ACCUMULATE for value: ACCUMULATE
            /// </summary>
            [EnumMember(Value = "ACCUMULATE")]
            ACCUMULATE = 2
        }


        /// <summary>
        /// The score strategy for the leaderboard. Current options are OVERWRITE_IF_GREATER and ACCUMULATE.
        /// </summary>
        /// <value>The score strategy for the leaderboard. Current options are OVERWRITE_IF_GREATER and ACCUMULATE.</value>
        [DataMember(Name = "scoreStrategyType", IsRequired = true, EmitDefaultValue = true)]
        public ScoreStrategyTypeEnum ScoreStrategyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Leaderboard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Leaderboard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Leaderboard" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">The name of the leaderboard.  This must be unique across all leaderboards. (required).</param>
        /// <param name="timeStrategyType">The time strategy for the leaderboard. Current options are ALL_TIME and EPOCHAL. (required).</param>
        /// <param name="scoreStrategyType">The score strategy for the leaderboard. Current options are OVERWRITE_IF_GREATER and ACCUMULATE. (required).</param>
        /// <param name="title">The user-presentable name or title for for the leaderboard. (required).</param>
        /// <param name="scoreUnits">The units-of measure for the score type of the leaderboard. (required).</param>
        /// <param name="firstEpochTimestamp">The time at which the leaderboard epoch intervals should begin (in ms). If null, then the leaderboard is all-time and not epochal. During creation, if this value is provided, then epochInterval must also be provided..</param>
        /// <param name="epochInterval">The duration for a leaderboard epoch interval (in ms). If null, then the leaderboard is all-time and not epochal. During creation, if this value is provided, then firstEpochTimestamp must also be provided..</param>
        public Leaderboard(string id = default(string), string name = default(string), TimeStrategyTypeEnum timeStrategyType = default(TimeStrategyTypeEnum), ScoreStrategyTypeEnum scoreStrategyType = default(ScoreStrategyTypeEnum), string title = default(string), string scoreUnits = default(string), long firstEpochTimestamp = default(long), long epochInterval = default(long))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Leaderboard and cannot be null");
            }
            this.Name = name;
            this.TimeStrategyType = timeStrategyType;
            this.ScoreStrategyType = scoreStrategyType;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for Leaderboard and cannot be null");
            }
            this.Title = title;
            // to ensure "scoreUnits" is required (not null)
            if (scoreUnits == null)
            {
                throw new ArgumentNullException("scoreUnits is a required property for Leaderboard and cannot be null");
            }
            this.ScoreUnits = scoreUnits;
            this.Id = id;
            this.FirstEpochTimestamp = firstEpochTimestamp;
            this.EpochInterval = epochInterval;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the leaderboard.  This must be unique across all leaderboards.
        /// </summary>
        /// <value>The name of the leaderboard.  This must be unique across all leaderboards.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The user-presentable name or title for for the leaderboard.
        /// </summary>
        /// <value>The user-presentable name or title for for the leaderboard.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The units-of measure for the score type of the leaderboard.
        /// </summary>
        /// <value>The units-of measure for the score type of the leaderboard.</value>
        [DataMember(Name = "scoreUnits", IsRequired = true, EmitDefaultValue = true)]
        public string ScoreUnits { get; set; }

        /// <summary>
        /// The time at which the leaderboard epoch intervals should begin (in ms). If null, then the leaderboard is all-time and not epochal. During creation, if this value is provided, then epochInterval must also be provided.
        /// </summary>
        /// <value>The time at which the leaderboard epoch intervals should begin (in ms). If null, then the leaderboard is all-time and not epochal. During creation, if this value is provided, then epochInterval must also be provided.</value>
        [DataMember(Name = "firstEpochTimestamp", EmitDefaultValue = false)]
        public long FirstEpochTimestamp { get; set; }

        /// <summary>
        /// The duration for a leaderboard epoch interval (in ms). If null, then the leaderboard is all-time and not epochal. During creation, if this value is provided, then firstEpochTimestamp must also be provided.
        /// </summary>
        /// <value>The duration for a leaderboard epoch interval (in ms). If null, then the leaderboard is all-time and not epochal. During creation, if this value is provided, then firstEpochTimestamp must also be provided.</value>
        [DataMember(Name = "epochInterval", EmitDefaultValue = false)]
        public long EpochInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Leaderboard {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TimeStrategyType: ").Append(TimeStrategyType).Append("\n");
            sb.Append("  ScoreStrategyType: ").Append(ScoreStrategyType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ScoreUnits: ").Append(ScoreUnits).Append("\n");
            sb.Append("  FirstEpochTimestamp: ").Append(FirstEpochTimestamp).Append("\n");
            sb.Append("  EpochInterval: ").Append(EpochInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
