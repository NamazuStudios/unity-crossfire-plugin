/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a Reward that has been issued but has not yet been claimed by the user.  The reward is assigned a unique ID to ensure that it may not have been applied more than once.
    /// </summary>
    [DataContract(Name = "RewardIssuance")]
    public partial class RewardIssuance
    {
        /// <summary>
        /// The state of the reward. On creation, this is automatically assigned to be ISSUED. If the current value of the state is REDEEMED, then the state is no longer allowed to be updated. This valuemay not be directly modified- -the redeem DAO method should be used instead to perform the redemption process.
        /// </summary>
        /// <value>The state of the reward. On creation, this is automatically assigned to be ISSUED. If the current value of the state is REDEEMED, then the state is no longer allowed to be updated. This valuemay not be directly modified- -the redeem DAO method should be used instead to perform the redemption process.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ISSUED for value: ISSUED
            /// </summary>
            [EnumMember(Value = "ISSUED")]
            ISSUED = 1,

            /// <summary>
            /// Enum REDEEMED for value: REDEEMED
            /// </summary>
            [EnumMember(Value = "REDEEMED")]
            REDEEMED = 2
        }


        /// <summary>
        /// The state of the reward. On creation, this is automatically assigned to be ISSUED. If the current value of the state is REDEEMED, then the state is no longer allowed to be updated. This valuemay not be directly modified- -the redeem DAO method should be used instead to perform the redemption process.
        /// </summary>
        /// <value>The state of the reward. On creation, this is automatically assigned to be ISSUED. If the current value of the state is REDEEMED, then the state is no longer allowed to be updated. This valuemay not be directly modified- -the redeem DAO method should be used instead to perform the redemption process.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Defines whether multiple issuances for the given user+reward+context may occur. If the type is set to NON_PERSISTENT, at most one ISSUED RewardIssuance may exist in the server at a time for a given user and context. If the type is set to PERSISTENT, at most one ISSUED or REDEEMED RewardIssuance may exist in the server for a given user and context, i.e. once a PERSISTENT RewardIssuance has been submitted, a new one may never be submitted and will be rejected by the server. Note that this value cannot be updated. By default, this will be set to NON_PERSISTENT.
        /// </summary>
        /// <value>Defines whether multiple issuances for the given user+reward+context may occur. If the type is set to NON_PERSISTENT, at most one ISSUED RewardIssuance may exist in the server at a time for a given user and context. If the type is set to PERSISTENT, at most one ISSUED or REDEEMED RewardIssuance may exist in the server for a given user and context, i.e. once a PERSISTENT RewardIssuance has been submitted, a new one may never be submitted and will be rejected by the server. Note that this value cannot be updated. By default, this will be set to NON_PERSISTENT.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PERSISTENT for value: PERSISTENT
            /// </summary>
            [EnumMember(Value = "PERSISTENT")]
            PERSISTENT = 1,

            /// <summary>
            /// Enum NONPERSISTENT for value: NON_PERSISTENT
            /// </summary>
            [EnumMember(Value = "NON_PERSISTENT")]
            NONPERSISTENT = 2
        }


        /// <summary>
        /// Defines whether multiple issuances for the given user+reward+context may occur. If the type is set to NON_PERSISTENT, at most one ISSUED RewardIssuance may exist in the server at a time for a given user and context. If the type is set to PERSISTENT, at most one ISSUED or REDEEMED RewardIssuance may exist in the server for a given user and context, i.e. once a PERSISTENT RewardIssuance has been submitted, a new one may never be submitted and will be rejected by the server. Note that this value cannot be updated. By default, this will be set to NON_PERSISTENT.
        /// </summary>
        /// <value>Defines whether multiple issuances for the given user+reward+context may occur. If the type is set to NON_PERSISTENT, at most one ISSUED RewardIssuance may exist in the server at a time for a given user and context. If the type is set to PERSISTENT, at most one ISSUED or REDEEMED RewardIssuance may exist in the server for a given user and context, i.e. once a PERSISTENT RewardIssuance has been submitted, a new one may never be submitted and will be rejected by the server. Note that this value cannot be updated. By default, this will be set to NON_PERSISTENT.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardIssuance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RewardIssuance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardIssuance" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the issuance. (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="state">The state of the reward. On creation, this is automatically assigned to be ISSUED. If the current value of the state is REDEEMED, then the state is no longer allowed to be updated. This valuemay not be directly modified- -the redeem DAO method should be used instead to perform the redemption process. (required).</param>
        /// <param name="item">item.</param>
        /// <param name="itemQuantity">The amount of Items to be set/added to the InventoryItem upon redemption..</param>
        /// <param name="context">A generic String used to uniquely identify the RewardIssuance issuance. If the RewardIssuance is created by the client, this value must be specified to prevent erroneous duplicate issuances. E.g. if the client successfully submits an issuance but fails to receive the response, the client is expected to submit a new issuance with the same context string. Similarly, the client application should have safeguards in place in the event of a crash to prevent duplicate submissions: e.g. ensuring that the context string is unchanged when performing multiple issuances of the same RewardIssuance. If the RewardIssuance is generated by the server, this will be defined automatically. The context cannot be updated after creation. Note that an context defined via the API should not begin with &#39;server.&#39; as that is a protected namespace. (required).</param>
        /// <param name="type">Defines whether multiple issuances for the given user+reward+context may occur. If the type is set to NON_PERSISTENT, at most one ISSUED RewardIssuance may exist in the server at a time for a given user and context. If the type is set to PERSISTENT, at most one ISSUED or REDEEMED RewardIssuance may exist in the server for a given user and context, i.e. once a PERSISTENT RewardIssuance has been submitted, a new one may never be submitted and will be rejected by the server. Note that this value cannot be updated. By default, this will be set to NON_PERSISTENT. (required).</param>
        /// <param name="source">Identifies the source of the issuance, e.g. &#39;Client&#39;, &#39;IAP&#39;, &#39;Leaderboard&#39;. This may be specified manually by the client if desired. Note that this value cannot be updated..</param>
        /// <param name="metadata">Metadata for the issuance. May be optionally defined by the client on creation. If the source is a server-side value, then a predefined structure will always be followed that provides additional information as to the source of the issuance (e.g. mission progress/step information)..</param>
        /// <param name="tags">The tags used to categorize this Reward Issuance..</param>
        /// <param name="expirationTimestamp">Optionally define when the issuance should expire. This value may be updated to extend when the expiration occurs. When set, this value must be greater than the current time on the server.Note that the record may not actually be deleted for up to sixty seconds after the time noted in thetimestamp..</param>
        /// <param name="uuid">Internal unique identifier generated and assigned on creation..</param>
        public RewardIssuance(string id = default(string), User user = default(User), StateEnum state = default(StateEnum), Item item = default(Item), int itemQuantity = default(int), string context = default(string), TypeEnum type = default(TypeEnum), string source = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), List<string> tags = default(List<string>), long expirationTimestamp = default(long), string uuid = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for RewardIssuance and cannot be null");
            }
            this.Id = id;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for RewardIssuance and cannot be null");
            }
            this.User = user;
            this.State = state;
            // to ensure "context" is required (not null)
            if (context == null)
            {
                throw new ArgumentNullException("context is a required property for RewardIssuance and cannot be null");
            }
            this.Context = context;
            this.Type = type;
            this.Item = item;
            this.ItemQuantity = itemQuantity;
            this.Source = source;
            this.Metadata = metadata;
            this.Tags = tags;
            this.ExpirationTimestamp = expirationTimestamp;
            this.Uuid = uuid;
        }

        /// <summary>
        /// The unique ID of the issuance.
        /// </summary>
        /// <value>The unique ID of the issuance.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name = "item", EmitDefaultValue = false)]
        public Item Item { get; set; }

        /// <summary>
        /// The amount of Items to be set/added to the InventoryItem upon redemption.
        /// </summary>
        /// <value>The amount of Items to be set/added to the InventoryItem upon redemption.</value>
        [DataMember(Name = "itemQuantity", EmitDefaultValue = false)]
        public int ItemQuantity { get; set; }

        /// <summary>
        /// A generic String used to uniquely identify the RewardIssuance issuance. If the RewardIssuance is created by the client, this value must be specified to prevent erroneous duplicate issuances. E.g. if the client successfully submits an issuance but fails to receive the response, the client is expected to submit a new issuance with the same context string. Similarly, the client application should have safeguards in place in the event of a crash to prevent duplicate submissions: e.g. ensuring that the context string is unchanged when performing multiple issuances of the same RewardIssuance. If the RewardIssuance is generated by the server, this will be defined automatically. The context cannot be updated after creation. Note that an context defined via the API should not begin with &#39;server.&#39; as that is a protected namespace.
        /// </summary>
        /// <value>A generic String used to uniquely identify the RewardIssuance issuance. If the RewardIssuance is created by the client, this value must be specified to prevent erroneous duplicate issuances. E.g. if the client successfully submits an issuance but fails to receive the response, the client is expected to submit a new issuance with the same context string. Similarly, the client application should have safeguards in place in the event of a crash to prevent duplicate submissions: e.g. ensuring that the context string is unchanged when performing multiple issuances of the same RewardIssuance. If the RewardIssuance is generated by the server, this will be defined automatically. The context cannot be updated after creation. Note that an context defined via the API should not begin with &#39;server.&#39; as that is a protected namespace.</value>
        [DataMember(Name = "context", IsRequired = true, EmitDefaultValue = true)]
        public string Context { get; set; }

        /// <summary>
        /// Identifies the source of the issuance, e.g. &#39;Client&#39;, &#39;IAP&#39;, &#39;Leaderboard&#39;. This may be specified manually by the client if desired. Note that this value cannot be updated.
        /// </summary>
        /// <value>Identifies the source of the issuance, e.g. &#39;Client&#39;, &#39;IAP&#39;, &#39;Leaderboard&#39;. This may be specified manually by the client if desired. Note that this value cannot be updated.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Metadata for the issuance. May be optionally defined by the client on creation. If the source is a server-side value, then a predefined structure will always be followed that provides additional information as to the source of the issuance (e.g. mission progress/step information).
        /// </summary>
        /// <value>Metadata for the issuance. May be optionally defined by the client on creation. If the source is a server-side value, then a predefined structure will always be followed that provides additional information as to the source of the issuance (e.g. mission progress/step information).</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// The tags used to categorize this Reward Issuance.
        /// </summary>
        /// <value>The tags used to categorize this Reward Issuance.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Optionally define when the issuance should expire. This value may be updated to extend when the expiration occurs. When set, this value must be greater than the current time on the server.Note that the record may not actually be deleted for up to sixty seconds after the time noted in thetimestamp.
        /// </summary>
        /// <value>Optionally define when the issuance should expire. This value may be updated to extend when the expiration occurs. When set, this value must be greater than the current time on the server.Note that the record may not actually be deleted for up to sixty seconds after the time noted in thetimestamp.</value>
        [DataMember(Name = "expirationTimestamp", EmitDefaultValue = false)]
        public long ExpirationTimestamp { get; set; }

        /// <summary>
        /// Internal unique identifier generated and assigned on creation.
        /// </summary>
        /// <value>Internal unique identifier generated and assigned on creation.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RewardIssuance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  ItemQuantity: ").Append(ItemQuantity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
