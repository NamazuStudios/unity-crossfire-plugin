/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// OAuth2SessionRequest
    /// </summary>
    [DataContract(Name = "OAuth2SessionRequest")]
    public partial class OAuth2SessionRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2SessionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OAuth2SessionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2SessionRequest" /> class.
        /// </summary>
        /// <param name="schemeId">The OAuth2 scheme ID to use. (required).</param>
        /// <param name="requestParameters">The request parameters to be used in the token validation request. This should adhere to any params marked as fromClient in the auth scheme..</param>
        /// <param name="requestHeaders">The request headers to be used in the token validation request. This should adhere to any headers marked as fromClient in the auth scheme..</param>
        /// <param name="profileId">The profile ID to assign to the session..</param>
        /// <param name="profileSelector">A query string to select the profile to use. NOTE: This will not be run if a profileId is specified..</param>
        public OAuth2SessionRequest(string schemeId = default(string), Dictionary<string, string> requestParameters = default(Dictionary<string, string>), Dictionary<string, string> requestHeaders = default(Dictionary<string, string>), string profileId = default(string), string profileSelector = default(string))
        {
            // to ensure "schemeId" is required (not null)
            if (schemeId == null)
            {
                throw new ArgumentNullException("schemeId is a required property for OAuth2SessionRequest and cannot be null");
            }
            this.SchemeId = schemeId;
            this.RequestParameters = requestParameters;
            this.RequestHeaders = requestHeaders;
            this.ProfileId = profileId;
            this.ProfileSelector = profileSelector;
        }

        /// <summary>
        /// The OAuth2 scheme ID to use.
        /// </summary>
        /// <value>The OAuth2 scheme ID to use.</value>
        [DataMember(Name = "schemeId", IsRequired = true, EmitDefaultValue = true)]
        public string SchemeId { get; set; }

        /// <summary>
        /// The request parameters to be used in the token validation request. This should adhere to any params marked as fromClient in the auth scheme.
        /// </summary>
        /// <value>The request parameters to be used in the token validation request. This should adhere to any params marked as fromClient in the auth scheme.</value>
        [DataMember(Name = "requestParameters", EmitDefaultValue = false)]
        public Dictionary<string, string> RequestParameters { get; set; }

        /// <summary>
        /// The request headers to be used in the token validation request. This should adhere to any headers marked as fromClient in the auth scheme.
        /// </summary>
        /// <value>The request headers to be used in the token validation request. This should adhere to any headers marked as fromClient in the auth scheme.</value>
        [DataMember(Name = "requestHeaders", EmitDefaultValue = false)]
        public Dictionary<string, string> RequestHeaders { get; set; }

        /// <summary>
        /// The profile ID to assign to the session.
        /// </summary>
        /// <value>The profile ID to assign to the session.</value>
        [DataMember(Name = "profileId", EmitDefaultValue = false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// A query string to select the profile to use. NOTE: This will not be run if a profileId is specified.
        /// </summary>
        /// <value>A query string to select the profile to use. NOTE: This will not be run if a profileId is specified.</value>
        [DataMember(Name = "profileSelector", EmitDefaultValue = false)]
        public string ProfileSelector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuth2SessionRequest {\n");
            sb.Append("  SchemeId: ").Append(SchemeId).Append("\n");
            sb.Append("  RequestParameters: ").Append(RequestParameters).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileSelector: ").Append(ProfileSelector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
