/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Image object stored in EL large objects storage.
    /// </summary>
    [DataContract(Name = "LargeObjectReference")]
    public partial class LargeObjectReference
    {
        /// <summary>
        /// Current state of the LargeObject.
        /// </summary>
        /// <value>Current state of the LargeObject.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum EMPTY for value: EMPTY
            /// </summary>
            [EnumMember(Value = "EMPTY")]
            EMPTY = 1,

            /// <summary>
            /// Enum UPLOADED for value: UPLOADED
            /// </summary>
            [EnumMember(Value = "UPLOADED")]
            UPLOADED = 2
        }


        /// <summary>
        /// Current state of the LargeObject.
        /// </summary>
        /// <value>Current state of the LargeObject.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LargeObjectReference" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the LargeObject..</param>
        /// <param name="url">The URL where the binary contents of the LargeObject may be read..</param>
        /// <param name="mimeType">The MIME type of the LargeObject..</param>
        /// <param name="state">Current state of the LargeObject..</param>
        /// <param name="lastModified">Date of last modification.</param>
        public LargeObjectReference(string id = default(string), string url = default(string), string mimeType = default(string), StateEnum? state = default(StateEnum?), DateTime lastModified = default(DateTime))
        {
            this.Id = id;
            this.Url = url;
            this.MimeType = mimeType;
            this.State = state;
            this.LastModified = lastModified;
        }

        /// <summary>
        /// The unique ID of the LargeObject.
        /// </summary>
        /// <value>The unique ID of the LargeObject.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The URL where the binary contents of the LargeObject may be read.
        /// </summary>
        /// <value>The URL where the binary contents of the LargeObject may be read.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The MIME type of the LargeObject.
        /// </summary>
        /// <value>The MIME type of the LargeObject.</value>
        [DataMember(Name = "mimeType", EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Date of last modification
        /// </summary>
        /// <value>Date of last modification</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LargeObjectReference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
