/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// HealthStatus
    /// </summary>
    [DataContract(Name = "HealthStatus")]
    public partial class HealthStatus
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthStatus" /> class.
        /// </summary>
        /// <param name="checksFailed">checksFailed.</param>
        /// <param name="checksPerformed">checksPerformed.</param>
        /// <param name="overallHealth">overallHealth.</param>
        /// <param name="problems">problems.</param>
        /// <param name="instanceStatus">instanceStatus.</param>
        /// <param name="databaseStatus">databaseStatus.</param>
        /// <param name="discoveryHealthStatus">discoveryHealthStatus.</param>
        /// <param name="routingHealthStatus">routingHealthStatus.</param>
        /// <param name="invokerHealthStatus">invokerHealthStatus.</param>
        public HealthStatus(int checksFailed = default(int), int checksPerformed = default(int), double overallHealth = default(double), List<string> problems = default(List<string>), InstanceHealthStatus instanceStatus = default(InstanceHealthStatus), List<DatabaseHealthStatus> databaseStatus = default(List<DatabaseHealthStatus>), DiscoveryHealthStatus discoveryHealthStatus = default(DiscoveryHealthStatus), RoutingHealthStatus routingHealthStatus = default(RoutingHealthStatus), InvokerHealthStatus invokerHealthStatus = default(InvokerHealthStatus))
        {
            this.ChecksFailed = checksFailed;
            this.ChecksPerformed = checksPerformed;
            this.OverallHealth = overallHealth;
            this.Problems = problems;
            this.InstanceStatus = instanceStatus;
            this.DatabaseStatus = databaseStatus;
            this.DiscoveryHealthStatus = discoveryHealthStatus;
            this.RoutingHealthStatus = routingHealthStatus;
            this.InvokerHealthStatus = invokerHealthStatus;
        }

        /// <summary>
        /// Gets or Sets ChecksFailed
        /// </summary>
        [DataMember(Name = "checksFailed", EmitDefaultValue = false)]
        public int ChecksFailed { get; set; }

        /// <summary>
        /// Gets or Sets ChecksPerformed
        /// </summary>
        [DataMember(Name = "checksPerformed", EmitDefaultValue = false)]
        public int ChecksPerformed { get; set; }

        /// <summary>
        /// Gets or Sets OverallHealth
        /// </summary>
        [DataMember(Name = "overallHealth", EmitDefaultValue = false)]
        public double OverallHealth { get; set; }

        /// <summary>
        /// Gets or Sets Problems
        /// </summary>
        [DataMember(Name = "problems", EmitDefaultValue = false)]
        public List<string> Problems { get; set; }

        /// <summary>
        /// Gets or Sets InstanceStatus
        /// </summary>
        [DataMember(Name = "instanceStatus", EmitDefaultValue = false)]
        public InstanceHealthStatus InstanceStatus { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseStatus
        /// </summary>
        [DataMember(Name = "databaseStatus", EmitDefaultValue = false)]
        public List<DatabaseHealthStatus> DatabaseStatus { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryHealthStatus
        /// </summary>
        [DataMember(Name = "discoveryHealthStatus", EmitDefaultValue = false)]
        public DiscoveryHealthStatus DiscoveryHealthStatus { get; set; }

        /// <summary>
        /// Gets or Sets RoutingHealthStatus
        /// </summary>
        [DataMember(Name = "routingHealthStatus", EmitDefaultValue = false)]
        public RoutingHealthStatus RoutingHealthStatus { get; set; }

        /// <summary>
        /// Gets or Sets InvokerHealthStatus
        /// </summary>
        [DataMember(Name = "invokerHealthStatus", EmitDefaultValue = false)]
        public InvokerHealthStatus InvokerHealthStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HealthStatus {\n");
            sb.Append("  ChecksFailed: ").Append(ChecksFailed).Append("\n");
            sb.Append("  ChecksPerformed: ").Append(ChecksPerformed).Append("\n");
            sb.Append("  OverallHealth: ").Append(OverallHealth).Append("\n");
            sb.Append("  Problems: ").Append(Problems).Append("\n");
            sb.Append("  InstanceStatus: ").Append(InstanceStatus).Append("\n");
            sb.Append("  DatabaseStatus: ").Append(DatabaseStatus).Append("\n");
            sb.Append("  DiscoveryHealthStatus: ").Append(DiscoveryHealthStatus).Append("\n");
            sb.Append("  RoutingHealthStatus: ").Append(RoutingHealthStatus).Append("\n");
            sb.Append("  InvokerHealthStatus: ").Append(InvokerHealthStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
