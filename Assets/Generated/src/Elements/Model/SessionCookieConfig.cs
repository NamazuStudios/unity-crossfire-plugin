/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// SessionCookieConfig
    /// </summary>
    [DataContract(Name = "SessionCookieConfig")]
    public partial class SessionCookieConfig
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionCookieConfig" /> class.
        /// </summary>
        /// <param name="maxAge">maxAge.</param>
        /// <param name="domain">domain.</param>
        /// <param name="path">path.</param>
        /// <param name="name">name.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="comment">comment.</param>
        /// <param name="secure">secure.</param>
        /// <param name="httpOnly">httpOnly.</param>
        public SessionCookieConfig(int maxAge = default(int), string domain = default(string), string path = default(string), string name = default(string), Dictionary<string, string> attributes = default(Dictionary<string, string>), string comment = default(string), bool secure = default(bool), bool httpOnly = default(bool))
        {
            this.MaxAge = maxAge;
            this.Domain = domain;
            this.Path = path;
            this.Name = name;
            this.Attributes = attributes;
            this.Comment = comment;
            this.Secure = secure;
            this.HttpOnly = httpOnly;
        }

        /// <summary>
        /// Gets or Sets MaxAge
        /// </summary>
        [DataMember(Name = "maxAge", EmitDefaultValue = false)]
        public int MaxAge { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [DataMember(Name = "secure", EmitDefaultValue = true)]
        public bool Secure { get; set; }

        /// <summary>
        /// Gets or Sets HttpOnly
        /// </summary>
        [DataMember(Name = "httpOnly", EmitDefaultValue = true)]
        public bool HttpOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionCookieConfig {\n");
            sb.Append("  MaxAge: ").Append(MaxAge).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  HttpOnly: ").Append(HttpOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
