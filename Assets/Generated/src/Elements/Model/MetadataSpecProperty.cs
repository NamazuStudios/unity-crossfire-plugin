/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The updated list of properties.
    /// </summary>
    [DataContract(Name = "MetadataSpecProperty")]
    public partial class MetadataSpecProperty
    {
        /// <summary>
        /// The field type
        /// </summary>
        /// <value>The field type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 1,

            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 2,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 3,

            /// <summary>
            /// Enum ARRAY for value: ARRAY
            /// </summary>
            [EnumMember(Value = "ARRAY")]
            ARRAY = 4,

            /// <summary>
            /// Enum ENUM for value: ENUM
            /// </summary>
            [EnumMember(Value = "ENUM")]
            ENUM = 5,

            /// <summary>
            /// Enum OBJECT for value: OBJECT
            /// </summary>
            [EnumMember(Value = "OBJECT")]
            OBJECT = 6,

            /// <summary>
            /// Enum TAGS for value: TAGS
            /// </summary>
            [EnumMember(Value = "TAGS")]
            TAGS = 7
        }


        /// <summary>
        /// The field type
        /// </summary>
        /// <value>The field type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSpecProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataSpecProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSpecProperty" /> class.
        /// </summary>
        /// <param name="name">The unique name of the field (required).</param>
        /// <param name="displayName">The display name of the field (required).</param>
        /// <param name="type">The field type (required).</param>
        /// <param name="required">True if the field is required..</param>
        /// <param name="placeholder">The placeholder description when displaying in the editor..</param>
        /// <param name="defaultValue">The default description, null if left unspecified..</param>
        /// <param name="properties">properties.</param>
        public MetadataSpecProperty(string name = default(string), string displayName = default(string), TypeEnum type = default(TypeEnum), bool required = default(bool), string placeholder = default(string), Object defaultValue = default(Object), List<MetadataSpecProperty> properties = default(List<MetadataSpecProperty>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MetadataSpecProperty and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for MetadataSpecProperty and cannot be null");
            }
            this.DisplayName = displayName;
            this.Type = type;
            this.Required = required;
            this.Placeholder = placeholder;
            this.DefaultValue = defaultValue;
            this.Properties = properties;
        }

        /// <summary>
        /// The unique name of the field
        /// </summary>
        /// <value>The unique name of the field</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The display name of the field
        /// </summary>
        /// <value>The display name of the field</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// True if the field is required.
        /// </summary>
        /// <value>True if the field is required.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// The placeholder description when displaying in the editor.
        /// </summary>
        /// <value>The placeholder description when displaying in the editor.</value>
        [DataMember(Name = "placeholder", EmitDefaultValue = false)]
        public string Placeholder { get; set; }

        /// <summary>
        /// The default description, null if left unspecified.
        /// </summary>
        /// <value>The default description, null if left unspecified.</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<MetadataSpecProperty> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataSpecProperty {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
