/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// CreateAppleIapReceipt
    /// </summary>
    [DataContract(Name = "CreateAppleIapReceipt")]
    public partial class CreateAppleIapReceipt
    {
        /// <summary>
        /// Defines CreateAppleIapReceiptEnvironment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreateAppleIapReceiptEnvironmentEnum
        {
            /// <summary>
            /// Enum SANDBOX for value: SANDBOX
            /// </summary>
            [EnumMember(Value = "SANDBOX")]
            SANDBOX = 1,

            /// <summary>
            /// Enum PRODUCTION for value: PRODUCTION
            /// </summary>
            [EnumMember(Value = "PRODUCTION")]
            PRODUCTION = 2
        }


        /// <summary>
        /// Gets or Sets CreateAppleIapReceiptEnvironment
        /// </summary>
        [DataMember(Name = "createAppleIapReceiptEnvironment", EmitDefaultValue = false)]
        public CreateAppleIapReceiptEnvironmentEnum? CreateAppleIapReceiptEnvironment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAppleIapReceipt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAppleIapReceipt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAppleIapReceipt" /> class.
        /// </summary>
        /// <param name="receiptData">The base64-encoded string of the raw IAP receipt. (required).</param>
        /// <param name="createAppleIapReceiptEnvironment">createAppleIapReceiptEnvironment.</param>
        public CreateAppleIapReceipt(string receiptData = default(string), CreateAppleIapReceiptEnvironmentEnum? createAppleIapReceiptEnvironment = default(CreateAppleIapReceiptEnvironmentEnum?))
        {
            // to ensure "receiptData" is required (not null)
            if (receiptData == null)
            {
                throw new ArgumentNullException("receiptData is a required property for CreateAppleIapReceipt and cannot be null");
            }
            this.ReceiptData = receiptData;
            this.CreateAppleIapReceiptEnvironment = createAppleIapReceiptEnvironment;
        }

        /// <summary>
        /// The base64-encoded string of the raw IAP receipt.
        /// </summary>
        /// <value>The base64-encoded string of the raw IAP receipt.</value>
        [DataMember(Name = "receiptData", IsRequired = true, EmitDefaultValue = true)]
        public string ReceiptData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAppleIapReceipt {\n");
            sb.Append("  ReceiptData: ").Append(ReceiptData).Append("\n");
            sb.Append("  CreateAppleIapReceiptEnvironment: ").Append(CreateAppleIapReceiptEnvironment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
