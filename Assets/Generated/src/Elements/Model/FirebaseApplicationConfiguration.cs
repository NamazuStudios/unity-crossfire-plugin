/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// FirebaseApplicationConfiguration
    /// </summary>
    [DataContract(Name = "FirebaseApplicationConfiguration")]
    public partial class FirebaseApplicationConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirebaseApplicationConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FirebaseApplicationConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FirebaseApplicationConfiguration" /> class.
        /// </summary>
        /// <param name="id">The database assigned ID for the application configuration. (required).</param>
        /// <param name="name">The application-configuration specific unique ID. Unique per application per category. (required).</param>
        /// <param name="type">The fully-qualified Java type of ApplicationConfiguration. (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="parent">parent (required).</param>
        /// <param name="projectId">The contents of the serviceAccountCredentials.json file. (required).</param>
        /// <param name="serviceAccountCredentials">The contents of the serviceAccountCredentials.json file. (required).</param>
        public FirebaseApplicationConfiguration(string id = default(string), string name = default(string), string type = default(string), string description = default(string), Application parent = default(Application), string projectId = default(string), string serviceAccountCredentials = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.Description = description;
            // to ensure "parent" is required (not null)
            if (parent == null)
            {
                throw new ArgumentNullException("parent is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.Parent = parent;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "serviceAccountCredentials" is required (not null)
            if (serviceAccountCredentials == null)
            {
                throw new ArgumentNullException("serviceAccountCredentials is a required property for FirebaseApplicationConfiguration and cannot be null");
            }
            this.ServiceAccountCredentials = serviceAccountCredentials;
        }

        /// <summary>
        /// The database assigned ID for the application configuration.
        /// </summary>
        /// <value>The database assigned ID for the application configuration.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The application-configuration specific unique ID. Unique per application per category.
        /// </summary>
        /// <value>The application-configuration specific unique ID. Unique per application per category.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The fully-qualified Java type of ApplicationConfiguration.
        /// </summary>
        /// <value>The fully-qualified Java type of ApplicationConfiguration.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", IsRequired = true, EmitDefaultValue = true)]
        public Application Parent { get; set; }

        /// <summary>
        /// The contents of the serviceAccountCredentials.json file.
        /// </summary>
        /// <value>The contents of the serviceAccountCredentials.json file.</value>
        [DataMember(Name = "projectId", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The contents of the serviceAccountCredentials.json file.
        /// </summary>
        /// <value>The contents of the serviceAccountCredentials.json file.</value>
        [DataMember(Name = "serviceAccountCredentials", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceAccountCredentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirebaseApplicationConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ServiceAccountCredentials: ").Append(ServiceAccountCredentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
