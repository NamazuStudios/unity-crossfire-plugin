/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.4.12 - 269e2454fdf4ae1e7fe7e3b5889ab8dc3e23d53f - 2025-10-27 02:10:17
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ElementEventConsumerRecordObjectMethodParametersInner
    /// </summary>
    [DataContract(Name = "ElementEventConsumerRecordObject_method_parameters_inner")]
    public partial class ElementEventConsumerRecordObjectMethodParametersInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementEventConsumerRecordObjectMethodParametersInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="modifiers">modifiers.</param>
        /// <param name="synthetic">synthetic.</param>
        /// <param name="annotations">annotations.</param>
        /// <param name="declaredAnnotations">declaredAnnotations.</param>
        /// <param name="annotatedType">annotatedType.</param>
        /// <param name="parameterizedType">parameterizedType.</param>
        /// <param name="varArgs">varArgs.</param>
        /// <param name="namePresent">namePresent.</param>
        /// <param name="declaringExecutable">declaringExecutable.</param>
        /// <param name="varImplicit">varImplicit.</param>
        public ElementEventConsumerRecordObjectMethodParametersInner(string name = default(string), int modifiers = default(int), bool synthetic = default(bool), List<Object> annotations = default(List<Object>), List<Object> declaredAnnotations = default(List<Object>), ElementEventConsumerRecordObjectMethodTypeParametersInnerAnnotatedBoundsInner annotatedType = default(ElementEventConsumerRecordObjectMethodTypeParametersInnerAnnotatedBoundsInner), ElementEventConsumerRecordObjectMethodTypeParametersInnerBoundsInner parameterizedType = default(ElementEventConsumerRecordObjectMethodTypeParametersInnerBoundsInner), bool varArgs = default(bool), bool namePresent = default(bool), ElementEventConsumerRecordObjectMethodParametersInnerDeclaringExecutable declaringExecutable = default(ElementEventConsumerRecordObjectMethodParametersInnerDeclaringExecutable), bool varImplicit = default(bool))
        {
            this.Name = name;
            this.Modifiers = modifiers;
            this.Synthetic = synthetic;
            this.Annotations = annotations;
            this.DeclaredAnnotations = declaredAnnotations;
            this.AnnotatedType = annotatedType;
            this.ParameterizedType = parameterizedType;
            this.VarArgs = varArgs;
            this.NamePresent = namePresent;
            this.DeclaringExecutable = declaringExecutable;
            this.Implicit = varImplicit;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Modifiers
        /// </summary>
        [DataMember(Name = "modifiers", EmitDefaultValue = false)]
        public int Modifiers { get; set; }

        /// <summary>
        /// Gets or Sets Synthetic
        /// </summary>
        [DataMember(Name = "synthetic", EmitDefaultValue = true)]
        public bool Synthetic { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public List<Object> Annotations { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAnnotations
        /// </summary>
        [DataMember(Name = "declaredAnnotations", EmitDefaultValue = false)]
        public List<Object> DeclaredAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedType
        /// </summary>
        [DataMember(Name = "annotatedType", EmitDefaultValue = false)]
        public ElementEventConsumerRecordObjectMethodTypeParametersInnerAnnotatedBoundsInner AnnotatedType { get; set; }

        /// <summary>
        /// Gets or Sets ParameterizedType
        /// </summary>
        [DataMember(Name = "parameterizedType", EmitDefaultValue = false)]
        public ElementEventConsumerRecordObjectMethodTypeParametersInnerBoundsInner ParameterizedType { get; set; }

        /// <summary>
        /// Gets or Sets VarArgs
        /// </summary>
        [DataMember(Name = "varArgs", EmitDefaultValue = true)]
        public bool VarArgs { get; set; }

        /// <summary>
        /// Gets or Sets NamePresent
        /// </summary>
        [DataMember(Name = "namePresent", EmitDefaultValue = true)]
        public bool NamePresent { get; set; }

        /// <summary>
        /// Gets or Sets DeclaringExecutable
        /// </summary>
        [DataMember(Name = "declaringExecutable", EmitDefaultValue = false)]
        public ElementEventConsumerRecordObjectMethodParametersInnerDeclaringExecutable DeclaringExecutable { get; set; }

        /// <summary>
        /// Gets or Sets Implicit
        /// </summary>
        [DataMember(Name = "implicit", EmitDefaultValue = true)]
        public bool Implicit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElementEventConsumerRecordObjectMethodParametersInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Synthetic: ").Append(Synthetic).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  DeclaredAnnotations: ").Append(DeclaredAnnotations).Append("\n");
            sb.Append("  AnnotatedType: ").Append(AnnotatedType).Append("\n");
            sb.Append("  ParameterizedType: ").Append(ParameterizedType).Append("\n");
            sb.Append("  VarArgs: ").Append(VarArgs).Append("\n");
            sb.Append("  NamePresent: ").Append(NamePresent).Append("\n");
            sb.Append("  DeclaringExecutable: ").Append(DeclaringExecutable).Append("\n");
            sb.Append("  Implicit: ").Append(Implicit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
