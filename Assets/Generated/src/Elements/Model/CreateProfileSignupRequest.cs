/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Used in conjunction with the user creation request to specify.
    /// </summary>
    [DataContract(Name = "CreateProfileSignupRequest")]
    public partial class CreateProfileSignupRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProfileSignupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateProfileSignupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProfileSignupRequest" /> class.
        /// </summary>
        /// <param name="applicationId">The application id this profile belongs to. (required).</param>
        /// <param name="displayName">A non-unique display name for this profile. If left null, the server will assign..</param>
        /// <param name="imageUrl">A URL to the image of the profile.  (ie the User&#39;s Avatar). If left null, the server will no assign any URL..</param>
        public CreateProfileSignupRequest(string applicationId = default(string), string displayName = default(string), string imageUrl = default(string))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for CreateProfileSignupRequest and cannot be null");
            }
            this.ApplicationId = applicationId;
            this.DisplayName = displayName;
            this.ImageUrl = imageUrl;
        }

        /// <summary>
        /// The application id this profile belongs to.
        /// </summary>
        /// <value>The application id this profile belongs to.</value>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// A non-unique display name for this profile. If left null, the server will assign.
        /// </summary>
        /// <value>A non-unique display name for this profile. If left null, the server will assign.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A URL to the image of the profile.  (ie the User&#39;s Avatar). If left null, the server will no assign any URL.
        /// </summary>
        /// <value>A URL to the image of the profile.  (ie the User&#39;s Avatar). If left null, the server will no assign any URL.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateProfileSignupRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
