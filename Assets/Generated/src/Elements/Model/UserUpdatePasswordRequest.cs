/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// UserUpdatePasswordRequest
    /// </summary>
    [DataContract(Name = "UserUpdatePasswordRequest")]
    public partial class UserUpdatePasswordRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdatePasswordRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserUpdatePasswordRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdatePasswordRequest" /> class.
        /// </summary>
        /// <param name="oldPassword">The user&#39;s current password. (required).</param>
        /// <param name="newPassword">The user&#39;s updated password. (required).</param>
        /// <param name="profileId">The user&#39;s profile id to assign the new session. Leave blank for no profile id..</param>
        public UserUpdatePasswordRequest(string oldPassword = default(string), string newPassword = default(string), string profileId = default(string))
        {
            // to ensure "oldPassword" is required (not null)
            if (oldPassword == null)
            {
                throw new ArgumentNullException("oldPassword is a required property for UserUpdatePasswordRequest and cannot be null");
            }
            this.OldPassword = oldPassword;
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new ArgumentNullException("newPassword is a required property for UserUpdatePasswordRequest and cannot be null");
            }
            this.NewPassword = newPassword;
            this.ProfileId = profileId;
        }

        /// <summary>
        /// The user&#39;s current password.
        /// </summary>
        /// <value>The user&#39;s current password.</value>
        [DataMember(Name = "oldPassword", IsRequired = true, EmitDefaultValue = true)]
        public string OldPassword { get; set; }

        /// <summary>
        /// The user&#39;s updated password.
        /// </summary>
        /// <value>The user&#39;s updated password.</value>
        [DataMember(Name = "newPassword", IsRequired = true, EmitDefaultValue = true)]
        public string NewPassword { get; set; }

        /// <summary>
        /// The user&#39;s profile id to assign the new session. Leave blank for no profile id.
        /// </summary>
        /// <value>The user&#39;s profile id to assign the new session. Leave blank for no profile id.</value>
        [DataMember(Name = "profileId", EmitDefaultValue = false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserUpdatePasswordRequest {\n");
            sb.Append("  OldPassword: ").Append(OldPassword).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
