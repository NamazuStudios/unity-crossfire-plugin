/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Represents a custom metadata object.
    /// </summary>
    [DataContract(Name = "Metadata")]
    public partial class Metadata
    {
        /// <summary>
        /// The minimum level of access required to view this metadata.
        /// </summary>
        /// <value>The minimum level of access required to view this metadata.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessLevelEnum
        {
            /// <summary>
            /// Enum UNPRIVILEGED for value: UNPRIVILEGED
            /// </summary>
            [EnumMember(Value = "UNPRIVILEGED")]
            UNPRIVILEGED = 1,

            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 2,

            /// <summary>
            /// Enum SUPERUSER for value: SUPERUSER
            /// </summary>
            [EnumMember(Value = "SUPERUSER")]
            SUPERUSER = 3
        }


        /// <summary>
        /// The minimum level of access required to view this metadata.
        /// </summary>
        /// <value>The minimum level of access required to view this metadata.</value>
        [DataMember(Name = "accessLevel", IsRequired = true, EmitDefaultValue = true)]
        public AccessLevelEnum AccessLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Metadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metadata" /> class.
        /// </summary>
        /// <param name="id">The metadata object&#39;s database assigned unique ID. (required).</param>
        /// <param name="name">A unique name for the metadata object. (required).</param>
        /// <param name="varMetadata">An object containing the metadata payload as key-value pairs. (required).</param>
        /// <param name="metadataSpec">metadataSpec.</param>
        /// <param name="accessLevel">The minimum level of access required to view this metadata. (required).</param>
        public Metadata(string id = default(string), string name = default(string), Dictionary<string, Object> varMetadata = default(Dictionary<string, Object>), MetadataSpec metadataSpec = default(MetadataSpec), AccessLevelEnum accessLevel = default(AccessLevelEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Metadata and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Metadata and cannot be null");
            }
            this.Name = name;
            // to ensure "varMetadata" is required (not null)
            if (varMetadata == null)
            {
                throw new ArgumentNullException("varMetadata is a required property for Metadata and cannot be null");
            }
            this.VarMetadata = varMetadata;
            this.AccessLevel = accessLevel;
            this.MetadataSpec = metadataSpec;
        }

        /// <summary>
        /// The metadata object&#39;s database assigned unique ID.
        /// </summary>
        /// <value>The metadata object&#39;s database assigned unique ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique name for the metadata object.
        /// </summary>
        /// <value>A unique name for the metadata object.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// An object containing the metadata payload as key-value pairs.
        /// </summary>
        /// <value>An object containing the metadata payload as key-value pairs.</value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> VarMetadata { get; set; }

        /// <summary>
        /// Gets or Sets MetadataSpec
        /// </summary>
        [DataMember(Name = "metadataSpec", EmitDefaultValue = false)]
        public MetadataSpec MetadataSpec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metadata {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarMetadata: ").Append(VarMetadata).Append("\n");
            sb.Append("  MetadataSpec: ").Append(MetadataSpec).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
