/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Score
    /// </summary>
    [DataContract(Name = "Score")]
    public partial class Score
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Score" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Score() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Score" /> class.
        /// </summary>
        /// <param name="id">The ID of the Score (required).</param>
        /// <param name="profile">profile (required).</param>
        /// <param name="pointValue">The point value of the score..</param>
        /// <param name="scoreUnits">The the units of measure for the points.  For example, if the points in the game were called \&quot;coins\&quot; instead of \&quot;points\&quot; this would be used to designate as such in the UI..</param>
        /// <param name="creationTimestamp">The time at which the score was created on the server. (required).</param>
        /// <param name="leaderboardEpoch">The epoch to which the score belongs for the associated leaderboard. By convention, if the leaderboard is all-time, this value will be set to zero. (required).</param>
        public Score(string id = default(string), Profile profile = default(Profile), double pointValue = default(double), string scoreUnits = default(string), long creationTimestamp = default(long), long leaderboardEpoch = default(long))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Score and cannot be null");
            }
            this.Id = id;
            // to ensure "profile" is required (not null)
            if (profile == null)
            {
                throw new ArgumentNullException("profile is a required property for Score and cannot be null");
            }
            this.Profile = profile;
            this.CreationTimestamp = creationTimestamp;
            this.LeaderboardEpoch = leaderboardEpoch;
            this.PointValue = pointValue;
            this.ScoreUnits = scoreUnits;
        }

        /// <summary>
        /// The ID of the Score
        /// </summary>
        /// <value>The ID of the Score</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", IsRequired = true, EmitDefaultValue = true)]
        public Profile Profile { get; set; }

        /// <summary>
        /// The point value of the score.
        /// </summary>
        /// <value>The point value of the score.</value>
        [DataMember(Name = "pointValue", EmitDefaultValue = false)]
        public double PointValue { get; set; }

        /// <summary>
        /// The the units of measure for the points.  For example, if the points in the game were called \&quot;coins\&quot; instead of \&quot;points\&quot; this would be used to designate as such in the UI.
        /// </summary>
        /// <value>The the units of measure for the points.  For example, if the points in the game were called \&quot;coins\&quot; instead of \&quot;points\&quot; this would be used to designate as such in the UI.</value>
        [DataMember(Name = "scoreUnits", EmitDefaultValue = false)]
        public string ScoreUnits { get; set; }

        /// <summary>
        /// The time at which the score was created on the server.
        /// </summary>
        /// <value>The time at which the score was created on the server.</value>
        [DataMember(Name = "creationTimestamp", IsRequired = true, EmitDefaultValue = true)]
        public long CreationTimestamp { get; set; }

        /// <summary>
        /// The epoch to which the score belongs for the associated leaderboard. By convention, if the leaderboard is all-time, this value will be set to zero.
        /// </summary>
        /// <value>The epoch to which the score belongs for the associated leaderboard. By convention, if the leaderboard is all-time, this value will be set to zero.</value>
        [DataMember(Name = "leaderboardEpoch", IsRequired = true, EmitDefaultValue = true)]
        public long LeaderboardEpoch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Score {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  PointValue: ").Append(PointValue).Append("\n");
            sb.Append("  ScoreUnits: ").Append(ScoreUnits).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  LeaderboardEpoch: ").Append(LeaderboardEpoch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
