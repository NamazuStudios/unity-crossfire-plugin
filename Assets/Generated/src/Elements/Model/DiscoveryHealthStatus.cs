/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// DiscoveryHealthStatus
    /// </summary>
    [DataContract(Name = "DiscoveryHealthStatus")]
    public partial class DiscoveryHealthStatus
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoveryHealthStatus" /> class.
        /// </summary>
        /// <param name="records">records.</param>
        /// <param name="knownHosts">knownHosts.</param>
        public DiscoveryHealthStatus(List<string> records = default(List<string>), List<string> knownHosts = default(List<string>))
        {
            this.Records = records;
            this.KnownHosts = knownHosts;
        }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>
        [DataMember(Name = "records", EmitDefaultValue = false)]
        public List<string> Records { get; set; }

        /// <summary>
        /// Gets or Sets KnownHosts
        /// </summary>
        [DataMember(Name = "knownHosts", EmitDefaultValue = false)]
        public List<string> KnownHosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscoveryHealthStatus {\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  KnownHosts: ").Append(KnownHosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
