/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ServletContextClassLoaderParentDefinedPackagesInner
    /// </summary>
    [DataContract(Name = "ServletContext_classLoader_parent_definedPackages_inner")]
    public partial class ServletContextClassLoaderParentDefinedPackagesInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServletContextClassLoaderParentDefinedPackagesInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="annotations">annotations.</param>
        /// <param name="declaredAnnotations">declaredAnnotations.</param>
        /// <param name="varSealed">varSealed.</param>
        /// <param name="specificationTitle">specificationTitle.</param>
        /// <param name="specificationVersion">specificationVersion.</param>
        /// <param name="specificationVendor">specificationVendor.</param>
        /// <param name="implementationTitle">implementationTitle.</param>
        /// <param name="implementationVersion">implementationVersion.</param>
        /// <param name="implementationVendor">implementationVendor.</param>
        public ServletContextClassLoaderParentDefinedPackagesInner(string name = default(string), List<Object> annotations = default(List<Object>), List<Object> declaredAnnotations = default(List<Object>), bool varSealed = default(bool), string specificationTitle = default(string), string specificationVersion = default(string), string specificationVendor = default(string), string implementationTitle = default(string), string implementationVersion = default(string), string implementationVendor = default(string))
        {
            this.Name = name;
            this.Annotations = annotations;
            this.DeclaredAnnotations = declaredAnnotations;
            this.Sealed = varSealed;
            this.SpecificationTitle = specificationTitle;
            this.SpecificationVersion = specificationVersion;
            this.SpecificationVendor = specificationVendor;
            this.ImplementationTitle = implementationTitle;
            this.ImplementationVersion = implementationVersion;
            this.ImplementationVendor = implementationVendor;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public List<Object> Annotations { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAnnotations
        /// </summary>
        [DataMember(Name = "declaredAnnotations", EmitDefaultValue = false)]
        public List<Object> DeclaredAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets Sealed
        /// </summary>
        [DataMember(Name = "sealed", EmitDefaultValue = true)]
        public bool Sealed { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationTitle
        /// </summary>
        [DataMember(Name = "specificationTitle", EmitDefaultValue = false)]
        public string SpecificationTitle { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationVersion
        /// </summary>
        [DataMember(Name = "specificationVersion", EmitDefaultValue = false)]
        public string SpecificationVersion { get; set; }

        /// <summary>
        /// Gets or Sets SpecificationVendor
        /// </summary>
        [DataMember(Name = "specificationVendor", EmitDefaultValue = false)]
        public string SpecificationVendor { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationTitle
        /// </summary>
        [DataMember(Name = "implementationTitle", EmitDefaultValue = false)]
        public string ImplementationTitle { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationVersion
        /// </summary>
        [DataMember(Name = "implementationVersion", EmitDefaultValue = false)]
        public string ImplementationVersion { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationVendor
        /// </summary>
        [DataMember(Name = "implementationVendor", EmitDefaultValue = false)]
        public string ImplementationVendor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServletContextClassLoaderParentDefinedPackagesInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  DeclaredAnnotations: ").Append(DeclaredAnnotations).Append("\n");
            sb.Append("  Sealed: ").Append(Sealed).Append("\n");
            sb.Append("  SpecificationTitle: ").Append(SpecificationTitle).Append("\n");
            sb.Append("  SpecificationVersion: ").Append(SpecificationVersion).Append("\n");
            sb.Append("  SpecificationVendor: ").Append(SpecificationVendor).Append("\n");
            sb.Append("  ImplementationTitle: ").Append(ImplementationTitle).Append("\n");
            sb.Append("  ImplementationVersion: ").Append(ImplementationVersion).Append("\n");
            sb.Append("  ImplementationVendor: ").Append(ImplementationVendor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
