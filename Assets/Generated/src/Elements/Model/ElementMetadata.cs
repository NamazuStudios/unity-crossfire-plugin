/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.4.12 - 269e2454fdf4ae1e7fe7e3b5889ab8dc3e23d53f - 2025-10-27 02:10:17
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ElementMetadata
    /// </summary>
    [DataContract(Name = "ElementMetadata")]
    public partial class ElementMetadata
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ISOLATEDCLASSPATH for value: ISOLATED_CLASSPATH
            /// </summary>
            [EnumMember(Value = "ISOLATED_CLASSPATH")]
            ISOLATEDCLASSPATH = 1,

            /// <summary>
            /// Enum SHAREDCLASSPATH for value: SHARED_CLASSPATH
            /// </summary>
            [EnumMember(Value = "SHARED_CLASSPATH")]
            SHAREDCLASSPATH = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementMetadata" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="definition">definition.</param>
        /// <param name="services">services.</param>
        /// <param name="producedEvents">producedEvents.</param>
        /// <param name="consumedEvents">consumedEvents.</param>
        /// <param name="dependencies">dependencies.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="defaultAttributes">defaultAttributes.</param>
        public ElementMetadata(TypeEnum? type = default(TypeEnum?), ElementDefinitionMetadata definition = default(ElementDefinitionMetadata), List<ElementServiceRecord> services = default(List<ElementServiceRecord>), List<ElementEventProducerRecord> producedEvents = default(List<ElementEventProducerRecord>), List<ElementEventConsumerRecordObject> consumedEvents = default(List<ElementEventConsumerRecordObject>), List<ElementDependencyRecord> dependencies = default(List<ElementDependencyRecord>), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), List<ElementDefaultAttributeRecord> defaultAttributes = default(List<ElementDefaultAttributeRecord>))
        {
            this.Type = type;
            this.Definition = definition;
            this.Services = services;
            this.ProducedEvents = producedEvents;
            this.ConsumedEvents = consumedEvents;
            this.Dependencies = dependencies;
            this.Attributes = attributes;
            this.DefaultAttributes = defaultAttributes;
        }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public ElementDefinitionMetadata Definition { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public List<ElementServiceRecord> Services { get; set; }

        /// <summary>
        /// Gets or Sets ProducedEvents
        /// </summary>
        [DataMember(Name = "producedEvents", EmitDefaultValue = false)]
        public List<ElementEventProducerRecord> ProducedEvents { get; set; }

        /// <summary>
        /// Gets or Sets ConsumedEvents
        /// </summary>
        [DataMember(Name = "consumedEvents", EmitDefaultValue = false)]
        public List<ElementEventConsumerRecordObject> ConsumedEvents { get; set; }

        /// <summary>
        /// Gets or Sets Dependencies
        /// </summary>
        [DataMember(Name = "dependencies", EmitDefaultValue = false)]
        public List<ElementDependencyRecord> Dependencies { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAttributes
        /// </summary>
        [DataMember(Name = "defaultAttributes", EmitDefaultValue = false)]
        public List<ElementDefaultAttributeRecord> DefaultAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElementMetadata {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  ProducedEvents: ").Append(ProducedEvents).Append("\n");
            sb.Append("  ConsumedEvents: ").Append(ConsumedEvents).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  DefaultAttributes: ").Append(DefaultAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
