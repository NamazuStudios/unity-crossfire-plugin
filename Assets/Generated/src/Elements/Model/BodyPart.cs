/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// BodyPart
    /// </summary>
    [DataContract(Name = "BodyPart")]
    public partial class BodyPart
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BodyPart" /> class.
        /// </summary>
        /// <param name="contentDisposition">contentDisposition.</param>
        /// <param name="entity">entity.</param>
        /// <param name="headers">headers.</param>
        /// <param name="mediaType">mediaType.</param>
        /// <param name="messageBodyWorkers">messageBodyWorkers.</param>
        /// <param name="parent">parent.</param>
        /// <param name="providers">providers.</param>
        /// <param name="parameterizedHeaders">parameterizedHeaders.</param>
        public BodyPart(ContentDisposition contentDisposition = default(ContentDisposition), Object entity = default(Object), BodyPartHeaders headers = default(BodyPartHeaders), MediaType mediaType = default(MediaType), Object messageBodyWorkers = default(Object), MultiPart parent = default(MultiPart), Object providers = default(Object), BodyPartParameterizedHeaders parameterizedHeaders = default(BodyPartParameterizedHeaders))
        {
            this.ContentDisposition = contentDisposition;
            this.Entity = entity;
            this.Headers = headers;
            this.MediaType = mediaType;
            this.MessageBodyWorkers = messageBodyWorkers;
            this.Parent = parent;
            this.Providers = providers;
            this.ParameterizedHeaders = parameterizedHeaders;
        }

        /// <summary>
        /// Gets or Sets ContentDisposition
        /// </summary>
        [DataMember(Name = "contentDisposition", EmitDefaultValue = false)]
        public ContentDisposition ContentDisposition { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public Object Entity { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public BodyPartHeaders Headers { get; set; }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name = "mediaType", EmitDefaultValue = false)]
        public MediaType MediaType { get; set; }

        /// <summary>
        /// Gets or Sets MessageBodyWorkers
        /// </summary>
        [DataMember(Name = "messageBodyWorkers", EmitDefaultValue = false)]
        public Object MessageBodyWorkers { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public MultiPart Parent { get; set; }

        /// <summary>
        /// Gets or Sets Providers
        /// </summary>
        [DataMember(Name = "providers", EmitDefaultValue = false)]
        public Object Providers { get; set; }

        /// <summary>
        /// Gets or Sets ParameterizedHeaders
        /// </summary>
        [DataMember(Name = "parameterizedHeaders", EmitDefaultValue = false)]
        public BodyPartParameterizedHeaders ParameterizedHeaders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BodyPart {\n");
            sb.Append("  ContentDisposition: ").Append(ContentDisposition).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  MessageBodyWorkers: ").Append(MessageBodyWorkers).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("  ParameterizedHeaders: ").Append(ParameterizedHeaders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
