/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// A listing of ScheduleEvents which are managing this Progress. Empty or null if the Progress is not managed as part of a Schedule.
    /// </summary>
    [DataContract(Name = "ScheduleEvent")]
    public partial class ScheduleEvent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleEvent" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="begin">begin.</param>
        /// <param name="end">end.</param>
        /// <param name="schedule">schedule (required).</param>
        /// <param name="missions">missions (required).</param>
        public ScheduleEvent(string id = default(string), long begin = default(long), long end = default(long), Schedule schedule = default(Schedule), List<Mission> missions = default(List<Mission>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ScheduleEvent and cannot be null");
            }
            this.Id = id;
            // to ensure "schedule" is required (not null)
            if (schedule == null)
            {
                throw new ArgumentNullException("schedule is a required property for ScheduleEvent and cannot be null");
            }
            this.Schedule = schedule;
            // to ensure "missions" is required (not null)
            if (missions == null)
            {
                throw new ArgumentNullException("missions is a required property for ScheduleEvent and cannot be null");
            }
            this.Missions = missions;
            this.Begin = begin;
            this.End = end;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Begin
        /// </summary>
        [DataMember(Name = "begin", EmitDefaultValue = false)]
        public long Begin { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public long End { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", IsRequired = true, EmitDefaultValue = true)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Gets or Sets Missions
        /// </summary>
        [DataMember(Name = "missions", IsRequired = true, EmitDefaultValue = true)]
        public List<Mission> Missions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Begin: ").Append(Begin).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Missions: ").Append(Missions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
