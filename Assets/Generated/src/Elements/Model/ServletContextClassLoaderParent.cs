/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ServletContextClassLoaderParent
    /// </summary>
    [DataContract(Name = "ServletContext_classLoader_parent")]
    public partial class ServletContextClassLoaderParent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServletContextClassLoaderParent" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="registeredAsParallelCapable">registeredAsParallelCapable.</param>
        /// <param name="unnamedModule">unnamedModule.</param>
        /// <param name="definedPackages">definedPackages.</param>
        /// <param name="defaultAssertionStatus">defaultAssertionStatus.</param>
        public ServletContextClassLoaderParent(string name = default(string), bool registeredAsParallelCapable = default(bool), ServletContextClassLoaderParentUnnamedModule unnamedModule = default(ServletContextClassLoaderParentUnnamedModule), List<ServletContextClassLoaderParentDefinedPackagesInner> definedPackages = default(List<ServletContextClassLoaderParentDefinedPackagesInner>), bool defaultAssertionStatus = default(bool))
        {
            this.Name = name;
            this.RegisteredAsParallelCapable = registeredAsParallelCapable;
            this.UnnamedModule = unnamedModule;
            this.DefinedPackages = definedPackages;
            this.DefaultAssertionStatus = defaultAssertionStatus;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredAsParallelCapable
        /// </summary>
        [DataMember(Name = "registeredAsParallelCapable", EmitDefaultValue = true)]
        public bool RegisteredAsParallelCapable { get; set; }

        /// <summary>
        /// Gets or Sets UnnamedModule
        /// </summary>
        [DataMember(Name = "unnamedModule", EmitDefaultValue = false)]
        public ServletContextClassLoaderParentUnnamedModule UnnamedModule { get; set; }

        /// <summary>
        /// Gets or Sets DefinedPackages
        /// </summary>
        [DataMember(Name = "definedPackages", EmitDefaultValue = false)]
        public List<ServletContextClassLoaderParentDefinedPackagesInner> DefinedPackages { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAssertionStatus
        /// </summary>
        [DataMember(Name = "defaultAssertionStatus", EmitDefaultValue = true)]
        public bool DefaultAssertionStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServletContextClassLoaderParent {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegisteredAsParallelCapable: ").Append(RegisteredAsParallelCapable).Append("\n");
            sb.Append("  UnnamedModule: ").Append(UnnamedModule).Append("\n");
            sb.Append("  DefinedPackages: ").Append(DefinedPackages).Append("\n");
            sb.Append("  DefaultAssertionStatus: ").Append(DefaultAssertionStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
