/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Used to create a save data document on the remote.
    /// </summary>
    [DataContract(Name = "CreateSaveDataDocumentRequest")]
    public partial class CreateSaveDataDocumentRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSaveDataDocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSaveDataDocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSaveDataDocumentRequest" /> class.
        /// </summary>
        /// <param name="slot">The slot of the property. Must be unique for user or profile. (required).</param>
        /// <param name="userId">The id of the user which owns the save data. If specified, the user will own this save data and the profileId must be null or be owned by the user specified..</param>
        /// <param name="profileId">The id of the profile which owns the save data. If specified, the profile will own this save data and the userId must be null or be owned by the user specified..</param>
        /// <param name="contents">The contents of the save data. (required).</param>
        public CreateSaveDataDocumentRequest(int slot = default(int), string userId = default(string), string profileId = default(string), string contents = default(string))
        {
            this.Slot = slot;
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for CreateSaveDataDocumentRequest and cannot be null");
            }
            this.Contents = contents;
            this.UserId = userId;
            this.ProfileId = profileId;
        }

        /// <summary>
        /// The slot of the property. Must be unique for user or profile.
        /// </summary>
        /// <value>The slot of the property. Must be unique for user or profile.</value>
        [DataMember(Name = "slot", IsRequired = true, EmitDefaultValue = true)]
        public int Slot { get; set; }

        /// <summary>
        /// The id of the user which owns the save data. If specified, the user will own this save data and the profileId must be null or be owned by the user specified.
        /// </summary>
        /// <value>The id of the user which owns the save data. If specified, the user will own this save data and the profileId must be null or be owned by the user specified.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// The id of the profile which owns the save data. If specified, the profile will own this save data and the userId must be null or be owned by the user specified.
        /// </summary>
        /// <value>The id of the profile which owns the save data. If specified, the profile will own this save data and the userId must be null or be owned by the user specified.</value>
        [DataMember(Name = "profileId", EmitDefaultValue = false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// The contents of the save data.
        /// </summary>
        /// <value>The contents of the save data.</value>
        [DataMember(Name = "contents", IsRequired = true, EmitDefaultValue = true)]
        public string Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSaveDataDocumentRequest {\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
