/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// A set of JWKs containing the keys required to validate JWT signatures.
    /// </summary>
    [DataContract(Name = "JWK")]
    public partial class JWK
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JWK" /> class.
        /// </summary>
        /// <param name="alg">Algorithm (e.g. RS256).</param>
        /// <param name="kid">Key id (unique to issuer).</param>
        /// <param name="kty">Key type (e.g. RSA).</param>
        /// <param name="use">The intended use (e.g. sig).</param>
        /// <param name="e">Base64url encoded exponent.</param>
        /// <param name="n">Pub key modulus.</param>
        public JWK(string alg = default(string), string kid = default(string), string kty = default(string), string use = default(string), string e = default(string), string n = default(string))
        {
            this.Alg = alg;
            this.Kid = kid;
            this.Kty = kty;
            this.Use = use;
            this.E = e;
            this.N = n;
        }

        /// <summary>
        /// Algorithm (e.g. RS256)
        /// </summary>
        /// <value>Algorithm (e.g. RS256)</value>
        [DataMember(Name = "alg", EmitDefaultValue = false)]
        public string Alg { get; set; }

        /// <summary>
        /// Key id (unique to issuer)
        /// </summary>
        /// <value>Key id (unique to issuer)</value>
        [DataMember(Name = "kid", EmitDefaultValue = false)]
        public string Kid { get; set; }

        /// <summary>
        /// Key type (e.g. RSA)
        /// </summary>
        /// <value>Key type (e.g. RSA)</value>
        [DataMember(Name = "kty", EmitDefaultValue = false)]
        public string Kty { get; set; }

        /// <summary>
        /// The intended use (e.g. sig)
        /// </summary>
        /// <value>The intended use (e.g. sig)</value>
        [DataMember(Name = "use", EmitDefaultValue = false)]
        public string Use { get; set; }

        /// <summary>
        /// Base64url encoded exponent
        /// </summary>
        /// <value>Base64url encoded exponent</value>
        [DataMember(Name = "e", EmitDefaultValue = false)]
        public string E { get; set; }

        /// <summary>
        /// Pub key modulus
        /// </summary>
        /// <value>Pub key modulus</value>
        [DataMember(Name = "n", EmitDefaultValue = false)]
        public string N { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JWK {\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  E: ").Append(E).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
