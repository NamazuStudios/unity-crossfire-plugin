/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// OidcSessionRequest
    /// </summary>
    [DataContract(Name = "OidcSessionRequest")]
    public partial class OidcSessionRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OidcSessionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OidcSessionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OidcSessionRequest" /> class.
        /// </summary>
        /// <param name="jwt">The JWT to parse (required).</param>
        /// <param name="profileId">The profile ID to assign to the session..</param>
        /// <param name="profileSelector">A query string to select the profile to use. NOTE: This will not be run if a profileId is specified..</param>
        public OidcSessionRequest(string jwt = default(string), string profileId = default(string), string profileSelector = default(string))
        {
            // to ensure "jwt" is required (not null)
            if (jwt == null)
            {
                throw new ArgumentNullException("jwt is a required property for OidcSessionRequest and cannot be null");
            }
            this.Jwt = jwt;
            this.ProfileId = profileId;
            this.ProfileSelector = profileSelector;
        }

        /// <summary>
        /// The JWT to parse
        /// </summary>
        /// <value>The JWT to parse</value>
        [DataMember(Name = "jwt", IsRequired = true, EmitDefaultValue = true)]
        public string Jwt { get; set; }

        /// <summary>
        /// The profile ID to assign to the session.
        /// </summary>
        /// <value>The profile ID to assign to the session.</value>
        [DataMember(Name = "profileId", EmitDefaultValue = false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// A query string to select the profile to use. NOTE: This will not be run if a profileId is specified.
        /// </summary>
        /// <value>A query string to select the profile to use. NOTE: This will not be run if a profileId is specified.</value>
        [DataMember(Name = "profileSelector", EmitDefaultValue = false)]
        public string ProfileSelector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OidcSessionRequest {\n");
            sb.Append("  Jwt: ").Append(Jwt).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileSelector: ").Append(ProfileSelector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
