/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.3.10 - 9026b5d99b4ec92e367b100402af1adca227de0c - 2025-08-19 05:41:06
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// ProductBundle
    /// </summary>
    [DataContract(Name = "ProductBundle")]
    public partial class ProductBundle
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductBundle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductBundle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductBundle" /> class.
        /// </summary>
        /// <param name="productId">The platform-specific unique SKU/product identifier that, when purchased, will result in the items in this product bundle to be issued to the user. (required).</param>
        /// <param name="displayName">The title of the product bundle to display to end users..</param>
        /// <param name="description">The description of the product bundle to display to end users..</param>
        /// <param name="productBundleRewards">The list of product bundle rewards that will be issued to the user upon purchase. (required).</param>
        /// <param name="metadata">Application-specific metadata..</param>
        /// <param name="display">Whether or not the frontend should display this product bundle to end users. (required).</param>
        public ProductBundle(string productId = default(string), string displayName = default(string), string description = default(string), List<ProductBundleReward> productBundleRewards = default(List<ProductBundleReward>), Dictionary<string, Object> metadata = default(Dictionary<string, Object>), bool display = default(bool))
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for ProductBundle and cannot be null");
            }
            this.ProductId = productId;
            // to ensure "productBundleRewards" is required (not null)
            if (productBundleRewards == null)
            {
                throw new ArgumentNullException("productBundleRewards is a required property for ProductBundle and cannot be null");
            }
            this.ProductBundleRewards = productBundleRewards;
            this.Display = display;
            this.DisplayName = displayName;
            this.Description = description;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The platform-specific unique SKU/product identifier that, when purchased, will result in the items in this product bundle to be issued to the user.
        /// </summary>
        /// <value>The platform-specific unique SKU/product identifier that, when purchased, will result in the items in this product bundle to be issued to the user.</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// The title of the product bundle to display to end users.
        /// </summary>
        /// <value>The title of the product bundle to display to end users.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the product bundle to display to end users.
        /// </summary>
        /// <value>The description of the product bundle to display to end users.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The list of product bundle rewards that will be issued to the user upon purchase.
        /// </summary>
        /// <value>The list of product bundle rewards that will be issued to the user upon purchase.</value>
        [DataMember(Name = "productBundleRewards", IsRequired = true, EmitDefaultValue = true)]
        public List<ProductBundleReward> ProductBundleRewards { get; set; }

        /// <summary>
        /// Application-specific metadata.
        /// </summary>
        /// <value>Application-specific metadata.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Whether or not the frontend should display this product bundle to end users.
        /// </summary>
        /// <value>Whether or not the frontend should display this product bundle to end users.</value>
        [DataMember(Name = "display", IsRequired = true, EmitDefaultValue = true)]
        public bool Display { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductBundle {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProductBundleRewards: ").Append(ProductBundleRewards).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
